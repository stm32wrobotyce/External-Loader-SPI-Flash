
SPI_Flash_External_Loader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08012e94  08012e94  00022e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012fac  08012fac  00022fac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08012fac  08012fac  00022fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fb4  08012fb4  00030100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012fb4  08012fb4  00022fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012fb8  08012fb8  00022fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08012fbc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000110  20000100  080130bc  00030100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080130bc  00030210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178d0  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af2  00000000  00000000  00047a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  0004b4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00029099  00000000  00000000  0004c7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001855d  00000000  00000000  00075891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ef122  00000000  00000000  0008ddee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0017cf10  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000010f8  00000000  00000000  0017cf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ab0  00000000  00000000  0017e060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08012e78 	.word	0x08012e78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	08012e78 	.word	0x08012e78

080001c8 <_stack_init>:
 80001c8:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop

080001d0 <_mainCRTStartup>:
 80001d0:	4b17      	ldr	r3, [pc, #92]	; (8000230 <_mainCRTStartup+0x60>)
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	bf08      	it	eq
 80001d6:	4b13      	ldreq	r3, [pc, #76]	; (8000224 <_mainCRTStartup+0x54>)
 80001d8:	469d      	mov	sp, r3
 80001da:	f7ff fff5 	bl	80001c8 <_stack_init>
 80001de:	2100      	movs	r1, #0
 80001e0:	468b      	mov	fp, r1
 80001e2:	460f      	mov	r7, r1
 80001e4:	4813      	ldr	r0, [pc, #76]	; (8000234 <_mainCRTStartup+0x64>)
 80001e6:	4a14      	ldr	r2, [pc, #80]	; (8000238 <_mainCRTStartup+0x68>)
 80001e8:	1a12      	subs	r2, r2, r0
 80001ea:	f012 fe3d 	bl	8012e68 <memset>
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <_mainCRTStartup+0x58>)
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d000      	beq.n	80001f6 <_mainCRTStartup+0x26>
 80001f4:	4798      	blx	r3
 80001f6:	4b0d      	ldr	r3, [pc, #52]	; (800022c <_mainCRTStartup+0x5c>)
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d000      	beq.n	80001fe <_mainCRTStartup+0x2e>
 80001fc:	4798      	blx	r3
 80001fe:	2000      	movs	r0, #0
 8000200:	2100      	movs	r1, #0
 8000202:	0004      	movs	r4, r0
 8000204:	000d      	movs	r5, r1
 8000206:	480d      	ldr	r0, [pc, #52]	; (800023c <_mainCRTStartup+0x6c>)
 8000208:	2800      	cmp	r0, #0
 800020a:	d002      	beq.n	8000212 <_mainCRTStartup+0x42>
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <_mainCRTStartup+0x70>)
 800020e:	f3af 8000 	nop.w
 8000212:	f012 fe05 	bl	8012e20 <__libc_init_array>
 8000216:	0020      	movs	r0, r4
 8000218:	0029      	movs	r1, r5
 800021a:	f000 fcd3 	bl	8000bc4 <main>
 800021e:	f012 fdeb 	bl	8012df8 <exit>
 8000222:	bf00      	nop
 8000224:	00080000 	.word	0x00080000
	...
 8000234:	20000100 	.word	0x20000100
 8000238:	20000210 	.word	0x20000210
	...
 8000244:	08012fbc 	.word	0x08012fbc
 8000248:	20000000 	.word	0x20000000
 800024c:	20000100 	.word	0x20000100
 8000250:	20000100 	.word	0x20000100
 8000254:	20000210 	.word	0x20000210

08000258 <__aeabi_uldivmod>:
 8000258:	b953      	cbnz	r3, 8000270 <__aeabi_uldivmod+0x18>
 800025a:	b94a      	cbnz	r2, 8000270 <__aeabi_uldivmod+0x18>
 800025c:	2900      	cmp	r1, #0
 800025e:	bf08      	it	eq
 8000260:	2800      	cmpeq	r0, #0
 8000262:	bf1c      	itt	ne
 8000264:	f04f 31ff 	movne.w	r1, #4294967295
 8000268:	f04f 30ff 	movne.w	r0, #4294967295
 800026c:	f000 b96e 	b.w	800054c <__aeabi_idiv0>
 8000270:	f1ad 0c08 	sub.w	ip, sp, #8
 8000274:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000284:	b004      	add	sp, #16
 8000286:	4770      	bx	lr

08000288 <__udivmoddi4>:
 8000288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800028c:	9d08      	ldr	r5, [sp, #32]
 800028e:	4604      	mov	r4, r0
 8000290:	468c      	mov	ip, r1
 8000292:	2b00      	cmp	r3, #0
 8000294:	f040 8083 	bne.w	800039e <__udivmoddi4+0x116>
 8000298:	428a      	cmp	r2, r1
 800029a:	4617      	mov	r7, r2
 800029c:	d947      	bls.n	800032e <__udivmoddi4+0xa6>
 800029e:	fab2 f282 	clz	r2, r2
 80002a2:	b142      	cbz	r2, 80002b6 <__udivmoddi4+0x2e>
 80002a4:	f1c2 0020 	rsb	r0, r2, #32
 80002a8:	fa24 f000 	lsr.w	r0, r4, r0
 80002ac:	4091      	lsls	r1, r2
 80002ae:	4097      	lsls	r7, r2
 80002b0:	ea40 0c01 	orr.w	ip, r0, r1
 80002b4:	4094      	lsls	r4, r2
 80002b6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002ba:	0c23      	lsrs	r3, r4, #16
 80002bc:	fbbc f6f8 	udiv	r6, ip, r8
 80002c0:	fa1f fe87 	uxth.w	lr, r7
 80002c4:	fb08 c116 	mls	r1, r8, r6, ip
 80002c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002cc:	fb06 f10e 	mul.w	r1, r6, lr
 80002d0:	4299      	cmp	r1, r3
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x60>
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002da:	f080 8119 	bcs.w	8000510 <__udivmoddi4+0x288>
 80002de:	4299      	cmp	r1, r3
 80002e0:	f240 8116 	bls.w	8000510 <__udivmoddi4+0x288>
 80002e4:	3e02      	subs	r6, #2
 80002e6:	443b      	add	r3, r7
 80002e8:	1a5b      	subs	r3, r3, r1
 80002ea:	b2a4      	uxth	r4, r4
 80002ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80002f0:	fb08 3310 	mls	r3, r8, r0, r3
 80002f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d909      	bls.n	8000314 <__udivmoddi4+0x8c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	f080 8105 	bcs.w	8000514 <__udivmoddi4+0x28c>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f240 8102 	bls.w	8000514 <__udivmoddi4+0x28c>
 8000310:	3802      	subs	r0, #2
 8000312:	443c      	add	r4, r7
 8000314:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000318:	eba4 040e 	sub.w	r4, r4, lr
 800031c:	2600      	movs	r6, #0
 800031e:	b11d      	cbz	r5, 8000328 <__udivmoddi4+0xa0>
 8000320:	40d4      	lsrs	r4, r2
 8000322:	2300      	movs	r3, #0
 8000324:	e9c5 4300 	strd	r4, r3, [r5]
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	b902      	cbnz	r2, 8000332 <__udivmoddi4+0xaa>
 8000330:	deff      	udf	#255	; 0xff
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	2a00      	cmp	r2, #0
 8000338:	d150      	bne.n	80003dc <__udivmoddi4+0x154>
 800033a:	1bcb      	subs	r3, r1, r7
 800033c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000340:	fa1f f887 	uxth.w	r8, r7
 8000344:	2601      	movs	r6, #1
 8000346:	fbb3 fcfe 	udiv	ip, r3, lr
 800034a:	0c21      	lsrs	r1, r4, #16
 800034c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000350:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000354:	fb08 f30c 	mul.w	r3, r8, ip
 8000358:	428b      	cmp	r3, r1
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0xe4>
 800035c:	1879      	adds	r1, r7, r1
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0xe2>
 8000364:	428b      	cmp	r3, r1
 8000366:	f200 80e9 	bhi.w	800053c <__udivmoddi4+0x2b4>
 800036a:	4684      	mov	ip, r0
 800036c:	1ac9      	subs	r1, r1, r3
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1110 	mls	r1, lr, r0, r1
 8000378:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x10c>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x10a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80d9 	bhi.w	8000544 <__udivmoddi4+0x2bc>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e7bf      	b.n	800031e <__udivmoddi4+0x96>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d909      	bls.n	80003b6 <__udivmoddi4+0x12e>
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	f000 80b1 	beq.w	800050a <__udivmoddi4+0x282>
 80003a8:	2600      	movs	r6, #0
 80003aa:	e9c5 0100 	strd	r0, r1, [r5]
 80003ae:	4630      	mov	r0, r6
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	fab3 f683 	clz	r6, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d14a      	bne.n	8000454 <__udivmoddi4+0x1cc>
 80003be:	428b      	cmp	r3, r1
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0x140>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 80b8 	bhi.w	8000538 <__udivmoddi4+0x2b0>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb61 0103 	sbc.w	r1, r1, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	468c      	mov	ip, r1
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0a8      	beq.n	8000328 <__udivmoddi4+0xa0>
 80003d6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003da:	e7a5      	b.n	8000328 <__udivmoddi4+0xa0>
 80003dc:	f1c2 0320 	rsb	r3, r2, #32
 80003e0:	fa20 f603 	lsr.w	r6, r0, r3
 80003e4:	4097      	lsls	r7, r2
 80003e6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ee:	40d9      	lsrs	r1, r3
 80003f0:	4330      	orrs	r0, r6
 80003f2:	0c03      	lsrs	r3, r0, #16
 80003f4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f108 	mul.w	r1, r6, r8
 8000408:	4299      	cmp	r1, r3
 800040a:	fa04 f402 	lsl.w	r4, r4, r2
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x19c>
 8000410:	18fb      	adds	r3, r7, r3
 8000412:	f106 3cff 	add.w	ip, r6, #4294967295
 8000416:	f080 808d 	bcs.w	8000534 <__udivmoddi4+0x2ac>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 808a 	bls.w	8000534 <__udivmoddi4+0x2ac>
 8000420:	3e02      	subs	r6, #2
 8000422:	443b      	add	r3, r7
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b281      	uxth	r1, r0
 8000428:	fbb3 f0fe 	udiv	r0, r3, lr
 800042c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000430:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000434:	fb00 f308 	mul.w	r3, r0, r8
 8000438:	428b      	cmp	r3, r1
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x1c4>
 800043c:	1879      	adds	r1, r7, r1
 800043e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000442:	d273      	bcs.n	800052c <__udivmoddi4+0x2a4>
 8000444:	428b      	cmp	r3, r1
 8000446:	d971      	bls.n	800052c <__udivmoddi4+0x2a4>
 8000448:	3802      	subs	r0, #2
 800044a:	4439      	add	r1, r7
 800044c:	1acb      	subs	r3, r1, r3
 800044e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000452:	e778      	b.n	8000346 <__udivmoddi4+0xbe>
 8000454:	f1c6 0c20 	rsb	ip, r6, #32
 8000458:	fa03 f406 	lsl.w	r4, r3, r6
 800045c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000460:	431c      	orrs	r4, r3
 8000462:	fa20 f70c 	lsr.w	r7, r0, ip
 8000466:	fa01 f306 	lsl.w	r3, r1, r6
 800046a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800046e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000472:	431f      	orrs	r7, r3
 8000474:	0c3b      	lsrs	r3, r7, #16
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fa1f f884 	uxth.w	r8, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000486:	fb09 fa08 	mul.w	sl, r9, r8
 800048a:	458a      	cmp	sl, r1
 800048c:	fa02 f206 	lsl.w	r2, r2, r6
 8000490:	fa00 f306 	lsl.w	r3, r0, r6
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x220>
 8000496:	1861      	adds	r1, r4, r1
 8000498:	f109 30ff 	add.w	r0, r9, #4294967295
 800049c:	d248      	bcs.n	8000530 <__udivmoddi4+0x2a8>
 800049e:	458a      	cmp	sl, r1
 80004a0:	d946      	bls.n	8000530 <__udivmoddi4+0x2a8>
 80004a2:	f1a9 0902 	sub.w	r9, r9, #2
 80004a6:	4421      	add	r1, r4
 80004a8:	eba1 010a 	sub.w	r1, r1, sl
 80004ac:	b2bf      	uxth	r7, r7
 80004ae:	fbb1 f0fe 	udiv	r0, r1, lr
 80004b2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004ba:	fb00 f808 	mul.w	r8, r0, r8
 80004be:	45b8      	cmp	r8, r7
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x24a>
 80004c2:	19e7      	adds	r7, r4, r7
 80004c4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004c8:	d22e      	bcs.n	8000528 <__udivmoddi4+0x2a0>
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d92c      	bls.n	8000528 <__udivmoddi4+0x2a0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4427      	add	r7, r4
 80004d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004d6:	eba7 0708 	sub.w	r7, r7, r8
 80004da:	fba0 8902 	umull	r8, r9, r0, r2
 80004de:	454f      	cmp	r7, r9
 80004e0:	46c6      	mov	lr, r8
 80004e2:	4649      	mov	r1, r9
 80004e4:	d31a      	bcc.n	800051c <__udivmoddi4+0x294>
 80004e6:	d017      	beq.n	8000518 <__udivmoddi4+0x290>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x27a>
 80004ea:	ebb3 020e 	subs.w	r2, r3, lr
 80004ee:	eb67 0701 	sbc.w	r7, r7, r1
 80004f2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004f6:	40f2      	lsrs	r2, r6
 80004f8:	ea4c 0202 	orr.w	r2, ip, r2
 80004fc:	40f7      	lsrs	r7, r6
 80004fe:	e9c5 2700 	strd	r2, r7, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xa0>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0x60>
 8000514:	4618      	mov	r0, r3
 8000516:	e6fd      	b.n	8000314 <__udivmoddi4+0x8c>
 8000518:	4543      	cmp	r3, r8
 800051a:	d2e5      	bcs.n	80004e8 <__udivmoddi4+0x260>
 800051c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000520:	eb69 0104 	sbc.w	r1, r9, r4
 8000524:	3801      	subs	r0, #1
 8000526:	e7df      	b.n	80004e8 <__udivmoddi4+0x260>
 8000528:	4608      	mov	r0, r1
 800052a:	e7d2      	b.n	80004d2 <__udivmoddi4+0x24a>
 800052c:	4660      	mov	r0, ip
 800052e:	e78d      	b.n	800044c <__udivmoddi4+0x1c4>
 8000530:	4681      	mov	r9, r0
 8000532:	e7b9      	b.n	80004a8 <__udivmoddi4+0x220>
 8000534:	4666      	mov	r6, ip
 8000536:	e775      	b.n	8000424 <__udivmoddi4+0x19c>
 8000538:	4630      	mov	r0, r6
 800053a:	e74a      	b.n	80003d2 <__udivmoddi4+0x14a>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	4439      	add	r1, r7
 8000542:	e713      	b.n	800036c <__udivmoddi4+0xe4>
 8000544:	3802      	subs	r0, #2
 8000546:	443c      	add	r4, r7
 8000548:	e724      	b.n	8000394 <__udivmoddi4+0x10c>
 800054a:	bf00      	nop

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <Init>:
 * @param  None
 * @retval  LOADER_OK = 1   : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int
Init(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef status;

	SystemInit();
 8000556:	f000 fe31 	bl	80011bc <SystemInit>
	SCB->VTOR = 0x20000000 | 0x200;
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <Init+0x3c>)
 800055c:	4a0c      	ldr	r2, [pc, #48]	; (8000590 <Init+0x40>)
 800055e:	609a      	str	r2, [r3, #8]

    HAL_Init();
 8000560:	f000 ffc4 	bl	80014ec <HAL_Init>
    SystemClock_Config();
 8000564:	f000 fb5d 	bl	8000c22 <SystemClock_Config>
    MX_GPIO_Init();
 8000568:	f000 fab0 	bl	8000acc <MX_GPIO_Init>
    MX_SPI2_Init();
 800056c:	f000 fbd4 	bl	8000d18 <MX_SPI2_Init>

    status = W25Q64_Init();
 8000570:	f000 f8b9 	bl	80006e6 <W25Q64_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	71fb      	strb	r3, [r7, #7]

	if(HAL_OK == status)
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d101      	bne.n	8000582 <Init+0x32>
		return LOADER_OK;
 800057e:	2301      	movs	r3, #1
 8000580:	e000      	b.n	8000584 <Init+0x34>
	else
		return LOADER_FAIL;
 8000582:	2300      	movs	r3, #0
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	e000ed00 	.word	0xe000ed00
 8000590:	20000200 	.word	0x20000200

08000594 <Write>:
 * @param   buffer : pointer to data buffer
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int
Write(uint32_t Address, uint32_t Size, uint8_t* buffer) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	uint32_t i, number_of_pages, page_address;
	uint8_t *page_buffer;
	uint8_t modulo_flag;
	HAL_StatusTypeDef status;

	if((Size % PAGE_SIZE) == 0)
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d105      	bne.n	80005b4 <Write+0x20>
	{
		number_of_pages = Size/PAGE_SIZE;
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	0a1b      	lsrs	r3, r3, #8
 80005ac:	623b      	str	r3, [r7, #32]
		modulo_flag = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	75fb      	strb	r3, [r7, #23]
 80005b2:	e005      	b.n	80005c0 <Write+0x2c>
	}
	else
	{
		number_of_pages = Size/PAGE_SIZE + 1;
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	3301      	adds	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
		modulo_flag = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	75fb      	strb	r3, [r7, #23]
	}

	page_address = Address;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	61fb      	str	r3, [r7, #28]
	page_buffer = buffer;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	61bb      	str	r3, [r7, #24]

	for(i=0; i<number_of_pages; i++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
 80005cc:	e017      	b.n	80005fe <Write+0x6a>
	{
		status = W25Q64_PageProgram(page_address, page_buffer, PAGE_SIZE);
 80005ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005d2:	69b9      	ldr	r1, [r7, #24]
 80005d4:	69f8      	ldr	r0, [r7, #28]
 80005d6:	f000 f963 	bl	80008a0 <W25Q64_PageProgram>
 80005da:	4603      	mov	r3, r0
 80005dc:	75bb      	strb	r3, [r7, #22]

		page_address += PAGE_SIZE;
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80005e4:	61fb      	str	r3, [r7, #28]
		page_buffer += PAGE_SIZE;
 80005e6:	69bb      	ldr	r3, [r7, #24]
 80005e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80005ec:	61bb      	str	r3, [r7, #24]

		if(HAL_OK != status)
 80005ee:	7dbb      	ldrb	r3, [r7, #22]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <Write+0x64>
			return LOADER_FAIL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	e01a      	b.n	800062e <Write+0x9a>
	for(i=0; i<number_of_pages; i++)
 80005f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005fa:	3301      	adds	r3, #1
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
 80005fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000600:	6a3b      	ldr	r3, [r7, #32]
 8000602:	429a      	cmp	r2, r3
 8000604:	d3e3      	bcc.n	80005ce <Write+0x3a>
	}

	if(modulo_flag == 1)
 8000606:	7dfb      	ldrb	r3, [r7, #23]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d10f      	bne.n	800062c <Write+0x98>
	{
		status = W25Q64_PageProgram(page_address, page_buffer, Size % PAGE_SIZE);
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	b29b      	uxth	r3, r3
 8000610:	b2db      	uxtb	r3, r3
 8000612:	b29b      	uxth	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	69b9      	ldr	r1, [r7, #24]
 8000618:	69f8      	ldr	r0, [r7, #28]
 800061a:	f000 f941 	bl	80008a0 <W25Q64_PageProgram>
 800061e:	4603      	mov	r3, r0
 8000620:	75bb      	strb	r3, [r7, #22]

		if(HAL_OK != status)
 8000622:	7dbb      	ldrb	r3, [r7, #22]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <Write+0x98>
			return LOADER_FAIL;
 8000628:	2300      	movs	r3, #0
 800062a:	e000      	b.n	800062e <Write+0x9a>
	}

    return LOADER_OK;
 800062c:	2301      	movs	r3, #1
}
 800062e:	4618      	mov	r0, r3
 8000630:	3728      	adds	r7, #40	; 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <SectorErase>:
 * @param   EraseEndAddress   :  erase end address
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int
SectorErase(uint32_t EraseStartAddress, uint32_t EraseEndAddress) {
 8000636:	b580      	push	{r7, lr}
 8000638:	b086      	sub	sp, #24
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	int i;

	uint32_t erase_start_sector_nbr, erase_sector_nbr;

	erase_start_sector_nbr = EraseStartAddress/SECTOR_SIZE;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	0b1b      	lsrs	r3, r3, #12
 8000644:	613b      	str	r3, [r7, #16]
	erase_sector_nbr = EraseEndAddress/SECTOR_SIZE - erase_start_sector_nbr;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	0b1a      	lsrs	r2, r3, #12
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	60fb      	str	r3, [r7, #12]

	for(i = erase_start_sector_nbr; i<erase_sector_nbr; i++)
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	e00e      	b.n	8000674 <SectorErase+0x3e>
	{
		status = W25Q64_SectorErase(i);
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	b29b      	uxth	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f950 	bl	8000900 <W25Q64_SectorErase>
 8000660:	4603      	mov	r3, r0
 8000662:	72fb      	strb	r3, [r7, #11]

		if(HAL_OK != status)
 8000664:	7afb      	ldrb	r3, [r7, #11]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SectorErase+0x38>
			return LOADER_FAIL;
 800066a:	2300      	movs	r3, #0
 800066c:	e007      	b.n	800067e <SectorErase+0x48>
	for(i = erase_start_sector_nbr; i<erase_sector_nbr; i++)
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	3301      	adds	r3, #1
 8000672:	617b      	str	r3, [r7, #20]
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	429a      	cmp	r2, r3
 800067a:	d8ec      	bhi.n	8000656 <SectorErase+0x20>
	}

    return LOADER_OK;
 800067c:	2301      	movs	r3, #1
}
 800067e:	4618      	mov	r0, r3
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <MassErase>:
 * outputs   :
 *     none
 * Note: Optional for all types of device
 */
int
MassErase(void) {
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef status;

	status = W25Q64_ChipErase();
 800068c:	f000 f966 	bl	800095c <W25Q64_ChipErase>
 8000690:	4603      	mov	r3, r0
 8000692:	71fb      	strb	r3, [r7, #7]

	if(HAL_OK == status)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d101      	bne.n	800069e <MassErase+0x18>
		return LOADER_OK;
 800069a:	2301      	movs	r3, #1
 800069c:	e000      	b.n	80006a0 <MassErase+0x1a>
	else
		return LOADER_FAIL;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <CheckSum>:
 * outputs   :
 *     R0             : Checksum value
 * Note: Optional for all types of device
 */
uint32_t
CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal) {
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]

    return LOADER_OK;
 80006b4:	2301      	movs	r3, #1
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <Verify>:
 *     R0             : Operation failed (address of failure)
 *     R1             : Checksum value
 * Note: Optional for all types of device
 */
uint64_t
Verify(uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size, uint32_t missalignement) {
 80006c2:	b480      	push	{r7}
 80006c4:	b085      	sub	sp, #20
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	603b      	str	r3, [r7, #0]


    return LOADER_OK;
 80006d0:	f04f 0201 	mov.w	r2, #1
 80006d4:	f04f 0300 	mov.w	r3, #0
}
 80006d8:	4610      	mov	r0, r2
 80006da:	4619      	mov	r1, r3
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <W25Q64_Init>:
#define	WIBOND_ID					0xEF
#define SPI_DEVICE_ID				0x40
#define CAPACITY_64_MBIT			0x17

uint8_t W25Q64_Init(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b082      	sub	sp, #8
 80006ea:	af00      	add	r7, sp, #0
	struct memory_info w25q64_memory;

	W25Q64_ResetFlash();
 80006ec:	f000 f814 	bl	8000718 <W25Q64_ResetFlash>
	W25Q64_get_JEDEC_ID(&w25q64_memory);
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 f94e 	bl	8000994 <W25Q64_get_JEDEC_ID>

	if(WIBOND_ID == w25q64_memory.manufacturer_ID && SPI_DEVICE_ID == w25q64_memory.memory_type && CAPACITY_64_MBIT == w25q64_memory.capacity)
 80006f8:	793b      	ldrb	r3, [r7, #4]
 80006fa:	2bef      	cmp	r3, #239	; 0xef
 80006fc:	d107      	bne.n	800070e <W25Q64_Init+0x28>
 80006fe:	797b      	ldrb	r3, [r7, #5]
 8000700:	2b40      	cmp	r3, #64	; 0x40
 8000702:	d104      	bne.n	800070e <W25Q64_Init+0x28>
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	2b17      	cmp	r3, #23
 8000708:	d101      	bne.n	800070e <W25Q64_Init+0x28>
		return HAL_OK;
 800070a:	2300      	movs	r3, #0
 800070c:	e000      	b.n	8000710 <W25Q64_Init+0x2a>
	else
		return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <W25Q64_ResetFlash>:

void W25Q64_ResetFlash(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
	uint8_t data_to_send[] = { ENABLE_RESET, RESET };
 800071e:	f649 1366 	movw	r3, #39270	; 0x9966
 8000722:	80bb      	strh	r3, [r7, #4]

	W25Q64_Set_ChipSelect_Low();
 8000724:	f000 f9ba 	bl	8000a9c <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(data_to_send, 2);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2102      	movs	r1, #2
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f989 	bl	8000a44 <W25Q64_SPI_Transmit_Data>
	W25Q64_Set_ChipSelect_High();
 8000732:	f000 f9bf 	bl	8000ab4 <W25Q64_Set_ChipSelect_High>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <W25Q64_WriteEnable>:

void W25Q64_WriteEnable(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
	uint8_t data_to_send =  WRITE_ENABLE;
 8000744:	2306      	movs	r3, #6
 8000746:	71fb      	strb	r3, [r7, #7]

	W25Q64_Set_ChipSelect_Low();
 8000748:	f000 f9a8 	bl	8000a9c <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(&data_to_send, 1);
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	2101      	movs	r1, #1
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f977 	bl	8000a44 <W25Q64_SPI_Transmit_Data>
	W25Q64_Set_ChipSelect_High();
 8000756:	f000 f9ad 	bl	8000ab4 <W25Q64_Set_ChipSelect_High>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <W25Q64_WriteDisable>:

void W25Q64_WriteDisable(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
	uint8_t data_to_send =  WRITE_DISABLE;
 8000768:	2304      	movs	r3, #4
 800076a:	71fb      	strb	r3, [r7, #7]

	W25Q64_Set_ChipSelect_Low();
 800076c:	f000 f996 	bl	8000a9c <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(&data_to_send, 1);
 8000770:	1dfb      	adds	r3, r7, #7
 8000772:	2101      	movs	r1, #1
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f965 	bl	8000a44 <W25Q64_SPI_Transmit_Data>
	W25Q64_Set_ChipSelect_High();
 800077a:	f000 f99b 	bl	8000ab4 <W25Q64_Set_ChipSelect_High>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <W25Q64_ReadStatusRegister1>:

uint8_t W25Q64_ReadStatusRegister1(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
	uint8_t data_to_send = READ_STATUS_REG1;
 800078c:	2305      	movs	r3, #5
 800078e:	71fb      	strb	r3, [r7, #7]
	uint8_t receive_data = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	71bb      	strb	r3, [r7, #6]

	W25Q64_Set_ChipSelect_Low();
 8000794:	f000 f982 	bl	8000a9c <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(&data_to_send, 1);
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	2101      	movs	r1, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f000 f951 	bl	8000a44 <W25Q64_SPI_Transmit_Data>
	W25Q64_SPI_Receive_Data(&receive_data, 1);
 80007a2:	1dbb      	adds	r3, r7, #6
 80007a4:	2101      	movs	r1, #1
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f962 	bl	8000a70 <W25Q64_SPI_Receive_Data>
	W25Q64_Set_ChipSelect_High();
 80007ac:	f000 f982 	bl	8000ab4 <W25Q64_Set_ChipSelect_High>

	return receive_data;
 80007b0:	79bb      	ldrb	r3, [r7, #6]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <W25Q64_ReadStatusRegister2>:

uint8_t W25Q64_ReadStatusRegister2(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
	uint8_t data_to_send = READ_STATUS_REG2;
 80007c0:	2335      	movs	r3, #53	; 0x35
 80007c2:	71fb      	strb	r3, [r7, #7]
	uint8_t receive_data = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	71bb      	strb	r3, [r7, #6]

	W25Q64_Set_ChipSelect_Low();
 80007c8:	f000 f968 	bl	8000a9c <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(&data_to_send, 1);
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	2101      	movs	r1, #1
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f937 	bl	8000a44 <W25Q64_SPI_Transmit_Data>
	W25Q64_SPI_Receive_Data(&receive_data, 1);
 80007d6:	1dbb      	adds	r3, r7, #6
 80007d8:	2101      	movs	r1, #1
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f948 	bl	8000a70 <W25Q64_SPI_Receive_Data>
	W25Q64_Set_ChipSelect_High();
 80007e0:	f000 f968 	bl	8000ab4 <W25Q64_Set_ChipSelect_High>

	return receive_data;
 80007e4:	79bb      	ldrb	r3, [r7, #6]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <W25Q64_WriteStatusRegister>:

void W25Q64_WriteStatusRegister(uint8_t reg1, uint8_t reg2)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	460a      	mov	r2, r1
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	71bb      	strb	r3, [r7, #6]
	uint8_t data_to_send[] = { 0, 0, 0 };
 8000800:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <W25Q64_WriteStatusRegister+0x50>)
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	4611      	mov	r1, r2
 800080a:	8019      	strh	r1, [r3, #0]
 800080c:	3302      	adds	r3, #2
 800080e:	0c12      	lsrs	r2, r2, #16
 8000810:	701a      	strb	r2, [r3, #0]

	W25Q64_WriteEnable_and_WaitForWriteEnableLatch();
 8000812:	f000 f8ed 	bl	80009f0 <W25Q64_WriteEnable_and_WaitForWriteEnableLatch>

	data_to_send[0] = WRITE_STATUS_REG;
 8000816:	2301      	movs	r3, #1
 8000818:	733b      	strb	r3, [r7, #12]
	data_to_send[1] = reg1;
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	737b      	strb	r3, [r7, #13]
	data_to_send[2] = reg2;
 800081e:	79bb      	ldrb	r3, [r7, #6]
 8000820:	73bb      	strb	r3, [r7, #14]

	W25Q64_Set_ChipSelect_Low();
 8000822:	f000 f93b 	bl	8000a9c <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(data_to_send, 2);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2102      	movs	r1, #2
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f909 	bl	8000a44 <W25Q64_SPI_Transmit_Data>
	W25Q64_Set_ChipSelect_High();
 8000832:	f000 f93f 	bl	8000ab4 <W25Q64_Set_ChipSelect_High>
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	08012e94 	.word	0x08012e94

08000844 <W25Q64_ReadDataBytes>:

HAL_StatusTypeDef W25Q64_ReadDataBytes(uint32_t adress, uint8_t *data, uint16_t size)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	4613      	mov	r3, r2
 8000850:	80fb      	strh	r3, [r7, #6]
	uint8_t data_to_send[] = { 0, 0, 0, 0 };
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
	HAL_StatusTypeDef status;

	W25Q64_WaitForWriteInProgressClear();
 8000856:	f000 f8e7 	bl	8000a28 <W25Q64_WaitForWriteInProgressClear>

	data_to_send[0] = READ_DATA;
 800085a:	2303      	movs	r3, #3
 800085c:	743b      	strb	r3, [r7, #16]
	data_to_send[1] = (adress >> 16) & 0xff;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	0c1b      	lsrs	r3, r3, #16
 8000862:	b2db      	uxtb	r3, r3
 8000864:	747b      	strb	r3, [r7, #17]
	data_to_send[2] = (adress >> 8) & 0xff;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	b2db      	uxtb	r3, r3
 800086c:	74bb      	strb	r3, [r7, #18]
	data_to_send[3] = adress & 0xff;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	74fb      	strb	r3, [r7, #19]

	W25Q64_Set_ChipSelect_Low();
 8000874:	f000 f912 	bl	8000a9c <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(data_to_send, 4);
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	2104      	movs	r1, #4
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f8e0 	bl	8000a44 <W25Q64_SPI_Transmit_Data>
	status = W25Q64_SPI_Receive_Data(data, size);
 8000884:	88fb      	ldrh	r3, [r7, #6]
 8000886:	4619      	mov	r1, r3
 8000888:	68b8      	ldr	r0, [r7, #8]
 800088a:	f000 f8f1 	bl	8000a70 <W25Q64_SPI_Receive_Data>
 800088e:	4603      	mov	r3, r0
 8000890:	75fb      	strb	r3, [r7, #23]
	W25Q64_Set_ChipSelect_High();
 8000892:	f000 f90f 	bl	8000ab4 <W25Q64_Set_ChipSelect_High>

	return status;
 8000896:	7dfb      	ldrb	r3, [r7, #23]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <W25Q64_PageProgram>:

HAL_StatusTypeDef W25Q64_PageProgram(uint32_t page_adress, uint8_t *data, uint16_t size)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	4613      	mov	r3, r2
 80008ac:	80fb      	strh	r3, [r7, #6]
	uint8_t data_to_send[] = { 0, 0, 0, 0 };
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
	HAL_StatusTypeDef status;

	W25Q64_WaitForWriteInProgressClear();
 80008b2:	f000 f8b9 	bl	8000a28 <W25Q64_WaitForWriteInProgressClear>
	W25Q64_WriteEnable_and_WaitForWriteEnableLatch();
 80008b6:	f000 f89b 	bl	80009f0 <W25Q64_WriteEnable_and_WaitForWriteEnableLatch>

	data_to_send[0] = PAGE_PROGRAM;
 80008ba:	2302      	movs	r3, #2
 80008bc:	743b      	strb	r3, [r7, #16]
	data_to_send[1] = (page_adress >> 16) & 0xff;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	0c1b      	lsrs	r3, r3, #16
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	747b      	strb	r3, [r7, #17]
	data_to_send[2] = (page_adress >> 8) & 0xff;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	74bb      	strb	r3, [r7, #18]
	data_to_send[3] = page_adress & 0xff;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	74fb      	strb	r3, [r7, #19]

	W25Q64_Set_ChipSelect_Low();
 80008d4:	f000 f8e2 	bl	8000a9c <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(data_to_send, 4);
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	2104      	movs	r1, #4
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f8b0 	bl	8000a44 <W25Q64_SPI_Transmit_Data>
	status = W25Q64_SPI_Transmit_Data(data, size);
 80008e4:	88fb      	ldrh	r3, [r7, #6]
 80008e6:	4619      	mov	r1, r3
 80008e8:	68b8      	ldr	r0, [r7, #8]
 80008ea:	f000 f8ab 	bl	8000a44 <W25Q64_SPI_Transmit_Data>
 80008ee:	4603      	mov	r3, r0
 80008f0:	75fb      	strb	r3, [r7, #23]
	W25Q64_Set_ChipSelect_High();
 80008f2:	f000 f8df 	bl	8000ab4 <W25Q64_Set_ChipSelect_High>

	return status;
 80008f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <W25Q64_SectorErase>:

HAL_StatusTypeDef W25Q64_SectorErase(uint16_t sector_number)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
	uint32_t adress;
	adress = sector_number * SECTOR_SIZE;
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	031b      	lsls	r3, r3, #12
 800090e:	617b      	str	r3, [r7, #20]
	uint8_t data_to_send[] = { 0, 0, 0, 0 };
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef status;

	W25Q64_WaitForWriteInProgressClear();
 8000914:	f000 f888 	bl	8000a28 <W25Q64_WaitForWriteInProgressClear>
	W25Q64_WriteEnable_and_WaitForWriteEnableLatch();
 8000918:	f000 f86a 	bl	80009f0 <W25Q64_WriteEnable_and_WaitForWriteEnableLatch>

	data_to_send[0] = SECTOR_ERASE;
 800091c:	2320      	movs	r3, #32
 800091e:	733b      	strb	r3, [r7, #12]
	data_to_send[1] = (adress >> 16) & 0xff;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	0c1b      	lsrs	r3, r3, #16
 8000924:	b2db      	uxtb	r3, r3
 8000926:	737b      	strb	r3, [r7, #13]
	data_to_send[2] = (adress >> 8) & 0xff;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	0a1b      	lsrs	r3, r3, #8
 800092c:	b2db      	uxtb	r3, r3
 800092e:	73bb      	strb	r3, [r7, #14]
	data_to_send[3] = adress & 0xff;
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	73fb      	strb	r3, [r7, #15]

	W25Q64_Set_ChipSelect_Low();
 8000936:	f000 f8b1 	bl	8000a9c <W25Q64_Set_ChipSelect_Low>
	status = W25Q64_SPI_Transmit_Data(data_to_send, 4);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	2104      	movs	r1, #4
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f87f 	bl	8000a44 <W25Q64_SPI_Transmit_Data>
 8000946:	4603      	mov	r3, r0
 8000948:	74fb      	strb	r3, [r7, #19]
	W25Q64_Set_ChipSelect_High();
 800094a:	f000 f8b3 	bl	8000ab4 <W25Q64_Set_ChipSelect_High>

	W25Q64_WaitForWriteInProgressClear();
 800094e:	f000 f86b 	bl	8000a28 <W25Q64_WaitForWriteInProgressClear>

	return status;
 8000952:	7cfb      	ldrb	r3, [r7, #19]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <W25Q64_ChipErase>:

HAL_StatusTypeDef W25Q64_ChipErase(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
	uint8_t data_to_send =  CHIP_ERASE;
 8000962:	23c7      	movs	r3, #199	; 0xc7
 8000964:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;

	W25Q64_WaitForWriteInProgressClear();
 8000966:	f000 f85f 	bl	8000a28 <W25Q64_WaitForWriteInProgressClear>
	W25Q64_WriteEnable_and_WaitForWriteEnableLatch();
 800096a:	f000 f841 	bl	80009f0 <W25Q64_WriteEnable_and_WaitForWriteEnableLatch>

	W25Q64_Set_ChipSelect_Low();
 800096e:	f000 f895 	bl	8000a9c <W25Q64_Set_ChipSelect_Low>
	status = W25Q64_SPI_Transmit_Data(&data_to_send, 1);
 8000972:	1dbb      	adds	r3, r7, #6
 8000974:	2101      	movs	r1, #1
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f864 	bl	8000a44 <W25Q64_SPI_Transmit_Data>
 800097c:	4603      	mov	r3, r0
 800097e:	71fb      	strb	r3, [r7, #7]
	W25Q64_Set_ChipSelect_High();
 8000980:	f000 f898 	bl	8000ab4 <W25Q64_Set_ChipSelect_High>

	W25Q64_WaitForWriteInProgressClear();
 8000984:	f000 f850 	bl	8000a28 <W25Q64_WaitForWriteInProgressClear>

	return status;
 8000988:	79fb      	ldrb	r3, [r7, #7]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <W25Q64_get_JEDEC_ID>:

void W25Q64_get_JEDEC_ID(struct memory_info *info)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	uint8_t data_to_send = 0x9F;
 800099c:	239f      	movs	r3, #159	; 0x9f
 800099e:	73fb      	strb	r3, [r7, #15]
	uint8_t receive_data[3] = { 0, 0, 0 };
 80009a0:	4a12      	ldr	r2, [pc, #72]	; (80009ec <W25Q64_get_JEDEC_ID+0x58>)
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	6812      	ldr	r2, [r2, #0]
 80009a8:	4611      	mov	r1, r2
 80009aa:	8019      	strh	r1, [r3, #0]
 80009ac:	3302      	adds	r3, #2
 80009ae:	0c12      	lsrs	r2, r2, #16
 80009b0:	701a      	strb	r2, [r3, #0]

	W25Q64_Set_ChipSelect_Low();
 80009b2:	f000 f873 	bl	8000a9c <W25Q64_Set_ChipSelect_Low>

	W25Q64_SPI_Transmit_Data(&data_to_send, 1);
 80009b6:	f107 030f 	add.w	r3, r7, #15
 80009ba:	2101      	movs	r1, #1
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f841 	bl	8000a44 <W25Q64_SPI_Transmit_Data>
	W25Q64_SPI_Receive_Data(receive_data, 3);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	2103      	movs	r1, #3
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 f851 	bl	8000a70 <W25Q64_SPI_Receive_Data>

	W25Q64_Set_ChipSelect_High();
 80009ce:	f000 f871 	bl	8000ab4 <W25Q64_Set_ChipSelect_High>

	info->manufacturer_ID = receive_data[0];
 80009d2:	7b3a      	ldrb	r2, [r7, #12]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	701a      	strb	r2, [r3, #0]
	info->memory_type = receive_data[1];
 80009d8:	7b7a      	ldrb	r2, [r7, #13]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	705a      	strb	r2, [r3, #1]
	info->capacity = receive_data[2];
 80009de:	7bba      	ldrb	r2, [r7, #14]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	709a      	strb	r2, [r3, #2]
}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	08012e94 	.word	0x08012e94

080009f0 <W25Q64_WriteEnable_and_WaitForWriteEnableLatch>:

void W25Q64_WriteEnable_and_WaitForWriteEnableLatch(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	while(!(W25Q64_ReadStatusRegister1() & W25Q64_WRITE_ENABLE_LATCH))
 80009f4:	e001      	b.n	80009fa <W25Q64_WriteEnable_and_WaitForWriteEnableLatch+0xa>
	{
		W25Q64_WriteEnable();
 80009f6:	f7ff fea2 	bl	800073e <W25Q64_WriteEnable>
	while(!(W25Q64_ReadStatusRegister1() & W25Q64_WRITE_ENABLE_LATCH))
 80009fa:	f7ff fec4 	bl	8000786 <W25Q64_ReadStatusRegister1>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f003 0302 	and.w	r3, r3, #2
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0f6      	beq.n	80009f6 <W25Q64_WriteEnable_and_WaitForWriteEnableLatch+0x6>
	}
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <W25Q64_WaitForWriteEnableLatch>:

void W25Q64_WaitForWriteEnableLatch(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
	while(!(W25Q64_ReadStatusRegister1() & W25Q64_WRITE_ENABLE_LATCH))
 8000a12:	bf00      	nop
 8000a14:	f7ff feb7 	bl	8000786 <W25Q64_ReadStatusRegister1>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d0f8      	beq.n	8000a14 <W25Q64_WaitForWriteEnableLatch+0x6>
	{
		;
	}
}
 8000a22:	bf00      	nop
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <W25Q64_WaitForWriteInProgressClear>:

void W25Q64_WaitForWriteInProgressClear(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	while((W25Q64_ReadStatusRegister1() & W25Q64_WRITE_IN_PROGRESS))
 8000a2c:	bf00      	nop
 8000a2e:	f7ff feaa 	bl	8000786 <W25Q64_ReadStatusRegister1>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1f8      	bne.n	8000a2e <W25Q64_WaitForWriteInProgressClear+0x6>
	{
		;
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <W25Q64_SPI_Transmit_Data>:

HAL_StatusTypeDef W25Q64_SPI_Transmit_Data(uint8_t *data, uint16_t size)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;

	status = HAL_SPI_Transmit(&hspi2, data, size, 1000);
 8000a50:	887a      	ldrh	r2, [r7, #2]
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <W25Q64_SPI_Transmit_Data+0x28>)
 8000a5a:	f00c fc3a 	bl	800d2d2 <HAL_SPI_Transmit>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	73fb      	strb	r3, [r7, #15]

	return status;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000124 	.word	0x20000124

08000a70 <W25Q64_SPI_Receive_Data>:

HAL_StatusTypeDef W25Q64_SPI_Receive_Data(uint8_t *data, uint16_t size)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;

	status = HAL_SPI_Receive(&hspi2, data, size, 1000);
 8000a7c:	887a      	ldrh	r2, [r7, #2]
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <W25Q64_SPI_Receive_Data+0x28>)
 8000a86:	f00c fd92 	bl	800d5ae <HAL_SPI_Receive>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	73fb      	strb	r3, [r7, #15]

	return status;
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000124 	.word	0x20000124

08000a9c <W25Q64_Set_ChipSelect_Low>:

void W25Q64_Set_ChipSelect_Low(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Chip_Select_GPIO_Port, Chip_Select_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <W25Q64_Set_ChipSelect_Low+0x14>)
 8000aa6:	f003 fdb1 	bl	800460c <HAL_GPIO_WritePin>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	48000400 	.word	0x48000400

08000ab4 <W25Q64_Set_ChipSelect_High>:

void W25Q64_Set_ChipSelect_High(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Chip_Select_GPIO_Port, Chip_Select_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2101      	movs	r1, #1
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <W25Q64_Set_ChipSelect_High+0x14>)
 8000abe:	f003 fda5 	bl	800460c <HAL_GPIO_WritePin>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	48000400 	.word	0x48000400

08000acc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <MX_GPIO_Init+0xe8>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a33      	ldr	r2, [pc, #204]	; (8000bb4 <MX_GPIO_Init+0xe8>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <MX_GPIO_Init+0xe8>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <MX_GPIO_Init+0xe8>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a2d      	ldr	r2, [pc, #180]	; (8000bb4 <MX_GPIO_Init+0xe8>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <MX_GPIO_Init+0xe8>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <MX_GPIO_Init+0xe8>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a27      	ldr	r2, [pc, #156]	; (8000bb4 <MX_GPIO_Init+0xe8>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <MX_GPIO_Init+0xe8>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_GPIO_Init+0xe8>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <MX_GPIO_Init+0xe8>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_GPIO_Init+0xe8>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2120      	movs	r1, #32
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f003 fd5f 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Chip_Select_GPIO_Port, Chip_Select_Pin, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2101      	movs	r1, #1
 8000b52:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <MX_GPIO_Init+0xec>)
 8000b54:	f003 fd5a 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <MX_GPIO_Init+0xf0>)
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4814      	ldr	r0, [pc, #80]	; (8000bc0 <MX_GPIO_Init+0xf4>)
 8000b6e:	f003 fa97 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b72:	2320      	movs	r3, #32
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f003 fa88 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Chip_Select_Pin;
 8000b90:	2301      	movs	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Chip_Select_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_GPIO_Init+0xec>)
 8000ba8:	f003 fa7a 	bl	80040a0 <HAL_GPIO_Init>

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	48000400 	.word	0x48000400
 8000bbc:	10210000 	.word	0x10210000
 8000bc0:	48000800 	.word	0x48000800

08000bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bcc:	f000 fc8e 	bl	80014ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f000 f827 	bl	8000c22 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f7ff ff7a 	bl	8000acc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bd8:	f000 fbd0 	bl	800137c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000bdc:	f000 f89c 	bl	8000d18 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buf[256];
  uint8_t buf1[256];

  for(int i=0; i< 256; i++)
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000be6:	e00d      	b.n	8000c04 <main+0x40>
  {
	  buf1[i] = i;
 8000be8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000bec:	b2d9      	uxtb	r1, r3
 8000bee:	1d3a      	adds	r2, r7, #4
 8000bf0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000bf4:	4413      	add	r3, r2
 8000bf6:	460a      	mov	r2, r1
 8000bf8:	701a      	strb	r2, [r3, #0]
  for(int i=0; i< 256; i++)
 8000bfa:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000bfe:	3301      	adds	r3, #1
 8000c00:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000c04:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000c08:	2bff      	cmp	r3, #255	; 0xff
 8000c0a:	dded      	ble.n	8000be8 <main+0x24>
  }

  W25Q64_Init();
 8000c0c:	f7ff fd6b 	bl	80006e6 <W25Q64_Init>
  //W25Q64_ReadDataBytes(0x1000, buf, 10);
  //W25Q64_SectorErase(1);
  //W25Q64_ReadDataBytes(0x1001, buf, 256);
  //W25Q64_PageProgram(0x1000, buf1, 256);
  W25Q64_ReadDataBytes(0x0000, buf, 256);
 8000c10:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c18:	4619      	mov	r1, r3
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff fe12 	bl	8000844 <W25Q64_ReadDataBytes>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <main+0x5c>

08000c22 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b0b8      	sub	sp, #224	; 0xe0
 8000c26:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c2c:	2244      	movs	r2, #68	; 0x44
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f012 f919 	bl	8012e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c36:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2288      	movs	r2, #136	; 0x88
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f012 f90b 	bl	8012e68 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c52:	2302      	movs	r3, #2
 8000c54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c60:	2310      	movs	r3, #16
 8000c62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c66:	2302      	movs	r3, #2
 8000c68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c78:	230a      	movs	r3, #10
 8000c7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c94:	4618      	mov	r0, r3
 8000c96:	f009 fc4f 	bl	800a538 <HAL_RCC_OscConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ca0:	f000 f834 	bl	8000d0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000caa:	2303      	movs	r3, #3
 8000cac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cc2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f00a f81b 	bl	800ad04 <HAL_RCC_ClockConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000cd4:	f000 f81a 	bl	8000d0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f00a fb6c 	bl	800b3c0 <HAL_RCCEx_PeriphCLKConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000cee:	f000 f80d 	bl	8000d0c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cf2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cf6:	f008 fd13 	bl	8009720 <HAL_PWREx_ControlVoltageScaling>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000d00:	f000 f804 	bl	8000d0c <Error_Handler>
  }
}
 8000d04:	bf00      	nop
 8000d06:	37e0      	adds	r7, #224	; 0xe0
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <MX_SPI2_Init+0x74>)
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <MX_SPI2_Init+0x78>)
 8000d20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_SPI2_Init+0x74>)
 8000d24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_SPI2_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <MX_SPI2_Init+0x74>)
 8000d32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d36:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_SPI2_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_SPI2_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_SPI2_Init+0x74>)
 8000d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d4a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_SPI2_Init+0x74>)
 8000d4e:	2210      	movs	r2, #16
 8000d50:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_SPI2_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_SPI2_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <MX_SPI2_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_SPI2_Init+0x74>)
 8000d66:	2207      	movs	r2, #7
 8000d68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <MX_SPI2_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_SPI2_Init+0x74>)
 8000d72:	2208      	movs	r2, #8
 8000d74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_SPI2_Init+0x74>)
 8000d78:	f00c f9cc 	bl	800d114 <HAL_SPI_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d82:	f7ff ffc3 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000124 	.word	0x20000124
 8000d90:	40003800 	.word	0x40003800

08000d94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a25      	ldr	r2, [pc, #148]	; (8000e48 <HAL_SPI_MspInit+0xb4>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d144      	bne.n	8000e40 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc2:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	; (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_SPI_MspInit+0xb8>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dfe:	230c      	movs	r3, #12
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e0e:	2305      	movs	r3, #5
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <HAL_SPI_MspInit+0xbc>)
 8000e1a:	f003 f941 	bl	80040a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e30:	2305      	movs	r3, #5
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4806      	ldr	r0, [pc, #24]	; (8000e54 <HAL_SPI_MspInit+0xc0>)
 8000e3c:	f003 f930 	bl	80040a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40003800 	.word	0x40003800
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	48000800 	.word	0x48000800
 8000e54:	48000400 	.word	0x48000400

08000e58 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_SPI_MspDeInit+0x38>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10e      	bne.n	8000e88 <HAL_SPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_SPI_MspDeInit+0x3c>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	4a09      	ldr	r2, [pc, #36]	; (8000e94 <HAL_SPI_MspDeInit+0x3c>)
 8000e70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e74:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 8000e76:	210c      	movs	r1, #12
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <HAL_SPI_MspDeInit+0x40>)
 8000e7a:	f003 fabb 	bl	80043f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e82:	4806      	ldr	r0, [pc, #24]	; (8000e9c <HAL_SPI_MspDeInit+0x44>)
 8000e84:	f003 fab6 	bl	80043f4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40003800 	.word	0x40003800
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000800 	.word	0x48000800
 8000e9c:	48000400 	.word	0x48000400

08000ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_MspInit+0x44>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_MspInit+0x44>)
 8000eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 fb78 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <_getpid>:

int _getpid(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
	return 1;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_kill>:

int _kill(int pid, int sig)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f64:	f011 ff42 	bl	8012dec <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2216      	movs	r2, #22
 8000f6c:	601a      	str	r2, [r3, #0]
	return -1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_exit>:

void _exit (int status)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f82:	f04f 31ff 	mov.w	r1, #4294967295
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffe7 	bl	8000f5a <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f8c:	e7fe      	b.n	8000f8c <_exit+0x12>

08000f8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	e00a      	b.n	8000fb6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fa0:	f3af 8000 	nop.w
 8000fa4:	4601      	mov	r1, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	60ba      	str	r2, [r7, #8]
 8000fac:	b2ca      	uxtb	r2, r1
 8000fae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	dbf0      	blt.n	8000fa0 <_read+0x12>
	}

return len;
 8000fbe:	687b      	ldr	r3, [r7, #4]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	e009      	b.n	8000fee <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	60ba      	str	r2, [r7, #8]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	dbf1      	blt.n	8000fda <_write+0x12>
	}
	return len;
 8000ff6:	687b      	ldr	r3, [r7, #4]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <_close>:

int _close(int file)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	return -1;
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001028:	605a      	str	r2, [r3, #4]
	return 0;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_isatty>:

int _isatty(int file)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	return 1;
 8001040:	2301      	movs	r3, #1
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800104e:	b480      	push	{r7}
 8001050:	b085      	sub	sp, #20
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
	return 0;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <_open>:

int _open(char *path, int flags, ...)
{
 8001068:	b40e      	push	{r1, r2, r3}
 800106a:	b480      	push	{r7}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	b003      	add	sp, #12
 8001082:	4770      	bx	lr

08001084 <_wait>:

int _wait(int *status)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 800108c:	f011 feae 	bl	8012dec <__errno>
 8001090:	4603      	mov	r3, r0
 8001092:	220a      	movs	r2, #10
 8001094:	601a      	str	r2, [r3, #0]
	return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_unlink>:

int _unlink(char *name)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 80010aa:	f011 fe9f 	bl	8012dec <__errno>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2202      	movs	r2, #2
 80010b2:	601a      	str	r2, [r3, #0]
	return -1;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <_times>:

int _times(struct tms *buf)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	return -1;
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_stat>:

int _stat(char *file, struct stat *st)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e8:	605a      	str	r2, [r3, #4]
	return 0;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_link>:

int _link(char *old, char *new)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 8001102:	f011 fe73 	bl	8012dec <__errno>
 8001106:	4603      	mov	r3, r0
 8001108:	221f      	movs	r2, #31
 800110a:	601a      	str	r2, [r3, #0]
	return -1;
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_fork>:

int _fork(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	errno = EAGAIN;
 800111c:	f011 fe66 	bl	8012dec <__errno>
 8001120:	4603      	mov	r3, r0
 8001122:	220b      	movs	r2, #11
 8001124:	601a      	str	r2, [r3, #0]
	return -1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800112a:	4618      	mov	r0, r3
 800112c:	bd80      	pop	{r7, pc}

0800112e <_execve>:

int _execve(char *name, char **argv, char **env)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	60f8      	str	r0, [r7, #12]
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
 800113a:	f011 fe57 	bl	8012dec <__errno>
 800113e:	4603      	mov	r3, r0
 8001140:	220c      	movs	r2, #12
 8001142:	601a      	str	r2, [r3, #0]
	return -1;
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <_sbrk+0x5c>)
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <_sbrk+0x60>)
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <_sbrk+0x64>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <_sbrk+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001180:	f011 fe34 	bl	8012dec <__errno>
 8001184:	4603      	mov	r3, r0
 8001186:	220c      	movs	r2, #12
 8001188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e009      	b.n	80011a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x64>)
 80011a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20018000 	.word	0x20018000
 80011b0:	00000400 	.word	0x00000400
 80011b4:	20000120 	.word	0x20000120
 80011b8:	20000210 	.word	0x20000210

080011bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <SystemInit+0x5c>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c6:	4a14      	ldr	r2, [pc, #80]	; (8001218 <SystemInit+0x5c>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <SystemInit+0x60>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a11      	ldr	r2, [pc, #68]	; (800121c <SystemInit+0x60>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <SystemInit+0x60>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <SystemInit+0x60>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a0d      	ldr	r2, [pc, #52]	; (800121c <SystemInit+0x60>)
 80011e8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011ec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <SystemInit+0x60>)
 80011f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <SystemInit+0x60>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <SystemInit+0x60>)
 8001200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001204:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <SystemInit+0x60>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00
 800121c:	40021000 	.word	0x40021000

08001220 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001226:	4b4f      	ldr	r3, [pc, #316]	; (8001364 <SystemCoreClockUpdate+0x144>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	2b00      	cmp	r3, #0
 8001230:	d107      	bne.n	8001242 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001232:	4b4c      	ldr	r3, [pc, #304]	; (8001364 <SystemCoreClockUpdate+0x144>)
 8001234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	e005      	b.n	800124e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001242:	4b48      	ldr	r3, [pc, #288]	; (8001364 <SystemCoreClockUpdate+0x144>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800124e:	4a46      	ldr	r2, [pc, #280]	; (8001368 <SystemCoreClockUpdate+0x148>)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001258:	4b42      	ldr	r3, [pc, #264]	; (8001364 <SystemCoreClockUpdate+0x144>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 030c 	and.w	r3, r3, #12
 8001260:	2b0c      	cmp	r3, #12
 8001262:	d866      	bhi.n	8001332 <SystemCoreClockUpdate+0x112>
 8001264:	a201      	add	r2, pc, #4	; (adr r2, 800126c <SystemCoreClockUpdate+0x4c>)
 8001266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126a:	bf00      	nop
 800126c:	080012a1 	.word	0x080012a1
 8001270:	08001333 	.word	0x08001333
 8001274:	08001333 	.word	0x08001333
 8001278:	08001333 	.word	0x08001333
 800127c:	080012a9 	.word	0x080012a9
 8001280:	08001333 	.word	0x08001333
 8001284:	08001333 	.word	0x08001333
 8001288:	08001333 	.word	0x08001333
 800128c:	080012b1 	.word	0x080012b1
 8001290:	08001333 	.word	0x08001333
 8001294:	08001333 	.word	0x08001333
 8001298:	08001333 	.word	0x08001333
 800129c:	080012b9 	.word	0x080012b9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80012a0:	4a32      	ldr	r2, [pc, #200]	; (800136c <SystemCoreClockUpdate+0x14c>)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	6013      	str	r3, [r2, #0]
      break;
 80012a6:	e048      	b.n	800133a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80012a8:	4b30      	ldr	r3, [pc, #192]	; (800136c <SystemCoreClockUpdate+0x14c>)
 80012aa:	4a31      	ldr	r2, [pc, #196]	; (8001370 <SystemCoreClockUpdate+0x150>)
 80012ac:	601a      	str	r2, [r3, #0]
      break;
 80012ae:	e044      	b.n	800133a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80012b0:	4b2e      	ldr	r3, [pc, #184]	; (800136c <SystemCoreClockUpdate+0x14c>)
 80012b2:	4a30      	ldr	r2, [pc, #192]	; (8001374 <SystemCoreClockUpdate+0x154>)
 80012b4:	601a      	str	r2, [r3, #0]
      break;
 80012b6:	e040      	b.n	800133a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80012b8:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <SystemCoreClockUpdate+0x144>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80012c2:	4b28      	ldr	r3, [pc, #160]	; (8001364 <SystemCoreClockUpdate+0x144>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	3301      	adds	r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d003      	beq.n	80012de <SystemCoreClockUpdate+0xbe>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d006      	beq.n	80012ea <SystemCoreClockUpdate+0xca>
 80012dc:	e00b      	b.n	80012f6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80012de:	4a24      	ldr	r2, [pc, #144]	; (8001370 <SystemCoreClockUpdate+0x150>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	613b      	str	r3, [r7, #16]
          break;
 80012e8:	e00b      	b.n	8001302 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80012ea:	4a22      	ldr	r2, [pc, #136]	; (8001374 <SystemCoreClockUpdate+0x154>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	613b      	str	r3, [r7, #16]
          break;
 80012f4:	e005      	b.n	8001302 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	613b      	str	r3, [r7, #16]
          break;
 8001300:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <SystemCoreClockUpdate+0x144>)
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <SystemCoreClockUpdate+0x144>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0e5b      	lsrs	r3, r3, #25
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	3301      	adds	r3, #1
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	fbb2 f3f3 	udiv	r3, r2, r3
 800132c:	4a0f      	ldr	r2, [pc, #60]	; (800136c <SystemCoreClockUpdate+0x14c>)
 800132e:	6013      	str	r3, [r2, #0]
      break;
 8001330:	e003      	b.n	800133a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <SystemCoreClockUpdate+0x14c>)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	6013      	str	r3, [r2, #0]
      break;
 8001338:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <SystemCoreClockUpdate+0x144>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	091b      	lsrs	r3, r3, #4
 8001340:	f003 030f 	and.w	r3, r3, #15
 8001344:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <SystemCoreClockUpdate+0x158>)
 8001346:	5cd3      	ldrb	r3, [r2, r3]
 8001348:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <SystemCoreClockUpdate+0x14c>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	fa22 f303 	lsr.w	r3, r2, r3
 8001354:	4a05      	ldr	r2, [pc, #20]	; (800136c <SystemCoreClockUpdate+0x14c>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	371c      	adds	r7, #28
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	40021000 	.word	0x40021000
 8001368:	08012f78 	.word	0x08012f78
 800136c:	20000008 	.word	0x20000008
 8001370:	00f42400 	.word	0x00f42400
 8001374:	007a1200 	.word	0x007a1200
 8001378:	08012f60 	.word	0x08012f60

0800137c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 8001382:	4a15      	ldr	r2, [pc, #84]	; (80013d8 <MX_USART2_UART_Init+0x5c>)
 8001384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013c0:	f00e fd2c 	bl	800fe1c <HAL_UART_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013ca:	f7ff fc9f 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000188 	.word	0x20000188
 80013d8:	40004400 	.word	0x40004400

080013dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HAL_UART_MspInit+0x7c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d128      	bne.n	8001450 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_UART_MspInit+0x80>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	4a16      	ldr	r2, [pc, #88]	; (800145c <HAL_UART_MspInit+0x80>)
 8001404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001408:	6593      	str	r3, [r2, #88]	; 0x58
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_UART_MspInit+0x80>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_UART_MspInit+0x80>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <HAL_UART_MspInit+0x80>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_UART_MspInit+0x80>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800142e:	230c      	movs	r3, #12
 8001430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800143e:	2307      	movs	r3, #7
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144c:	f002 fe28 	bl	80040a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	; 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40004400 	.word	0x40004400
 800145c:	40021000 	.word	0x40021000

08001460 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_UART_MspDeInit+0x30>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10a      	bne.n	8001488 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_UART_MspDeInit+0x34>)
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001476:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_UART_MspDeInit+0x34>)
 8001478:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800147c:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 800147e:	210c      	movs	r1, #12
 8001480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001484:	f002 ffb6 	bl	80043f4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40004400 	.word	0x40004400
 8001494:	40021000 	.word	0x40021000

08001498 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800149c:	f7ff fe8e 	bl	80011bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014a2:	e003      	b.n	80014ac <LoopCopyDataInit>

080014a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014aa:	3104      	adds	r1, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014ac:	480a      	ldr	r0, [pc, #40]	; (80014d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80014b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014b4:	d3f6      	bcc.n	80014a4 <CopyDataInit>
	ldr	r2, =_sbss
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014b8:	e002      	b.n	80014c0 <LoopFillZerobss>

080014ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014bc:	f842 3b04 	str.w	r3, [r2], #4

080014c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <LoopForever+0x16>)
	cmp	r2, r3
 80014c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014c4:	d3f9      	bcc.n	80014ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c6:	f011 fcab 	bl	8012e20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ca:	f7ff fb7b 	bl	8000bc4 <main>

080014ce <LoopForever>:

LoopForever:
    b LoopForever
 80014ce:	e7fe      	b.n	80014ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014d0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80014d4:	08012fbc 	.word	0x08012fbc
	ldr	r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014dc:	20000100 	.word	0x20000100
	ldr	r2, =_sbss
 80014e0:	20000100 	.word	0x20000100
	ldr	r3, = _ebss
 80014e4:	20000210 	.word	0x20000210

080014e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC1_2_IRQHandler>
	...

080014ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_Init+0x3c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <HAL_Init+0x3c>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001502:	2003      	movs	r0, #3
 8001504:	f000 fc82 	bl	8001e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001508:	2000      	movs	r0, #0
 800150a:	f000 f851 	bl	80015b0 <HAL_InitTick>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	e001      	b.n	800151e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800151a:	f7ff fcc1 	bl	8000ea0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800151e:	79fb      	ldrb	r3, [r7, #7]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40022000 	.word	0x40022000

0800152c <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_DeInit+0x64>)
 8001532:	f04f 32ff 	mov.w	r2, #4294967295
 8001536:	639a      	str	r2, [r3, #56]	; 0x38
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_DeInit+0x64>)
 800153a:	f04f 32ff 	mov.w	r2, #4294967295
 800153e:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_RCC_APB1_RELEASE_RESET();
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <HAL_DeInit+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	639a      	str	r2, [r3, #56]	; 0x38
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_DeInit+0x64>)
 8001548:	2200      	movs	r2, #0
 800154a:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_RCC_APB2_FORCE_RESET();
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_DeInit+0x64>)
 800154e:	f04f 32ff 	mov.w	r2, #4294967295
 8001552:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_DeInit+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_DeInit+0x64>)
 800155c:	f04f 32ff 	mov.w	r2, #4294967295
 8001560:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_DeInit+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_DeInit+0x64>)
 800156a:	f04f 32ff 	mov.w	r2, #4294967295
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <HAL_DeInit+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_DeInit+0x64>)
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <HAL_DeInit+0x64>)
 8001580:	2200      	movs	r2, #0
 8001582:	631a      	str	r2, [r3, #48]	; 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001584:	f000 f80d 	bl	80015a2 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_InitTick+0x6c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d023      	beq.n	800160c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_InitTick+0x70>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_InitTick+0x6c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 fc5d 	bl	8001e9a <HAL_SYSTICK_Config>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10f      	bne.n	8001606 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d809      	bhi.n	8001600 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f000 fc15 	bl	8001e22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f8:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <HAL_InitTick+0x74>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e007      	b.n	8001610 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e004      	b.n	8001610 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e001      	b.n	8001610 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000010 	.word	0x20000010
 8001620:	20000008 	.word	0x20000008
 8001624:	2000000c 	.word	0x2000000c

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000010 	.word	0x20000010
 800164c:	2000020c 	.word	0x2000020c

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	2000020c 	.word	0x2000020c

08001668 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetTickPrio+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	2000000c 	.word	0x2000000c

08001680 <HAL_SetTickFreq>:
  * @brief Set new tick Freq.
  * @param Freq tick frequency
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  if (uwTickFreq != Freq)
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_SetTickFreq+0x48>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	79fa      	ldrb	r2, [r7, #7]
 8001694:	429a      	cmp	r2, r3
 8001696:	d012      	beq.n	80016be <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_SetTickFreq+0x48>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <HAL_SetTickFreq+0x48>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_SetTickFreq+0x4c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff81 	bl	80015b0 <HAL_InitTick>
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 80016b8:	4a03      	ldr	r2, [pc, #12]	; (80016c8 <HAL_SetTickFreq+0x48>)
 80016ba:	7bbb      	ldrb	r3, [r7, #14]
 80016bc:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000010 	.word	0x20000010
 80016cc:	2000000c 	.word	0x2000000c

080016d0 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_GetTickFreq+0x14>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000010 	.word	0x20000010

080016e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff ffae 	bl	8001650 <HAL_GetTick>
 80016f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d005      	beq.n	800170e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_Delay+0x44>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800170e:	bf00      	nop
 8001710:	f7ff ff9e 	bl	8001650 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	d8f7      	bhi.n	8001710 <HAL_Delay+0x28>
  {
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000010 	.word	0x20000010

08001730 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_SuspendTick+0x1c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_SuspendTick+0x1c>)
 800173a:	f023 0302 	bic.w	r3, r3, #2
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e010 	.word	0xe000e010

08001750 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_ResumeTick+0x1c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_ResumeTick+0x1c>)
 800175a:	f043 0302 	orr.w	r3, r3, #2
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e010 	.word	0xe000e010

08001770 <HAL_GetHalVersion>:
/**
  * @brief  Return the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return STM32L4XX_HAL_VERSION;
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <HAL_GetHalVersion+0x10>)
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	010d0000 	.word	0x010d0000

08001784 <HAL_GetREVID>:
/**
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <HAL_GetREVID+0x18>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0c1b      	lsrs	r3, r3, #16
 800178e:	b29b      	uxth	r3, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e0042000 	.word	0xe0042000

080017a0 <HAL_GetDEVID>:
/**
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <HAL_GetDEVID+0x18>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e0042000 	.word	0xe0042000

080017bc <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetUIDw0+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	1fff7590 	.word	0x1fff7590

080017d4 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <HAL_GetUIDw1+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	1fff7594 	.word	0x1fff7594

080017ec <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_GetUIDw2+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	1fff7598 	.word	0x1fff7598

08001804 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6053      	str	r3, [r2, #4]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e0042000 	.word	0xe0042000

08001824 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	6053      	str	r3, [r2, #4]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e0042000 	.word	0xe0042000

08001844 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 800184e:	f043 0302 	orr.w	r3, r3, #2
 8001852:	6053      	str	r3, [r2, #4]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e0042000 	.word	0xe0042000

08001864 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 800186e:	f023 0302 	bic.w	r3, r3, #2
 8001872:	6053      	str	r3, [r2, #4]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e0042000 	.word	0xe0042000

08001884 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6053      	str	r3, [r2, #4]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e0042000 	.word	0xe0042000

080018a4 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 80018ae:	f023 0304 	bic.w	r3, r3, #4
 80018b2:	6053      	str	r3, [r2, #4]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e0042000 	.word	0xe0042000

080018c4 <HAL_SYSCFG_SRAM2Erase>:
  * @note   As long as SRAM2 is not erased the SRAM2ER bit will be set.
  *         This bit is automatically reset at the end of the SRAM2 erase operation.
  * @retval None
  */
void HAL_SYSCFG_SRAM2Erase(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* unlock the write protection of the SRAM2ER bit */
  SYSCFG->SKR = 0xCA;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_SYSCFG_SRAM2Erase+0x20>)
 80018ca:	22ca      	movs	r2, #202	; 0xca
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24
  SYSCFG->SKR = 0x53;
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_SYSCFG_SRAM2Erase+0x20>)
 80018d0:	2253      	movs	r2, #83	; 0x53
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Starts a hardware SRAM2 erase operation*/
  *(__IO uint32_t *) SCSR_SRAM2ER_BB = 0x00000001UL;
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_SYSCFG_SRAM2Erase+0x24>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40010000 	.word	0x40010000
 80018e8:	42200300 	.word	0x42200300

080018ec <HAL_SYSCFG_EnableMemorySwappingBank>:
  *         and Flash Bank1 mapped at 0x08100000 (and aliased at 0x00100000)
  *
  * @retval None
  */
void HAL_SYSCFG_EnableMemorySwappingBank(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)FB_MODE_BB = 0x00000001UL;
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_SYSCFG_EnableMemorySwappingBank+0x14>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	601a      	str	r2, [r3, #0]
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	42200020 	.word	0x42200020

08001904 <HAL_SYSCFG_DisableMemorySwappingBank>:
  *         and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)
  *
  * @retval None
  */
void HAL_SYSCFG_DisableMemorySwappingBank(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  *(__IO uint32_t *)FB_MODE_BB = 0x00000000UL;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_SYSCFG_DisableMemorySwappingBank+0x14>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	42200020 	.word	0x42200020

0800191c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE1: VREF_OUT2 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 0204 	bic.w	r2, r3, #4
 800192c:	4904      	ldr	r1, [pc, #16]	; (8001940 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4313      	orrs	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40010030 	.word	0x40010030

08001944 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 0202 	bic.w	r2, r3, #2
 8001954:	4904      	ldr	r1, [pc, #16]	; (8001968 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	40010030 	.word	0x40010030

0800196c <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
/**
  * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800197c:	4904      	ldr	r1, [pc, #16]	; (8001990 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	40010030 	.word	0x40010030

08001994 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80019a6:	f7ff fe53 	bl	8001650 <HAL_GetTick>
 80019aa:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80019ae:	f7ff fe4f 	bl	8001650 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b0a      	cmp	r3, #10
 80019ba:	d901      	bls.n	80019c0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e006      	b.n	80019ce <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40010030 	.word	0x40010030

080019dc <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80019e6:	f023 0301 	bic.w	r3, r3, #1
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40010030 	.word	0x40010030

080019fc <HAL_SYSCFG_EnableIOAnalogSwitchBooster>:
  * @brief  Enable the I/O analog switch voltage booster
  *
  * @retval None
  */
void HAL_SYSCFG_EnableIOAnalogSwitchBooster(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOSTEN);
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_SYSCFG_EnableIOAnalogSwitchBooster+0x1c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_SYSCFG_EnableIOAnalogSwitchBooster+0x1c>)
 8001a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0a:	6053      	str	r3, [r2, #4]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40010000 	.word	0x40010000

08001a1c <HAL_SYSCFG_DisableIOAnalogSwitchBooster>:
  * @brief  Disable the I/O analog switch voltage booster
  *
  * @retval None
  */
void HAL_SYSCFG_DisableIOAnalogSwitchBooster(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOSTEN);
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_SYSCFG_DisableIOAnalogSwitchBooster+0x1c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_SYSCFG_DisableIOAnalogSwitchBooster+0x1c>)
 8001a26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a2a:	6053      	str	r3, [r2, #4]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40010000 	.word	0x40010000

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4907      	ldr	r1, [pc, #28]	; (8001ad8 <__NVIC_EnableIRQ+0x38>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db12      	blt.n	8001b14 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	490a      	ldr	r1, [pc, #40]	; (8001b20 <__NVIC_DisableIRQ+0x44>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	2001      	movs	r0, #1
 8001afe:	fa00 f202 	lsl.w	r2, r0, r2
 8001b02:	3320      	adds	r3, #32
 8001b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b08:	f3bf 8f4f 	dsb	sy
}
 8001b0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b0e:	f3bf 8f6f 	isb	sy
}
 8001b12:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000e100 	.word	0xe000e100

08001b24 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0e      	blt.n	8001b54 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <__NVIC_GetPendingIRQ+0x40>)
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	095b      	lsrs	r3, r3, #5
 8001b3e:	3340      	adds	r3, #64	; 0x40
 8001b40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	e000      	b.n	8001b56 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8001b54:	2300      	movs	r3, #0
  }
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0c      	blt.n	8001b94 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <__NVIC_SetPendingIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	3340      	adds	r3, #64	; 0x40
 8001b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0c      	blt.n	8001bd0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4907      	ldr	r1, [pc, #28]	; (8001bdc <__NVIC_ClearPendingIRQ+0x38>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	3360      	adds	r3, #96	; 0x60
 8001bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0e      	blt.n	8001c10 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <__NVIC_GetActive+0x40>)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	3380      	adds	r3, #128	; 0x80
 8001bfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	e000      	b.n	8001c12 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8001c10:	2300      	movs	r3, #0
  }
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	db09      	blt.n	8001c9e <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8001c8a:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <__NVIC_GetPriority+0x48>)
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	4413      	add	r3, r2
 8001c92:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	e009      	b.n	8001cb2 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8001c9e:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <__NVIC_GetPriority+0x4c>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	4413      	add	r3, r2
 8001caa:	7e1b      	ldrb	r3, [r3, #24]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	b2db      	uxtb	r3, r3
  }
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1c3 0307 	rsb	r3, r3, #7
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf28      	it	cs
 8001ce6:	2304      	movcs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d902      	bls.n	8001cf8 <NVIC_EncodePriority+0x30>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b03      	subs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <NVIC_EncodePriority+0x32>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43d9      	mvns	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	4313      	orrs	r3, r2
         );
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b089      	sub	sp, #36	; 0x24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_DecodePriority+0x32>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_DecodePriority+0x34>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	40da      	lsrs	r2, r3
 8001d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	401a      	ands	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	601a      	str	r2, [r3, #0]
}
 8001d90:	bf00      	nop
 8001d92:	3724      	adds	r7, #36	; 0x24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001da0:	f3bf 8f4f 	dsb	sy
}
 8001da4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <__NVIC_SystemReset+0x24>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001dae:	4904      	ldr	r1, [pc, #16]	; (8001dc0 <__NVIC_SystemReset+0x24>)
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__NVIC_SystemReset+0x28>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001db6:	f3bf 8f4f 	dsb	sy
}
 8001dba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <__NVIC_SystemReset+0x20>
 8001dc0:	e000ed00 	.word	0xe000ed00
 8001dc4:	05fa0004 	.word	0x05fa0004

08001dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd8:	d301      	bcc.n	8001dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00f      	b.n	8001dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <SysTick_Config+0x40>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de6:	210f      	movs	r1, #15
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f7ff ff1a 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <SysTick_Config+0x40>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <SysTick_Config+0x40>)
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff fe11 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e34:	f7ff fe26 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001e38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	6978      	ldr	r0, [r7, #20]
 8001e40:	f7ff ff42 	bl	8001cc8 <NVIC_EncodePriority>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fee9 	bl	8001c24 <__NVIC_SetPriority>
}
 8001e52:	bf00      	nop
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fe19 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fe29 	bl	8001adc <__NVIC_DisableIRQ>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001e96:	f7ff ff81 	bl	8001d9c <__NVIC_SystemReset>

08001e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ff90 	bl	8001dc8 <SysTick_Config>
 8001ea8:	4603      	mov	r3, r0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Get the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8001eb6:	f7ff fde5 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001eba:	4603      	mov	r3, r0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	4603      	mov	r3, r0
 8001ece:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8001ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fecf 	bl	8001c78 <__NVIC_GetPriority>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	f7ff ff25 	bl	8001d2e <NVIC_DecodePriority>
}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fe34 	bl	8001b68 <__NVIC_SetPendingIRQ>
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fe04 	bl	8001b24 <__NVIC_GetPendingIRQ>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fe35 	bl	8001ba4 <__NVIC_ClearPendingIRQ>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	71fb      	strb	r3, [r7, #7]
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fe45 	bl	8001be0 <__NVIC_GetActive>
 8001f56:	4603      	mov	r3, r0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d106      	bne.n	8001f7c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001f7a:	e005      	b.n	8001f88 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f82:	f023 0304 	bic.w	r3, r3, #4
 8001f86:	6013      	str	r3, [r2, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f9c:	f000 f802 	bl	8001fa4 <HAL_SYSTICK_Callback>
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
 8001fbc:	4a08      	ldr	r2, [pc, #32]	; (8001fe0 <HAL_MPU_Enable+0x2c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fc6:	f3bf 8f4f 	dsb	sy
}
 8001fca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fcc:	f3bf 8f6f 	isb	sy
}
 8001fd0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000ed90 	.word	0xe000ed90

08001fe4 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001fe8:	f3bf 8f5f 	dmb	sy
}
 8001fec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable the MPU and clear the control register*/
  MPU->CTRL  = 0;
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <HAL_MPU_Disable+0x1c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000ed90 	.word	0xe000ed90

08002004 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	785a      	ldrb	r2, [r3, #1]
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_MPU_ConfigRegion+0x84>)
 8002012:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d029      	beq.n	8002070 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800201c:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <HAL_MPU_ConfigRegion+0x84>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	7b1b      	ldrb	r3, [r3, #12]
 8002028:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7adb      	ldrb	r3, [r3, #11]
 800202e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8002030:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField       << MPU_RASR_TEX_Pos)  |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7a9b      	ldrb	r3, [r3, #10]
 8002036:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 8002038:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable        << MPU_RASR_S_Pos)    |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7b5b      	ldrb	r3, [r3, #13]
 800203e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField       << MPU_RASR_TEX_Pos)  |
 8002040:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	7b9b      	ldrb	r3, [r3, #14]
 8002046:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable        << MPU_RASR_S_Pos)    |
 8002048:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7bdb      	ldrb	r3, [r3, #15]
 800204e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 8002050:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	7a5b      	ldrb	r3, [r3, #9]
 8002056:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 8002058:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	7a1b      	ldrb	r3, [r3, #8]
 800205e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
 8002060:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable             << MPU_RASR_ENABLE_Pos);
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	7812      	ldrb	r2, [r2, #0]
 8002066:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8002068:	4a07      	ldr	r2, [pc, #28]	; (8002088 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 800206a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 800206c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800206e:	e005      	b.n	800207c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_MPU_ConfigRegion+0x84>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <HAL_MPU_ConfigRegion+0x84>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed90 	.word	0xe000ed90

0800208c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e098      	b.n	80021d0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b4d      	ldr	r3, [pc, #308]	; (80021dc <HAL_DMA_Init+0x150>)
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d80f      	bhi.n	80020ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b4b      	ldr	r3, [pc, #300]	; (80021e0 <HAL_DMA_Init+0x154>)
 80020b2:	4413      	add	r3, r2
 80020b4:	4a4b      	ldr	r2, [pc, #300]	; (80021e4 <HAL_DMA_Init+0x158>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	009a      	lsls	r2, r3, #2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a48      	ldr	r2, [pc, #288]	; (80021e8 <HAL_DMA_Init+0x15c>)
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
 80020c8:	e00e      	b.n	80020e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b46      	ldr	r3, [pc, #280]	; (80021ec <HAL_DMA_Init+0x160>)
 80020d2:	4413      	add	r3, r2
 80020d4:	4a43      	ldr	r2, [pc, #268]	; (80021e4 <HAL_DMA_Init+0x158>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	009a      	lsls	r2, r3, #2
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a42      	ldr	r2, [pc, #264]	; (80021f0 <HAL_DMA_Init+0x164>)
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80020fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002102:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800210c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002118:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002124:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002142:	d039      	beq.n	80021b8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <HAL_DMA_Init+0x15c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d11a      	bne.n	8002184 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800214e:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <HAL_DMA_Init+0x168>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f003 031c 	and.w	r3, r3, #28
 800215a:	210f      	movs	r1, #15
 800215c:	fa01 f303 	lsl.w	r3, r1, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	4924      	ldr	r1, [pc, #144]	; (80021f4 <HAL_DMA_Init+0x168>)
 8002164:	4013      	ands	r3, r2
 8002166:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002168:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_DMA_Init+0x168>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6859      	ldr	r1, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	f003 031c 	and.w	r3, r3, #28
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	491d      	ldr	r1, [pc, #116]	; (80021f4 <HAL_DMA_Init+0x168>)
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
 8002182:	e019      	b.n	80021b8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002184:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <HAL_DMA_Init+0x16c>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218c:	f003 031c 	and.w	r3, r3, #28
 8002190:	210f      	movs	r1, #15
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	4917      	ldr	r1, [pc, #92]	; (80021f8 <HAL_DMA_Init+0x16c>)
 800219a:	4013      	ands	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800219e:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <HAL_DMA_Init+0x16c>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6859      	ldr	r1, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f003 031c 	and.w	r3, r3, #28
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	4911      	ldr	r1, [pc, #68]	; (80021f8 <HAL_DMA_Init+0x16c>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40020407 	.word	0x40020407
 80021e0:	bffdfff8 	.word	0xbffdfff8
 80021e4:	cccccccd 	.word	0xcccccccd
 80021e8:	40020000 	.word	0x40020000
 80021ec:	bffdfbf8 	.word	0xbffdfbf8
 80021f0:	40020400 	.word	0x40020400
 80021f4:	400200a8 	.word	0x400200a8
 80021f8:	400204a8 	.word	0x400204a8

080021fc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e072      	b.n	80022f4 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0201 	bic.w	r2, r2, #1
 800221c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_DMA_DeInit+0x104>)
 8002226:	429a      	cmp	r2, r3
 8002228:	d80f      	bhi.n	800224a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	4b34      	ldr	r3, [pc, #208]	; (8002304 <HAL_DMA_DeInit+0x108>)
 8002232:	4413      	add	r3, r2
 8002234:	4a34      	ldr	r2, [pc, #208]	; (8002308 <HAL_DMA_DeInit+0x10c>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	009a      	lsls	r2, r3, #2
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a31      	ldr	r2, [pc, #196]	; (800230c <HAL_DMA_DeInit+0x110>)
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
 8002248:	e00e      	b.n	8002268 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <HAL_DMA_DeInit+0x114>)
 8002252:	4413      	add	r3, r2
 8002254:	4a2c      	ldr	r2, [pc, #176]	; (8002308 <HAL_DMA_DeInit+0x10c>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	009a      	lsls	r2, r3, #2
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a2b      	ldr	r2, [pc, #172]	; (8002314 <HAL_DMA_DeInit+0x118>)
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	f003 021c 	and.w	r2, r3, #28
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	4a20      	ldr	r2, [pc, #128]	; (800230c <HAL_DMA_DeInit+0x110>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10d      	bne.n	80022aa <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800228e:	4b22      	ldr	r3, [pc, #136]	; (8002318 <HAL_DMA_DeInit+0x11c>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f003 031c 	and.w	r3, r3, #28
 800229a:	210f      	movs	r1, #15
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	491d      	ldr	r1, [pc, #116]	; (8002318 <HAL_DMA_DeInit+0x11c>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]
 80022a8:	e00c      	b.n	80022c4 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <HAL_DMA_DeInit+0x120>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f003 031c 	and.w	r3, r3, #28
 80022b6:	210f      	movs	r1, #15
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	4917      	ldr	r1, [pc, #92]	; (800231c <HAL_DMA_DeInit+0x120>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40020407 	.word	0x40020407
 8002304:	bffdfff8 	.word	0xbffdfff8
 8002308:	cccccccd 	.word	0xcccccccd
 800230c:	40020000 	.word	0x40020000
 8002310:	bffdfbf8 	.word	0xbffdfbf8
 8002314:	40020400 	.word	0x40020400
 8002318:	400200a8 	.word	0x400200a8
 800231c:	400204a8 	.word	0x400204a8

08002320 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_DMA_Start+0x20>
 800233c:	2302      	movs	r3, #2
 800233e:	e02e      	b.n	800239e <HAL_DMA_Start+0x7e>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d11d      	bne.n	8002390 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0201 	bic.w	r2, r2, #1
 8002370:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 fb03 	bl	8002984 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	e005      	b.n	800239c <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 8002398:	2302      	movs	r3, #2
 800239a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800239c:	7dfb      	ldrb	r3, [r7, #23]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_DMA_Start_IT+0x20>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e04b      	b.n	800245e <HAL_DMA_Start_IT+0xb8>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d13a      	bne.n	8002450 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 fac0 	bl	8002984 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 020e 	orr.w	r2, r2, #14
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e00f      	b.n	800243e <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0204 	bic.w	r2, r2, #4
 800242c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 020a 	orr.w	r2, r2, #10
 800243c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0201 	orr.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e005      	b.n	800245c <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002458:	2302      	movs	r3, #2
 800245a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800245c:	7dfb      	ldrb	r3, [r7, #23]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d008      	beq.n	8002490 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2204      	movs	r2, #4
 8002482:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e022      	b.n	80024d6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 020e 	bic.w	r2, r2, #14
 800249e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b4:	f003 021c 	and.w	r2, r3, #28
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	2101      	movs	r1, #1
 80024be:	fa01 f202 	lsl.w	r2, r1, r2
 80024c2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d005      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2204      	movs	r2, #4
 80024fe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	e029      	b.n	800255a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 020e 	bic.w	r2, r2, #14
 8002514:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0201 	bic.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f003 021c 	and.w	r2, r3, #28
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2101      	movs	r1, #1
 8002534:	fa01 f202 	lsl.w	r2, r1, r2
 8002538:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4798      	blx	r3
    }
  }
  return status;
 800255a:	7bfb      	ldrb	r3, [r7, #15]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel Specifies the DMA level complete.
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	460b      	mov	r3, r1
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	72fb      	strb	r3, [r7, #11]
  uint32_t temp;
  uint32_t tickstart;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d008      	beq.n	8002590 <HAL_DMA_PollForTransfer+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2204      	movs	r2, #4
 8002582:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e08c      	b.n	80026aa <HAL_DMA_PollForTransfer+0x146>
  }

  /* Polling mode not supported in circular mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a4:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e07f      	b.n	80026aa <HAL_DMA_PollForTransfer+0x146>
  }

  /* Get the level transfer complete flag */
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 80025aa:	7afb      	ldrb	r3, [r7, #11]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d108      	bne.n	80025c2 <HAL_DMA_PollForTransfer+0x5e>
  {
    /* Transfer Complete flag */
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	f003 031c 	and.w	r3, r3, #28
 80025b8:	2202      	movs	r2, #2
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	e007      	b.n	80025d2 <HAL_DMA_PollForTransfer+0x6e>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f003 031c 	and.w	r3, r3, #28
 80025ca:	2204      	movs	r2, #4
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80025d2:	f7ff f83d 	bl	8001650 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

  while((hdma->DmaBaseAddress->ISR & temp) == 0U)
 80025d8:	e03f      	b.n	800265a <HAL_DMA_PollForTransfer+0xf6>
  {
    if((hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1CU))) != 0U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f003 031c 	and.w	r3, r3, #28
 80025e8:	2108      	movs	r1, #8
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d016      	beq.n	8002622 <HAL_DMA_PollForTransfer+0xbe>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	f003 021c 	and.w	r2, r3, #28
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	2101      	movs	r1, #1
 8002602:	fa01 f202 	lsl.w	r2, r1, r2
 8002606:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e043      	b.n	80026aa <HAL_DMA_PollForTransfer+0x146>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d017      	beq.n	800265a <HAL_DMA_PollForTransfer+0xf6>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) ||  (Timeout == 0U))
 800262a:	f7ff f811 	bl	8001650 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <HAL_DMA_PollForTransfer+0xdc>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10c      	bne.n	800265a <HAL_DMA_PollForTransfer+0xf6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e027      	b.n	80026aa <HAL_DMA_PollForTransfer+0x146>
  while((hdma->DmaBaseAddress->ISR & temp) == 0U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0b8      	beq.n	80025da <HAL_DMA_PollForTransfer+0x76>
    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
  }
#endif /* DMAMUX1 */

  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8002668:	7afb      	ldrb	r3, [r7, #11]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d112      	bne.n	8002694 <HAL_DMA_PollForTransfer+0x130>
  {
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_TC1 << (hdma->ChannelIndex& 0x1CU));
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f003 021c 	and.w	r2, r3, #28
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2102      	movs	r1, #2
 800267c:	fa01 f202 	lsl.w	r2, r1, r2
 8002680:	605a      	str	r2, [r3, #4]

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8002692:	e009      	b.n	80026a8 <HAL_DMA_PollForTransfer+0x144>
  }
  else
  {
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU));
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	f003 021c 	and.w	r2, r3, #28
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	2104      	movs	r1, #4
 80026a2:	fa01 f202 	lsl.w	r2, r1, r2
 80026a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f003 031c 	and.w	r3, r3, #28
 80026d2:	2204      	movs	r2, #4
 80026d4:	409a      	lsls	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d026      	beq.n	800272c <HAL_DMA_IRQHandler+0x7a>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d021      	beq.n	800272c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0204 	bic.w	r2, r2, #4
 8002704:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f003 021c 	and.w	r2, r3, #28
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2104      	movs	r1, #4
 8002714:	fa01 f202 	lsl.w	r2, r1, r2
 8002718:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	2b00      	cmp	r3, #0
 8002720:	d071      	beq.n	8002806 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800272a:	e06c      	b.n	8002806 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	f003 031c 	and.w	r3, r3, #28
 8002734:	2202      	movs	r2, #2
 8002736:	409a      	lsls	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d02e      	beq.n	800279e <HAL_DMA_IRQHandler+0xec>
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d029      	beq.n	800279e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10b      	bne.n	8002770 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 020a 	bic.w	r2, r2, #10
 8002766:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	f003 021c 	and.w	r2, r3, #28
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	2102      	movs	r1, #2
 800277e:	fa01 f202 	lsl.w	r2, r1, r2
 8002782:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d038      	beq.n	8002806 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800279c:	e033      	b.n	8002806 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f003 031c 	and.w	r3, r3, #28
 80027a6:	2208      	movs	r2, #8
 80027a8:	409a      	lsls	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d02a      	beq.n	8002808 <HAL_DMA_IRQHandler+0x156>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d025      	beq.n	8002808 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 020e 	bic.w	r2, r2, #14
 80027ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	f003 021c 	and.w	r2, r3, #28
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f202 	lsl.w	r2, r1, r2
 80027de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d004      	beq.n	8002808 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002806:	bf00      	nop
 8002808:	bf00      	nop
}
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	460b      	mov	r3, r1
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_DMA_RegisterCallback+0x20>
 800282c:	2302      	movs	r3, #2
 800282e:	e031      	b.n	8002894 <HAL_DMA_RegisterCallback+0x84>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d120      	bne.n	8002886 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8002844:	7afb      	ldrb	r3, [r7, #11]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d81a      	bhi.n	8002880 <HAL_DMA_RegisterCallback+0x70>
 800284a:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <HAL_DMA_RegisterCallback+0x40>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	08002861 	.word	0x08002861
 8002854:	08002869 	.word	0x08002869
 8002858:	08002871 	.word	0x08002871
 800285c:	08002879 	.word	0x08002879
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8002866:	e010      	b.n	800288a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 800286e:	e00c      	b.n	800288a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8002876:	e008      	b.n	800288a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 800287e:	e004      	b.n	800288a <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	75fb      	strb	r3, [r7, #23]
           break;
 8002884:	e001      	b.n	800288a <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002892:	7dfb      	ldrb	r3, [r7, #23]
}
 8002894:	4618      	mov	r0, r3
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	73fb      	strb	r3, [r7, #15]

    /* Process locked */
  __HAL_LOCK(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_DMA_UnRegisterCallback+0x1e>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e041      	b.n	8002942 <HAL_DMA_UnRegisterCallback+0xa2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d130      	bne.n	8002934 <HAL_DMA_UnRegisterCallback+0x94>
  {
    switch (CallbackID)
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d82a      	bhi.n	800292e <HAL_DMA_UnRegisterCallback+0x8e>
 80028d8:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <HAL_DMA_UnRegisterCallback+0x40>)
 80028da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028de:	bf00      	nop
 80028e0:	080028f5 	.word	0x080028f5
 80028e4:	080028fd 	.word	0x080028fd
 80028e8:	08002905 	.word	0x08002905
 80028ec:	0800290d 	.word	0x0800290d
 80028f0:	08002915 	.word	0x08002915
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = NULL;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 80028fa:	e01d      	b.n	8002938 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = NULL;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8002902:	e019      	b.n	8002938 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = NULL;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 800290a:	e015      	b.n	8002938 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = NULL;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8002912:	e011      	b.n	8002938 <HAL_DMA_UnRegisterCallback+0x98>

    case   HAL_DMA_XFER_ALL_CB_ID:
           hdma->XferCpltCallback = NULL;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	62da      	str	r2, [r3, #44]	; 0x2c
           hdma->XferHalfCpltCallback = NULL;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
           hdma->XferErrorCallback = NULL;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	635a      	str	r2, [r3, #52]	; 0x34
           hdma->XferAbortCallback = NULL;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 800292c:	e004      	b.n	8002938 <HAL_DMA_UnRegisterCallback+0x98>

    default:
           status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
           break;
 8002932:	e001      	b.n	8002938 <HAL_DMA_UnRegisterCallback+0x98>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002940:	7bfb      	ldrb	r3, [r7, #15]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop

08002950 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800295e:	b2db      	uxtb	r3, r3
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	f003 021c 	and.w	r2, r3, #28
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f202 	lsl.w	r2, r1, r2
 80029a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b10      	cmp	r3, #16
 80029b4:	d108      	bne.n	80029c8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029c6:	e007      	b.n	80029d8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	60da      	str	r2, [r3, #12]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_EXTI_SetConfigLine+0x16>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e0b3      	b.n	8002b66 <HAL_EXTI_SetConfigLine+0x182>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	601a      	str	r2, [r3, #0]

  /* Compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	0c1b      	lsrs	r3, r3, #16
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	61bb      	str	r3, [r7, #24]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d060      	beq.n	8002af4 <HAL_EXTI_SetConfigLine+0x110>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	4b4f      	ldr	r3, [pc, #316]	; (8002b74 <HAL_EXTI_SetConfigLine+0x190>)
 8002a38:	4413      	add	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d004      	beq.n	8002a58 <HAL_EXTI_SetConfigLine+0x74>
    {
      regval |= maskline;
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	e004      	b.n	8002a62 <HAL_EXTI_SetConfigLine+0x7e>
    }
    else
    {
      regval &= ~maskline;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61fb      	str	r3, [r7, #28]
    }

    /* Store rising trigger mode */
    *regaddr = regval;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	601a      	str	r2, [r3, #0]

    /* Configure falling trigger */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	4b42      	ldr	r3, [pc, #264]	; (8002b78 <HAL_EXTI_SetConfigLine+0x194>)
 8002a6e:	4413      	add	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <HAL_EXTI_SetConfigLine+0xaa>
    {
      regval |= maskline;
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	e004      	b.n	8002a98 <HAL_EXTI_SetConfigLine+0xb4>
    }
    else
    {
      regval &= ~maskline;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61fb      	str	r3, [r7, #28]
    }

    /* Store falling trigger mode */
    *regaddr = regval;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	601a      	str	r2, [r3, #0]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002aa6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002aaa:	d123      	bne.n	8002af4 <HAL_EXTI_SetConfigLine+0x110>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8002aac:	4a33      	ldr	r2, [pc, #204]	; (8002b7c <HAL_EXTI_SetConfigLine+0x198>)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab8:	61fb      	str	r3, [r7, #28]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61fb      	str	r3, [r7, #28]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61fb      	str	r3, [r7, #28]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8002ae6:	4925      	ldr	r1, [pc, #148]	; (8002b7c <HAL_EXTI_SetConfigLine+0x198>)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	015b      	lsls	r3, r3, #5
 8002af8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002afc:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8002b00:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d004      	beq.n	8002b1e <HAL_EXTI_SetConfigLine+0x13a>
  {
    regval |= maskline;
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61fb      	str	r3, [r7, #28]
 8002b1c:	e004      	b.n	8002b28 <HAL_EXTI_SetConfigLine+0x144>
  }
  else
  {
    regval &= ~maskline;
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61fb      	str	r3, [r7, #28]
  }

  /* Store interrupt mode */
  *regaddr = regval;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	601a      	str	r2, [r3, #0]

  /* The event mode cannot be configured if the line does not support it */
  assert_param(((pExtiConfig->Line & EXTI_EVENT) == EXTI_EVENT) || ((pExtiConfig->Mode & EXTI_MODE_EVENT) != EXTI_MODE_EVENT));

  /* Configure event mode : read current mode */
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <HAL_EXTI_SetConfigLine+0x19c>)
 8002b34:	4413      	add	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d004      	beq.n	8002b54 <HAL_EXTI_SetConfigLine+0x170>
  {
    regval |= maskline;
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	e004      	b.n	8002b5e <HAL_EXTI_SetConfigLine+0x17a>
  }
  else
  {
    regval &= ~maskline;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61fb      	str	r3, [r7, #28]
  }

  /* Store event mode */
  *regaddr = regval;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40010408 	.word	0x40010408
 8002b78:	4001040c 	.word	0x4001040c
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	40010404 	.word	0x40010404

08002b84 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b089      	sub	sp, #36	; 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <HAL_EXTI_GetConfigLine+0x16>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e08e      	b.n	8002cbc <HAL_EXTI_GetConfigLine+0x138>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	601a      	str	r2, [r3, #0]

  /* Compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	0c1b      	lsrs	r3, r3, #16
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	61fb      	str	r3, [r7, #28]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	61bb      	str	r3, [r7, #24]
  maskline = (1uL << linepos);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]

  /* 1] Get core mode : interrupt */
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	015b      	lsls	r3, r3, #5
 8002bca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bce:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8002bd2:	613b      	str	r3, [r7, #16]
  regval = *regaddr;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00u)
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2201      	movs	r2, #1
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	e002      	b.n	8002bf2 <HAL_EXTI_GetConfigLine+0x6e>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <HAL_EXTI_GetConfigLine+0x144>)
 8002bf8:	4413      	add	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
  regval = *regaddr;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00u)
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_EXTI_GetConfigLine+0x94>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f043 0202 	orr.w	r2, r3, #2
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	605a      	str	r2, [r3, #4]
  }

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d044      	beq.n	8002cae <HAL_EXTI_GetConfigLine+0x12a>
  {
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <HAL_EXTI_GetConfigLine+0x148>)
 8002c2a:	4413      	add	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
    regval = *regaddr;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00u)
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_EXTI_GetConfigLine+0xc2>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2201      	movs	r2, #1
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	e002      	b.n	8002c4c <HAL_EXTI_GetConfigLine+0xc8>
    }
    else
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <HAL_EXTI_GetConfigLine+0x14c>)
 8002c52:	4413      	add	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
    regval = *regaddr;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60fb      	str	r3, [r7, #12]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00u)
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_EXTI_GetConfigLine+0xee>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f043 0202 	orr.w	r2, r3, #2
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002c7a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002c7e:	d112      	bne.n	8002ca6 <HAL_EXTI_GetConfigLine+0x122>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8002c80:	4a14      	ldr	r2, [pc, #80]	; (8002cd4 <HAL_EXTI_GetConfigLine+0x150>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	3302      	adds	r3, #2
 8002c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8c:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	0e1a      	lsrs	r2, r3, #24
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	60da      	str	r2, [r3, #12]
 8002ca4:	e009      	b.n	8002cba <HAL_EXTI_GetConfigLine+0x136>
    }
    else
    {
      pExtiConfig->GPIOSel = 0x00u;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	60da      	str	r2, [r3, #12]
 8002cac:	e005      	b.n	8002cba <HAL_EXTI_GetConfigLine+0x136>
    }
  }
  else
  {
    pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
    pExtiConfig->GPIOSel = 0x00u;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3724      	adds	r7, #36	; 0x24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40010404 	.word	0x40010404
 8002ccc:	40010408 	.word	0x40010408
 8002cd0:	4001040c 	.word	0x4001040c
 8002cd4:	40010000 	.word	0x40010000

08002cd8 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	; 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if (hexti == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e070      	b.n	8002dcc <HAL_EXTI_ClearConfigLine+0xf4>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0c1b      	lsrs	r3, r3, #16
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	61fb      	str	r3, [r7, #28]
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	61bb      	str	r3, [r7, #24]
  maskline = (1uL << linepos);
 8002d00:	2201      	movs	r2, #1
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	617b      	str	r3, [r7, #20]

  /* 1] Clear interrupt mode */
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	015b      	lsls	r3, r3, #5
 8002d0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d12:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8002d16:	613b      	str	r3, [r7, #16]
  regval = (*regaddr & ~maskline);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	4013      	ands	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  *regaddr = regval;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	601a      	str	r2, [r3, #0]

  /* 2] Clear event mode */
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	4b2a      	ldr	r3, [pc, #168]	; (8002dd8 <HAL_EXTI_ClearConfigLine+0x100>)
 8002d30:	4413      	add	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
  regval = (*regaddr & ~maskline);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  *regaddr = regval;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	601a      	str	r2, [r3, #0]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d03b      	beq.n	8002dca <HAL_EXTI_ClearConfigLine+0xf2>
  {
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <HAL_EXTI_ClearConfigLine+0x104>)
 8002d58:	4413      	add	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
    regval = (*regaddr & ~maskline);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	4013      	ands	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
    *regaddr = regval;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	601a      	str	r2, [r3, #0]

    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_EXTI_ClearConfigLine+0x108>)
 8002d74:	4413      	add	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
    regval = (*regaddr & ~maskline);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	4013      	ands	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
    *regaddr = regval;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	601a      	str	r2, [r3, #0]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002d92:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002d96:	d118      	bne.n	8002dca <HAL_EXTI_ClearConfigLine+0xf2>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8002d98:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <HAL_EXTI_ClearConfigLine+0x10c>)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	089b      	lsrs	r3, r3, #2
 8002d9e:	3302      	adds	r3, #2
 8002da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da4:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	2207      	movs	r2, #7
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4013      	ands	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8002dbc:	4909      	ldr	r1, [pc, #36]	; (8002de4 <HAL_EXTI_ClearConfigLine+0x10c>)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3724      	adds	r7, #36	; 0x24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	40010404 	.word	0x40010404
 8002ddc:	40010408 	.word	0x40010408
 8002de0:	4001040c 	.word	0x4001040c
 8002de4:	40010000 	.word	0x40010000

08002de8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	460b      	mov	r3, r1
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002dfa:	7afb      	ldrb	r3, [r7, #11]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d103      	bne.n	8002e08 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	605a      	str	r2, [r3, #4]
      break;
 8002e06:	e002      	b.n	8002e0e <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e0c:	bf00      	nop
  }

  return status;
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	371c      	adds	r7, #28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e003      	b.n	8002e38 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002e36:	2300      	movs	r3, #0
  }
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	0c1b      	lsrs	r3, r3, #16
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2201      	movs	r2, #1
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <HAL_EXTI_IRQHandler+0x5c>)
 8002e6e:	4413      	add	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d009      	beq.n	8002e96 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4798      	blx	r3
    }
  }
}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40010414 	.word	0x40010414

08002ea4 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	; 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	0c1b      	lsrs	r3, r3, #16
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	61fb      	str	r3, [r7, #28]
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	61bb      	str	r3, [r7, #24]
  maskline = (1uL << linepos);
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	617b      	str	r3, [r7, #20]

  /* Get pending bit */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_EXTI_GetPending+0x54>)
 8002ed4:	4413      	add	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((*regaddr & maskline) >> linepos);
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	401a      	ands	r2, r3
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee6:	60fb      	str	r3, [r7, #12]
  return regval;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	; 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40010414 	.word	0x40010414

08002efc <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0c1b      	lsrs	r3, r3, #16
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	613b      	str	r3, [r7, #16]

  /* Get pending register address */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_EXTI_ClearPending+0x44>)
 8002f28:	4413      	add	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  *regaddr =  maskline;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	601a      	str	r2, [r3, #0]
}
 8002f32:	bf00      	nop
 8002f34:	371c      	adds	r7, #28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40010414 	.word	0x40010414

08002f44 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0c1b      	lsrs	r3, r3, #16
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	2201      	movs	r2, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_EXTI_GenerateSWI+0x40>)
 8002f6e:	4413      	add	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	601a      	str	r2, [r3, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40010410 	.word	0x40010410

08002f88 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f9a:	4b2f      	ldr	r3, [pc, #188]	; (8003058 <HAL_FLASH_Program+0xd0>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_FLASH_Program+0x1e>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e053      	b.n	800304e <HAL_FLASH_Program+0xc6>
 8002fa6:	4b2c      	ldr	r3, [pc, #176]	; (8003058 <HAL_FLASH_Program+0xd0>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fb0:	f000 fa16 	bl	80033e0 <FLASH_WaitForLastOperation>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d143      	bne.n	8003046 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002fbe:	4b26      	ldr	r3, [pc, #152]	; (8003058 <HAL_FLASH_Program+0xd0>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002fc4:	4b25      	ldr	r3, [pc, #148]	; (800305c <HAL_FLASH_Program+0xd4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d009      	beq.n	8002fe4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002fd0:	4b22      	ldr	r3, [pc, #136]	; (800305c <HAL_FLASH_Program+0xd4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a21      	ldr	r2, [pc, #132]	; (800305c <HAL_FLASH_Program+0xd4>)
 8002fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fda:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002fdc:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <HAL_FLASH_Program+0xd0>)
 8002fde:	2202      	movs	r2, #2
 8002fe0:	771a      	strb	r2, [r3, #28]
 8002fe2:	e002      	b.n	8002fea <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <HAL_FLASH_Program+0xd0>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d107      	bne.n	8003000 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ff4:	68b8      	ldr	r0, [r7, #8]
 8002ff6:	f000 fa49 	bl	800348c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	e010      	b.n	8003022 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d002      	beq.n	800300c <HAL_FLASH_Program+0x84>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d10a      	bne.n	8003022 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	4619      	mov	r1, r3
 8003010:	68b8      	ldr	r0, [r7, #8]
 8003012:	f000 fa61 	bl	80034d8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d102      	bne.n	8003022 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800301c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003020:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003022:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003026:	f000 f9db 	bl	80033e0 <FLASH_WaitForLastOperation>
 800302a:	4603      	mov	r3, r0
 800302c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d006      	beq.n	8003042 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_FLASH_Program+0xd4>)
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	43db      	mvns	r3, r3
 800303c:	4907      	ldr	r1, [pc, #28]	; (800305c <HAL_FLASH_Program+0xd4>)
 800303e:	4013      	ands	r3, r2
 8003040:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003042:	f000 fcb3 	bl	80039ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003046:	4b04      	ldr	r3, [pc, #16]	; (8003058 <HAL_FLASH_Program+0xd0>)
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]

  return status;
 800304c:	7dfb      	ldrb	r3, [r7, #23]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000014 	.word	0x20000014
 800305c:	40022000 	.word	0x40022000

08003060 <HAL_FLASH_Program_IT>:
  *                are stored the data for the row fast program
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003072:	4b25      	ldr	r3, [pc, #148]	; (8003108 <HAL_FLASH_Program_IT+0xa8>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_FLASH_Program_IT+0x1e>
 800307a:	2302      	movs	r3, #2
 800307c:	e040      	b.n	8003100 <HAL_FLASH_Program_IT+0xa0>
 800307e:	4b22      	ldr	r3, [pc, #136]	; (8003108 <HAL_FLASH_Program_IT+0xa8>)
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003084:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_FLASH_Program_IT+0xa8>)
 8003086:	2200      	movs	r2, #0
 8003088:	605a      	str	r2, [r3, #4]

  /* Deactivate the data cache if they are activated to avoid data misbehavior */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800308a:	4b20      	ldr	r3, [pc, #128]	; (800310c <HAL_FLASH_Program_IT+0xac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_FLASH_Program_IT+0x4a>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003096:	4b1d      	ldr	r3, [pc, #116]	; (800310c <HAL_FLASH_Program_IT+0xac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a1c      	ldr	r2, [pc, #112]	; (800310c <HAL_FLASH_Program_IT+0xac>)
 800309c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030a0:	6013      	str	r3, [r2, #0]
    pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80030a2:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_FLASH_Program_IT+0xa8>)
 80030a4:	2202      	movs	r2, #2
 80030a6:	771a      	strb	r2, [r3, #28]
 80030a8:	e002      	b.n	80030b0 <HAL_FLASH_Program_IT+0x50>
  }
  else
  {
    pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80030aa:	4b17      	ldr	r3, [pc, #92]	; (8003108 <HAL_FLASH_Program_IT+0xa8>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	771a      	strb	r2, [r3, #28]
  }

  /* Set internal variables used by the IRQ handler */
  if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d103      	bne.n	80030be <HAL_FLASH_Program_IT+0x5e>
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_LAST;
 80030b6:	4b14      	ldr	r3, [pc, #80]	; (8003108 <HAL_FLASH_Program_IT+0xa8>)
 80030b8:	2204      	movs	r2, #4
 80030ba:	721a      	strb	r2, [r3, #8]
 80030bc:	e002      	b.n	80030c4 <HAL_FLASH_Program_IT+0x64>
  }
  else
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 80030be:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_FLASH_Program_IT+0xa8>)
 80030c0:	2203      	movs	r2, #3
 80030c2:	721a      	strb	r2, [r3, #8]
  }
  pFlash.Address = Address;
 80030c4:	4a10      	ldr	r2, [pc, #64]	; (8003108 <HAL_FLASH_Program_IT+0xa8>)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	60d3      	str	r3, [r2, #12]

  /* Enable End of Operation and Error interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <HAL_FLASH_Program_IT+0xac>)
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	4a0f      	ldr	r2, [pc, #60]	; (800310c <HAL_FLASH_Program_IT+0xac>)
 80030d0:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80030d4:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <HAL_FLASH_Program_IT+0x88>
  {
    /* Program double-word (64-bit) at a specified address */
    FLASH_Program_DoubleWord(Address, Data);
 80030dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030e0:	68b8      	ldr	r0, [r7, #8]
 80030e2:	f000 f9d3 	bl	800348c <FLASH_Program_DoubleWord>
 80030e6:	e00a      	b.n	80030fe <HAL_FLASH_Program_IT+0x9e>
  }
  else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d002      	beq.n	80030f4 <HAL_FLASH_Program_IT+0x94>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d104      	bne.n	80030fe <HAL_FLASH_Program_IT+0x9e>
  {
    /* Fast program a 32 row double-word (64-bit) at a specified address */
    FLASH_Program_Fast(Address, (uint32_t)Data);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	68b8      	ldr	r0, [r7, #8]
 80030fa:	f000 f9ed 	bl	80034d8 <FLASH_Program_Fast>
  else
  {
    /* Nothing to do */
  }

  return status;
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000014 	.word	0x20000014
 800310c:	40022000 	.word	0x40022000

08003110 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8003116:	4b68      	ldr	r3, [pc, #416]	; (80032b8 <HAL_FLASH_IRQHandler+0x1a8>)
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	4a67      	ldr	r2, [pc, #412]	; (80032b8 <HAL_FLASH_IRQHandler+0x1a8>)
 800311c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003120:	f023 0307 	bic.w	r3, r3, #7
 8003124:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8003126:	4b64      	ldr	r3, [pc, #400]	; (80032b8 <HAL_FLASH_IRQHandler+0x1a8>)
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	4a63      	ldr	r2, [pc, #396]	; (80032b8 <HAL_FLASH_IRQHandler+0x1a8>)
 800312c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003130:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8003132:	4b62      	ldr	r3, [pc, #392]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 8003134:	7a1b      	ldrb	r3, [r3, #8]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b04      	cmp	r3, #4
 800313a:	d105      	bne.n	8003148 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800313c:	4b5e      	ldr	r3, [pc, #376]	; (80032b8 <HAL_FLASH_IRQHandler+0x1a8>)
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	4a5d      	ldr	r2, [pc, #372]	; (80032b8 <HAL_FLASH_IRQHandler+0x1a8>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003148:	4b5b      	ldr	r3, [pc, #364]	; (80032b8 <HAL_FLASH_IRQHandler+0x1a8>)
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003150:	4013      	ands	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d045      	beq.n	80031e6 <HAL_FLASH_IRQHandler+0xd6>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800315a:	4b58      	ldr	r3, [pc, #352]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	4a56      	ldr	r2, [pc, #344]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 8003164:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <HAL_FLASH_IRQHandler+0x70>
 8003170:	4b51      	ldr	r3, [pc, #324]	; (80032b8 <HAL_FLASH_IRQHandler+0x1a8>)
 8003172:	699a      	ldr	r2, [r3, #24]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800317a:	494f      	ldr	r1, [pc, #316]	; (80032b8 <HAL_FLASH_IRQHandler+0x1a8>)
 800317c:	4313      	orrs	r3, r2
 800317e:	618b      	str	r3, [r1, #24]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <HAL_FLASH_IRQHandler+0x84>
 800318a:	4a4b      	ldr	r2, [pc, #300]	; (80032b8 <HAL_FLASH_IRQHandler+0x1a8>)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003192:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 8003194:	f000 fc0a 	bl	80039ac <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8003198:	4b48      	ldr	r3, [pc, #288]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 800319a:	7a1b      	ldrb	r3, [r3, #8]
 800319c:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 800319e:	7afb      	ldrb	r3, [r7, #11]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d105      	bne.n	80031b0 <HAL_FLASH_IRQHandler+0xa0>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 80031a4:	4b45      	ldr	r3, [pc, #276]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f893 	bl	80032d4 <HAL_FLASH_OperationErrorCallback>
 80031ae:	e017      	b.n	80031e0 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 80031b0:	7afb      	ldrb	r3, [r7, #11]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d105      	bne.n	80031c2 <HAL_FLASH_IRQHandler+0xb2>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 80031b6:	4b41      	ldr	r3, [pc, #260]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f88a 	bl	80032d4 <HAL_FLASH_OperationErrorCallback>
 80031c0:	e00e      	b.n	80031e0 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 80031c2:	7afb      	ldrb	r3, [r7, #11]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d002      	beq.n	80031ce <HAL_FLASH_IRQHandler+0xbe>
 80031c8:	7afb      	ldrb	r3, [r7, #11]
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d105      	bne.n	80031da <HAL_FLASH_IRQHandler+0xca>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 80031ce:	4b3b      	ldr	r3, [pc, #236]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f87e 	bl	80032d4 <HAL_FLASH_OperationErrorCallback>
 80031d8:	e002      	b.n	80031e0 <HAL_FLASH_IRQHandler+0xd0>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 80031da:	2000      	movs	r0, #0
 80031dc:	f000 f87a 	bl	80032d4 <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80031e0:	4b36      	ldr	r3, [pc, #216]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 80031e6:	4b34      	ldr	r3, [pc, #208]	; (80032b8 <HAL_FLASH_IRQHandler+0x1a8>)
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d04f      	beq.n	8003292 <HAL_FLASH_IRQHandler+0x182>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80031f2:	4b31      	ldr	r3, [pc, #196]	; (80032b8 <HAL_FLASH_IRQHandler+0x1a8>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 80031f8:	4b30      	ldr	r3, [pc, #192]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 80031fa:	7a1b      	ldrb	r3, [r3, #8]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d12b      	bne.n	800325a <HAL_FLASH_IRQHandler+0x14a>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8003202:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	3b01      	subs	r3, #1
 8003208:	4a2c      	ldr	r2, [pc, #176]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 800320a:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 800320c:	4b2b      	ldr	r3, [pc, #172]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_FLASH_IRQHandler+0x12c>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8003214:	4b29      	ldr	r3, [pc, #164]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 f851 	bl	80032c0 <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 800321e:	4b27      	ldr	r3, [pc, #156]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	3301      	adds	r3, #1
 8003224:	4a25      	ldr	r2, [pc, #148]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 8003226:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 8003228:	4b24      	ldr	r3, [pc, #144]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 800322e:	4b23      	ldr	r3, [pc, #140]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	4619      	mov	r1, r3
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 fb83 	bl	8003940 <FLASH_PageErase>
 800323a:	e02a      	b.n	8003292 <HAL_FLASH_IRQHandler+0x182>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 800323c:	4b1f      	ldr	r3, [pc, #124]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 800323e:	f04f 32ff 	mov.w	r2, #4294967295
 8003242:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003244:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 8003246:	2200      	movs	r2, #0
 8003248:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800324a:	f000 fbaf 	bl	80039ac <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 800324e:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f834 	bl	80032c0 <HAL_FLASH_EndOfOperationCallback>
 8003258:	e01b      	b.n	8003292 <HAL_FLASH_IRQHandler+0x182>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 800325a:	f000 fba7 	bl	80039ac <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 800325e:	4b17      	ldr	r3, [pc, #92]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 8003260:	7a1b      	ldrb	r3, [r3, #8]
 8003262:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 8003264:	7afb      	ldrb	r3, [r7, #11]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d105      	bne.n	8003276 <HAL_FLASH_IRQHandler+0x166>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800326a:	4b14      	ldr	r3, [pc, #80]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 f826 	bl	80032c0 <HAL_FLASH_EndOfOperationCallback>
 8003274:	e00a      	b.n	800328c <HAL_FLASH_IRQHandler+0x17c>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 8003276:	7afb      	ldrb	r3, [r7, #11]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d002      	beq.n	8003282 <HAL_FLASH_IRQHandler+0x172>
 800327c:	7afb      	ldrb	r3, [r7, #11]
 800327e:	2b04      	cmp	r3, #4
 8003280:	d104      	bne.n	800328c <HAL_FLASH_IRQHandler+0x17c>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f81a 	bl	80032c0 <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 800328e:	2200      	movs	r2, #0
 8003290:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 8003294:	7a1b      	ldrb	r3, [r3, #8]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d108      	bne.n	80032ae <HAL_FLASH_IRQHandler+0x19e>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_FLASH_IRQHandler+0x1a8>)
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	4a05      	ldr	r2, [pc, #20]	; (80032b8 <HAL_FLASH_IRQHandler+0x1a8>)
 80032a2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80032a6:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80032a8:	4b04      	ldr	r3, [pc, #16]	; (80032bc <HAL_FLASH_IRQHandler+0x1ac>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
  }
}
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40022000 	.word	0x40022000
 80032bc:	20000014 	.word	0x20000014

080032c0 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_FLASH_Unlock+0x38>)
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	da0b      	bge.n	8003312 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_FLASH_Unlock+0x38>)
 80032fc:	4a09      	ldr	r2, [pc, #36]	; (8003324 <HAL_FLASH_Unlock+0x3c>)
 80032fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003300:	4b07      	ldr	r3, [pc, #28]	; (8003320 <HAL_FLASH_Unlock+0x38>)
 8003302:	4a09      	ldr	r2, [pc, #36]	; (8003328 <HAL_FLASH_Unlock+0x40>)
 8003304:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_FLASH_Unlock+0x38>)
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	da01      	bge.n	8003312 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003312:	79fb      	ldrb	r3, [r7, #7]
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	40022000 	.word	0x40022000
 8003324:	45670123 	.word	0x45670123
 8003328:	cdef89ab 	.word	0xcdef89ab

0800332c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003330:	4b05      	ldr	r3, [pc, #20]	; (8003348 <HAL_FLASH_Lock+0x1c>)
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	4a04      	ldr	r2, [pc, #16]	; (8003348 <HAL_FLASH_Lock+0x1c>)
 8003336:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800333a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	40022000 	.word	0x40022000

0800334c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <HAL_FLASH_OB_Unlock+0x2c>)
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_FLASH_OB_Unlock+0x2c>)
 800335e:	4a07      	ldr	r2, [pc, #28]	; (800337c <HAL_FLASH_OB_Unlock+0x30>)
 8003360:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_FLASH_OB_Unlock+0x2c>)
 8003364:	4a06      	ldr	r2, [pc, #24]	; (8003380 <HAL_FLASH_OB_Unlock+0x34>)
 8003366:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	e000      	b.n	800336e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
}
 800336e:	4618      	mov	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	40022000 	.word	0x40022000
 800337c:	08192a3b 	.word	0x08192a3b
 8003380:	4c5d6e7f 	.word	0x4c5d6e7f

08003384 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_FLASH_OB_Lock+0x1c>)
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	4a04      	ldr	r2, [pc, #16]	; (80033a0 <HAL_FLASH_OB_Lock+0x1c>)
 800338e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003392:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	40022000 	.word	0x40022000

080033a4 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_FLASH_OB_Launch+0x20>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <HAL_FLASH_OB_Launch+0x20>)
 80033ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033b2:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 80033b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80033b8:	f000 f812 	bl	80033e0 <FLASH_WaitForLastOperation>
 80033bc:	4603      	mov	r3, r0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40022000 	.word	0x40022000

080033c8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <HAL_FLASH_GetError+0x14>)
 80033ce:	685b      	ldr	r3, [r3, #4]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000014 	.word	0x20000014

080033e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80033e8:	f7fe f932 	bl	8001650 <HAL_GetTick>
 80033ec:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80033ee:	e00d      	b.n	800340c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f6:	d009      	beq.n	800340c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80033f8:	f7fe f92a 	bl	8001650 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	429a      	cmp	r2, r3
 8003406:	d801      	bhi.n	800340c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e037      	b.n	800347c <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800340c:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <FLASH_WaitForLastOperation+0xa4>)
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1eb      	bne.n	80033f0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003418:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <FLASH_WaitForLastOperation+0xa4>)
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003420:	4013      	ands	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d01e      	beq.n	8003468 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800342a:	4b17      	ldr	r3, [pc, #92]	; (8003488 <FLASH_WaitForLastOperation+0xa8>)
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	4313      	orrs	r3, r2
 8003432:	4a15      	ldr	r2, [pc, #84]	; (8003488 <FLASH_WaitForLastOperation+0xa8>)
 8003434:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <FLASH_WaitForLastOperation+0x70>
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <FLASH_WaitForLastOperation+0xa4>)
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800344a:	490e      	ldr	r1, [pc, #56]	; (8003484 <FLASH_WaitForLastOperation+0xa4>)
 800344c:	4313      	orrs	r3, r2
 800344e:	618b      	str	r3, [r1, #24]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d004      	beq.n	8003464 <FLASH_WaitForLastOperation+0x84>
 800345a:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <FLASH_WaitForLastOperation+0xa4>)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003462:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e009      	b.n	800347c <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <FLASH_WaitForLastOperation+0xa4>)
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <FLASH_WaitForLastOperation+0xa4>)
 8003476:	2201      	movs	r2, #1
 8003478:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40022000 	.word	0x40022000
 8003488:	20000014 	.word	0x20000014

0800348c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <FLASH_Program_DoubleWord+0x48>)
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	4a0d      	ldr	r2, [pc, #52]	; (80034d4 <FLASH_Program_DoubleWord+0x48>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80034aa:	f3bf 8f6f 	isb	sy
}
 80034ae:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80034b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	000a      	movs	r2, r1
 80034be:	2300      	movs	r3, #0
 80034c0:	68f9      	ldr	r1, [r7, #12]
 80034c2:	3104      	adds	r1, #4
 80034c4:	4613      	mov	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40022000 	.word	0x40022000

080034d8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80034d8:	b480      	push	{r7}
 80034da:	b089      	sub	sp, #36	; 0x24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80034e2:	2340      	movs	r3, #64	; 0x40
 80034e4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80034ee:	4b14      	ldr	r3, [pc, #80]	; (8003540 <FLASH_Program_Fast+0x68>)
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	4a13      	ldr	r2, [pc, #76]	; (8003540 <FLASH_Program_Fast+0x68>)
 80034f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034fa:	f3ef 8310 	mrs	r3, PRIMASK
 80034fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8003500:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003504:	b672      	cpsid	i
}
 8003506:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	3304      	adds	r3, #4
 8003514:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	3304      	adds	r3, #4
 800351a:	617b      	str	r3, [r7, #20]
    row_index--;
 800351c:	7ffb      	ldrb	r3, [r7, #31]
 800351e:	3b01      	subs	r3, #1
 8003520:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003522:	7ffb      	ldrb	r3, [r7, #31]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1ef      	bne.n	8003508 <FLASH_Program_Fast+0x30>
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f383 8810 	msr	PRIMASK, r3
}
 8003532:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003534:	bf00      	nop
 8003536:	3724      	adds	r7, #36	; 0x24
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40022000 	.word	0x40022000

08003544 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800354e:	4b4c      	ldr	r3, [pc, #304]	; (8003680 <HAL_FLASHEx_Erase+0x13c>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_FLASHEx_Erase+0x16>
 8003556:	2302      	movs	r3, #2
 8003558:	e08d      	b.n	8003676 <HAL_FLASHEx_Erase+0x132>
 800355a:	4b49      	ldr	r3, [pc, #292]	; (8003680 <HAL_FLASHEx_Erase+0x13c>)
 800355c:	2201      	movs	r2, #1
 800355e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003560:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003564:	f7ff ff3c 	bl	80033e0 <FLASH_WaitForLastOperation>
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d17d      	bne.n	800366e <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003572:	4b43      	ldr	r3, [pc, #268]	; (8003680 <HAL_FLASHEx_Erase+0x13c>)
 8003574:	2200      	movs	r2, #0
 8003576:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003578:	4b42      	ldr	r3, [pc, #264]	; (8003684 <HAL_FLASHEx_Erase+0x140>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003580:	2b00      	cmp	r3, #0
 8003582:	d019      	beq.n	80035b8 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003584:	4b3f      	ldr	r3, [pc, #252]	; (8003684 <HAL_FLASHEx_Erase+0x140>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a3e      	ldr	r2, [pc, #248]	; (8003684 <HAL_FLASHEx_Erase+0x140>)
 800358a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800358e:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003590:	4b3c      	ldr	r3, [pc, #240]	; (8003684 <HAL_FLASHEx_Erase+0x140>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800359c:	4b39      	ldr	r3, [pc, #228]	; (8003684 <HAL_FLASHEx_Erase+0x140>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a38      	ldr	r2, [pc, #224]	; (8003684 <HAL_FLASHEx_Erase+0x140>)
 80035a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035a6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80035a8:	4b35      	ldr	r3, [pc, #212]	; (8003680 <HAL_FLASHEx_Erase+0x13c>)
 80035aa:	2203      	movs	r2, #3
 80035ac:	771a      	strb	r2, [r3, #28]
 80035ae:	e016      	b.n	80035de <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80035b0:	4b33      	ldr	r3, [pc, #204]	; (8003680 <HAL_FLASHEx_Erase+0x13c>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	771a      	strb	r2, [r3, #28]
 80035b6:	e012      	b.n	80035de <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80035b8:	4b32      	ldr	r3, [pc, #200]	; (8003684 <HAL_FLASHEx_Erase+0x140>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d009      	beq.n	80035d8 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80035c4:	4b2f      	ldr	r3, [pc, #188]	; (8003684 <HAL_FLASHEx_Erase+0x140>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a2e      	ldr	r2, [pc, #184]	; (8003684 <HAL_FLASHEx_Erase+0x140>)
 80035ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ce:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80035d0:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <HAL_FLASHEx_Erase+0x13c>)
 80035d2:	2202      	movs	r2, #2
 80035d4:	771a      	strb	r2, [r3, #28]
 80035d6:	e002      	b.n	80035de <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80035d8:	4b29      	ldr	r3, [pc, #164]	; (8003680 <HAL_FLASHEx_Erase+0x13c>)
 80035da:	2200      	movs	r2, #0
 80035dc:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d113      	bne.n	800360e <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f980 	bl	80038f0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035f4:	f7ff fef4 	bl	80033e0 <FLASH_WaitForLastOperation>
 80035f8:	4603      	mov	r3, r0
 80035fa:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80035fc:	4b21      	ldr	r3, [pc, #132]	; (8003684 <HAL_FLASHEx_Erase+0x140>)
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	4a20      	ldr	r2, [pc, #128]	; (8003684 <HAL_FLASHEx_Erase+0x140>)
 8003602:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003606:	f023 0304 	bic.w	r3, r3, #4
 800360a:	6153      	str	r3, [r2, #20]
 800360c:	e02d      	b.n	800366a <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	f04f 32ff 	mov.w	r2, #4294967295
 8003614:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	e01d      	b.n	800365a <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4619      	mov	r1, r3
 8003624:	68b8      	ldr	r0, [r7, #8]
 8003626:	f000 f98b 	bl	8003940 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800362a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800362e:	f7ff fed7 	bl	80033e0 <FLASH_WaitForLastOperation>
 8003632:	4603      	mov	r3, r0
 8003634:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003636:	4b13      	ldr	r3, [pc, #76]	; (8003684 <HAL_FLASHEx_Erase+0x140>)
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	4a12      	ldr	r2, [pc, #72]	; (8003684 <HAL_FLASHEx_Erase+0x140>)
 800363c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003640:	f023 0302 	bic.w	r3, r3, #2
 8003644:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	601a      	str	r2, [r3, #0]
          break;
 8003652:	e00a      	b.n	800366a <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	3301      	adds	r3, #1
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	4413      	add	r3, r2
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	d3d9      	bcc.n	800361e <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800366a:	f000 f99f 	bl	80039ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <HAL_FLASHEx_Erase+0x13c>)
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]

  return status;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000014 	.word	0x20000014
 8003684:	40022000 	.word	0x40022000

08003688 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003694:	4b36      	ldr	r3, [pc, #216]	; (8003770 <HAL_FLASHEx_Erase_IT+0xe8>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_FLASHEx_Erase_IT+0x18>
 800369c:	2302      	movs	r3, #2
 800369e:	e063      	b.n	8003768 <HAL_FLASHEx_Erase_IT+0xe0>
 80036a0:	4b33      	ldr	r3, [pc, #204]	; (8003770 <HAL_FLASHEx_Erase_IT+0xe8>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036a6:	4b32      	ldr	r3, [pc, #200]	; (8003770 <HAL_FLASHEx_Erase_IT+0xe8>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	605a      	str	r2, [r3, #4]

  /* Deactivate the cache if they are activated to avoid data misbehavior */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80036ac:	4b31      	ldr	r3, [pc, #196]	; (8003774 <HAL_FLASHEx_Erase_IT+0xec>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d019      	beq.n	80036ec <HAL_FLASHEx_Erase_IT+0x64>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80036b8:	4b2e      	ldr	r3, [pc, #184]	; (8003774 <HAL_FLASHEx_Erase_IT+0xec>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2d      	ldr	r2, [pc, #180]	; (8003774 <HAL_FLASHEx_Erase_IT+0xec>)
 80036be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036c2:	6013      	str	r3, [r2, #0]

    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80036c4:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <HAL_FLASHEx_Erase_IT+0xec>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d009      	beq.n	80036e4 <HAL_FLASHEx_Erase_IT+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80036d0:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_FLASHEx_Erase_IT+0xec>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a27      	ldr	r2, [pc, #156]	; (8003774 <HAL_FLASHEx_Erase_IT+0xec>)
 80036d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036da:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80036dc:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_FLASHEx_Erase_IT+0xe8>)
 80036de:	2203      	movs	r2, #3
 80036e0:	771a      	strb	r2, [r3, #28]
 80036e2:	e016      	b.n	8003712 <HAL_FLASHEx_Erase_IT+0x8a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80036e4:	4b22      	ldr	r3, [pc, #136]	; (8003770 <HAL_FLASHEx_Erase_IT+0xe8>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	771a      	strb	r2, [r3, #28]
 80036ea:	e012      	b.n	8003712 <HAL_FLASHEx_Erase_IT+0x8a>
    }
  }
  else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80036ec:	4b21      	ldr	r3, [pc, #132]	; (8003774 <HAL_FLASHEx_Erase_IT+0xec>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d009      	beq.n	800370c <HAL_FLASHEx_Erase_IT+0x84>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80036f8:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <HAL_FLASHEx_Erase_IT+0xec>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <HAL_FLASHEx_Erase_IT+0xec>)
 80036fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003702:	6013      	str	r3, [r2, #0]
    pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003704:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <HAL_FLASHEx_Erase_IT+0xe8>)
 8003706:	2202      	movs	r2, #2
 8003708:	771a      	strb	r2, [r3, #28]
 800370a:	e002      	b.n	8003712 <HAL_FLASHEx_Erase_IT+0x8a>
  }
  else
  {
    pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800370c:	4b18      	ldr	r3, [pc, #96]	; (8003770 <HAL_FLASHEx_Erase_IT+0xe8>)
 800370e:	2200      	movs	r2, #0
 8003710:	771a      	strb	r2, [r3, #28]
  }

  /* Enable End of Operation and Error interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8003712:	4b18      	ldr	r3, [pc, #96]	; (8003774 <HAL_FLASHEx_Erase_IT+0xec>)
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	4a17      	ldr	r2, [pc, #92]	; (8003774 <HAL_FLASHEx_Erase_IT+0xec>)
 8003718:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800371c:	6153      	str	r3, [r2, #20]

  pFlash.Bank = pEraseInit->Banks;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4a13      	ldr	r2, [pc, #76]	; (8003770 <HAL_FLASHEx_Erase_IT+0xe8>)
 8003724:	6113      	str	r3, [r2, #16]

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d108      	bne.n	8003740 <HAL_FLASHEx_Erase_IT+0xb8>
  {
    /* Mass erase to be done */
    pFlash.ProcedureOnGoing = FLASH_PROC_MASS_ERASE;
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <HAL_FLASHEx_Erase_IT+0xe8>)
 8003730:	2202      	movs	r2, #2
 8003732:	721a      	strb	r2, [r3, #8]
    FLASH_MassErase(pEraseInit->Banks);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f8d9 	bl	80038f0 <FLASH_MassErase>
 800373e:	e012      	b.n	8003766 <HAL_FLASHEx_Erase_IT+0xde>
  }
  else
  {
    /* Erase by page to be done */
    pFlash.ProcedureOnGoing = FLASH_PROC_PAGE_ERASE;
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_FLASHEx_Erase_IT+0xe8>)
 8003742:	2201      	movs	r2, #1
 8003744:	721a      	strb	r2, [r3, #8]
    pFlash.NbPagesToErase = pEraseInit->NbPages;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	4a09      	ldr	r2, [pc, #36]	; (8003770 <HAL_FLASHEx_Erase_IT+0xe8>)
 800374c:	6193      	str	r3, [r2, #24]
    pFlash.Page = pEraseInit->Page;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	4a07      	ldr	r2, [pc, #28]	; (8003770 <HAL_FLASHEx_Erase_IT+0xe8>)
 8003754:	6153      	str	r3, [r2, #20]

    /*Erase 1st page and wait for IT */
    FLASH_PageErase(pEraseInit->Page, pEraseInit->Banks);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	4619      	mov	r1, r3
 8003760:	4610      	mov	r0, r2
 8003762:	f000 f8ed 	bl	8003940 <FLASH_PageErase>
  }

  return status;
 8003766:	7bfb      	ldrb	r3, [r7, #15]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20000014 	.word	0x20000014
 8003774:	40022000 	.word	0x40022000

08003778 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003784:	4b32      	ldr	r3, [pc, #200]	; (8003850 <HAL_FLASHEx_OBProgram+0xd8>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_FLASHEx_OBProgram+0x18>
 800378c:	2302      	movs	r3, #2
 800378e:	e05a      	b.n	8003846 <HAL_FLASHEx_OBProgram+0xce>
 8003790:	4b2f      	ldr	r3, [pc, #188]	; (8003850 <HAL_FLASHEx_OBProgram+0xd8>)
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003796:	4b2e      	ldr	r3, [pc, #184]	; (8003850 <HAL_FLASHEx_OBProgram+0xd8>)
 8003798:	2200      	movs	r2, #0
 800379a:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00d      	beq.n	80037c4 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6858      	ldr	r0, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6899      	ldr	r1, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	461a      	mov	r2, r3
 80037b6:	f000 f93d 	bl	8003a34 <FLASH_OB_WRPConfig>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d009      	beq.n	80037e4 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 f991 	bl	8003afc <FLASH_OB_RDPConfig>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00c      	beq.n	800380a <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	4619      	mov	r1, r3
 80037fa:	4610      	mov	r0, r2
 80037fc:	f000 f9ac 	bl	8003b58 <FLASH_OB_UserConfig>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d013      	beq.n	800383e <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1a      	ldr	r2, [r3, #32]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	429a      	cmp	r2, r3
 8003820:	d00d      	beq.n	800383e <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69d8      	ldr	r0, [r3, #28]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a19      	ldr	r1, [r3, #32]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	461a      	mov	r2, r3
 8003830:	f000 fa8a 	bl	8003d48 <FLASH_OB_PCROPConfig>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800383e:	4b04      	ldr	r3, [pc, #16]	; (8003850 <HAL_FLASHEx_OBProgram+0xd8>)
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]

  return status;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000014 	.word	0x20000014

08003854 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2206      	movs	r2, #6
 8003860:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_FLASHEx_OBGetConfig+0x2e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d007      	beq.n	8003882 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8003876:	2b02      	cmp	r3, #2
 8003878:	d003      	beq.n	8003882 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b04      	cmp	r3, #4
 8003880:	d10f      	bne.n	80038a2 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6858      	ldr	r0, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f103 0108 	add.w	r1, r3, #8
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	330c      	adds	r3, #12
 800389c:	461a      	mov	r2, r3
 800389e:	f000 faff 	bl	8003ea0 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80038a2:	f000 fb47 	bl	8003f34 <FLASH_OB_GetRDP>
 80038a6:	4602      	mov	r2, r0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80038ac:	f000 fb5c 	bl	8003f68 <FLASH_OB_GetUser>
 80038b0:	4602      	mov	r2, r0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d003      	beq.n	80038c6 <HAL_FLASHEx_OBGetConfig+0x72>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d110      	bne.n	80038e8 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f043 0208 	orr.w	r2, r3, #8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f103 001c 	add.w	r0, r3, #28
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f103 0120 	add.w	r1, r3, #32
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3324      	adds	r3, #36	; 0x24
 80038e2:	461a      	mov	r2, r3
 80038e4:	f000 fb54 	bl	8003f90 <FLASH_OB_GetPCROP>
  }
}
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003902:	4b0e      	ldr	r3, [pc, #56]	; (800393c <FLASH_MassErase+0x4c>)
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	4a0d      	ldr	r2, [pc, #52]	; (800393c <FLASH_MassErase+0x4c>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <FLASH_MassErase+0x4c>)
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	4a07      	ldr	r2, [pc, #28]	; (800393c <FLASH_MassErase+0x4c>)
 800391e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003922:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <FLASH_MassErase+0x4c>)
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	4a04      	ldr	r2, [pc, #16]	; (800393c <FLASH_MassErase+0x4c>)
 800392a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392e:	6153      	str	r3, [r2, #20]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	40022000 	.word	0x40022000

08003940 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d006      	beq.n	8003962 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003954:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <FLASH_PageErase+0x68>)
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	4a13      	ldr	r2, [pc, #76]	; (80039a8 <FLASH_PageErase+0x68>)
 800395a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800395e:	6153      	str	r3, [r2, #20]
 8003960:	e005      	b.n	800396e <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <FLASH_PageErase+0x68>)
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	4a10      	ldr	r2, [pc, #64]	; (80039a8 <FLASH_PageErase+0x68>)
 8003968:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800396c:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800396e:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <FLASH_PageErase+0x68>)
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800397e:	490a      	ldr	r1, [pc, #40]	; (80039a8 <FLASH_PageErase+0x68>)
 8003980:	4313      	orrs	r3, r2
 8003982:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003984:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <FLASH_PageErase+0x68>)
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	4a07      	ldr	r2, [pc, #28]	; (80039a8 <FLASH_PageErase+0x68>)
 800398a:	f043 0302 	orr.w	r3, r3, #2
 800398e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <FLASH_PageErase+0x68>)
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <FLASH_PageErase+0x68>)
 8003996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399a:	6153      	str	r3, [r2, #20]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40022000 	.word	0x40022000

080039ac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80039b2:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <FLASH_FlushCaches+0x80>)
 80039b4:	7f1b      	ldrb	r3, [r3, #28]
 80039b6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d002      	beq.n	80039c4 <FLASH_FlushCaches+0x18>
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d111      	bne.n	80039e8 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80039c4:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <FLASH_FlushCaches+0x84>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a19      	ldr	r2, [pc, #100]	; (8003a30 <FLASH_FlushCaches+0x84>)
 80039ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <FLASH_FlushCaches+0x84>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <FLASH_FlushCaches+0x84>)
 80039d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039da:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039dc:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <FLASH_FlushCaches+0x84>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <FLASH_FlushCaches+0x84>)
 80039e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039e6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d002      	beq.n	80039f4 <FLASH_FlushCaches+0x48>
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d111      	bne.n	8003a18 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <FLASH_FlushCaches+0x84>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <FLASH_FlushCaches+0x84>)
 80039fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <FLASH_FlushCaches+0x84>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <FLASH_FlushCaches+0x84>)
 8003a06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a0a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a0c:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <FLASH_FlushCaches+0x84>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <FLASH_FlushCaches+0x84>)
 8003a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a16:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003a18:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <FLASH_FlushCaches+0x80>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	771a      	strb	r2, [r3, #28]
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000014 	.word	0x20000014
 8003a30:	40022000 	.word	0x40022000

08003a34 <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a44:	f7ff fccc 	bl	80033e0 <FLASH_WaitForLastOperation>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003a4c:	7dfb      	ldrb	r3, [r7, #23]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d14c      	bne.n	8003aec <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10b      	bne.n	8003a70 <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 8003a58:	4b27      	ldr	r3, [pc, #156]	; (8003af8 <FLASH_OB_WRPConfig+0xc4>)
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	0419      	lsls	r1, r3, #16
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	430b      	orrs	r3, r1
 8003a68:	4923      	ldr	r1, [pc, #140]	; (8003af8 <FLASH_OB_WRPConfig+0xc4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003a6e:	e02b      	b.n	8003ac8 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d10b      	bne.n	8003a8e <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 8003a76:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <FLASH_OB_WRPConfig+0xc4>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	0419      	lsls	r1, r3, #16
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	491c      	ldr	r1, [pc, #112]	; (8003af8 <FLASH_OB_WRPConfig+0xc4>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	630b      	str	r3, [r1, #48]	; 0x30
 8003a8c:	e01c      	b.n	8003ac8 <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d10b      	bne.n	8003aac <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 8003a94:	4b18      	ldr	r3, [pc, #96]	; (8003af8 <FLASH_OB_WRPConfig+0xc4>)
 8003a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a98:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	0419      	lsls	r1, r3, #16
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	4914      	ldr	r1, [pc, #80]	; (8003af8 <FLASH_OB_WRPConfig+0xc4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003aaa:	e00d      	b.n	8003ac8 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d10a      	bne.n	8003ac8 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 8003ab2:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <FLASH_OB_WRPConfig+0xc4>)
 8003ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab6:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	0419      	lsls	r1, r3, #16
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	490d      	ldr	r1, [pc, #52]	; (8003af8 <FLASH_OB_WRPConfig+0xc4>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	650b      	str	r3, [r1, #80]	; 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <FLASH_OB_WRPConfig+0xc4>)
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <FLASH_OB_WRPConfig+0xc4>)
 8003ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad2:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ad4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ad8:	f7ff fc82 	bl	80033e0 <FLASH_WaitForLastOperation>
 8003adc:	4603      	mov	r3, r0
 8003ade:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <FLASH_OB_WRPConfig+0xc4>)
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <FLASH_OB_WRPConfig+0xc4>)
 8003ae6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003aea:	6153      	str	r3, [r2, #20]
  }

  return status;
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40022000 	.word	0x40022000

08003afc <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b08:	f7ff fc6a 	bl	80033e0 <FLASH_WaitForLastOperation>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d119      	bne.n	8003b4a <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 8003b16:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <FLASH_OB_RDPConfig+0x58>)
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b1e:	490d      	ldr	r1, [pc, #52]	; (8003b54 <FLASH_OB_RDPConfig+0x58>)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003b26:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <FLASH_OB_RDPConfig+0x58>)
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <FLASH_OB_RDPConfig+0x58>)
 8003b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b30:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b36:	f7ff fc53 	bl	80033e0 <FLASH_WaitForLastOperation>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003b3e:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <FLASH_OB_RDPConfig+0x58>)
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <FLASH_OB_RDPConfig+0x58>)
 8003b44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b48:	6153      	str	r3, [r2, #20]
  }

  return status;
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40022000 	.word	0x40022000

08003b58 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b6e:	f7ff fc37 	bl	80033e0 <FLASH_WaitForLastOperation>
 8003b72:	4603      	mov	r3, r0
 8003b74:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f040 80de 	bne.w	8003d3a <FLASH_OB_UserConfig+0x1e2>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b9a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bb8:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bd6:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bf4:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d009      	beq.n	8003c14 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c12:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c30:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c4e:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c6c:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d009      	beq.n	8003c8c <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c8a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d009      	beq.n	8003caa <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ca8:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cc6:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ce4:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d009      	beq.n	8003d04 <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d02:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <FLASH_OB_UserConfig+0x1ec>)
 8003d06:	6a1a      	ldr	r2, [r3, #32]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	401a      	ands	r2, r3
 8003d0e:	490d      	ldr	r1, [pc, #52]	; (8003d44 <FLASH_OB_UserConfig+0x1ec>)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <FLASH_OB_UserConfig+0x1ec>)
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	4a0a      	ldr	r2, [pc, #40]	; (8003d44 <FLASH_OB_UserConfig+0x1ec>)
 8003d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d20:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d22:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d26:	f7ff fb5b 	bl	80033e0 <FLASH_WaitForLastOperation>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003d2e:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <FLASH_OB_UserConfig+0x1ec>)
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <FLASH_OB_UserConfig+0x1ec>)
 8003d34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d38:	6153      	str	r3, [r2, #20]
  }

  return status;
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40022000 	.word	0x40022000

08003d48 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d58:	f7ff fb42 	bl	80033e0 <FLASH_WaitForLastOperation>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 8003d60:	7ffb      	ldrb	r3, [r7, #31]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f040 808c 	bne.w	8003e80 <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8003d68:	4b48      	ldr	r3, [pc, #288]	; (8003e8c <FLASH_OB_PCROPConfig+0x144>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d115      	bne.n	8003da0 <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 8003d74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d78:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8003d7a:	4b45      	ldr	r3, [pc, #276]	; (8003e90 <FLASH_OB_PCROPConfig+0x148>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d008      	beq.n	8003d9a <FLASH_OB_PCROPConfig+0x52>
 8003d88:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <FLASH_OB_PCROPConfig+0x148>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	029b      	lsls	r3, r3, #10
 8003d8e:	085a      	lsrs	r2, r3, #1
 8003d90:	4b40      	ldr	r3, [pc, #256]	; (8003e94 <FLASH_OB_PCROPConfig+0x14c>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003d98:	e000      	b.n	8003d9c <FLASH_OB_PCROPConfig+0x54>
 8003d9a:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <FLASH_OB_PCROPConfig+0x150>)
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e014      	b.n	8003dca <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8003da0:	4b3b      	ldr	r3, [pc, #236]	; (8003e90 <FLASH_OB_PCROPConfig+0x148>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d008      	beq.n	8003dc0 <FLASH_OB_PCROPConfig+0x78>
 8003dae:	4b38      	ldr	r3, [pc, #224]	; (8003e90 <FLASH_OB_PCROPConfig+0x148>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	029b      	lsls	r3, r3, #10
 8003db4:	085a      	lsrs	r2, r3, #1
 8003db6:	4b37      	ldr	r3, [pc, #220]	; (8003e94 <FLASH_OB_PCROPConfig+0x14c>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003dbe:	e000      	b.n	8003dc2 <FLASH_OB_PCROPConfig+0x7a>
 8003dc0:	4b35      	ldr	r3, [pc, #212]	; (8003e98 <FLASH_OB_PCROPConfig+0x150>)
 8003dc2:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 8003dc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dc8:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d11a      	bne.n	8003e0a <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	08db      	lsrs	r3, r3, #3
 8003ddc:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8003dde:	4b2f      	ldr	r3, [pc, #188]	; (8003e9c <FLASH_OB_PCROPConfig+0x154>)
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	0c1b      	lsrs	r3, r3, #16
 8003de4:	041b      	lsls	r3, r3, #16
 8003de6:	492d      	ldr	r1, [pc, #180]	; (8003e9c <FLASH_OB_PCROPConfig+0x154>)
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	08db      	lsrs	r3, r3, #3
 8003df6:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8003df8:	4b28      	ldr	r3, [pc, #160]	; (8003e9c <FLASH_OB_PCROPConfig+0x154>)
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	041b      	lsls	r3, r3, #16
 8003e00:	4926      	ldr	r1, [pc, #152]	; (8003e9c <FLASH_OB_PCROPConfig+0x154>)
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	628b      	str	r3, [r1, #40]	; 0x28
 8003e08:	e01e      	b.n	8003e48 <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d119      	bne.n	8003e48 <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	08db      	lsrs	r3, r3, #3
 8003e1c:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8003e1e:	4b1f      	ldr	r3, [pc, #124]	; (8003e9c <FLASH_OB_PCROPConfig+0x154>)
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	0c1b      	lsrs	r3, r3, #16
 8003e24:	041b      	lsls	r3, r3, #16
 8003e26:	491d      	ldr	r1, [pc, #116]	; (8003e9c <FLASH_OB_PCROPConfig+0x154>)
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	08db      	lsrs	r3, r3, #3
 8003e36:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8003e38:	4b18      	ldr	r3, [pc, #96]	; (8003e9c <FLASH_OB_PCROPConfig+0x154>)
 8003e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3c:	0c1b      	lsrs	r3, r3, #16
 8003e3e:	041b      	lsls	r3, r3, #16
 8003e40:	4916      	ldr	r1, [pc, #88]	; (8003e9c <FLASH_OB_PCROPConfig+0x154>)
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	648b      	str	r3, [r1, #72]	; 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8003e48:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <FLASH_OB_PCROPConfig+0x154>)
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e56:	4911      	ldr	r1, [pc, #68]	; (8003e9c <FLASH_OB_PCROPConfig+0x154>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	628b      	str	r3, [r1, #40]	; 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003e5c:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <FLASH_OB_PCROPConfig+0x154>)
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	4a0e      	ldr	r2, [pc, #56]	; (8003e9c <FLASH_OB_PCROPConfig+0x154>)
 8003e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e66:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e6c:	f7ff fab8 	bl	80033e0 <FLASH_WaitForLastOperation>
 8003e70:	4603      	mov	r3, r0
 8003e72:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003e74:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <FLASH_OB_PCROPConfig+0x154>)
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	4a08      	ldr	r2, [pc, #32]	; (8003e9c <FLASH_OB_PCROPConfig+0x154>)
 8003e7a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e7e:	6153      	str	r3, [r2, #20]
  }

  return status;
 8003e80:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	1fff75e0 	.word	0x1fff75e0
 8003e94:	01fffe00 	.word	0x01fffe00
 8003e98:	08080000 	.word	0x08080000
 8003e9c:	40022000 	.word	0x40022000

08003ea0 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10b      	bne.n	8003eca <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <FLASH_OB_GetWRP+0x90>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 8003ebc:	4b1c      	ldr	r3, [pc, #112]	; (8003f30 <FLASH_OB_GetWRP+0x90>)
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	0c1b      	lsrs	r3, r3, #16
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 8003ec8:	e02b      	b.n	8003f22 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d10b      	bne.n	8003ee8 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8003ed0:	4b17      	ldr	r3, [pc, #92]	; (8003f30 <FLASH_OB_GetWRP+0x90>)
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <FLASH_OB_GetWRP+0x90>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	0c1b      	lsrs	r3, r3, #16
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	601a      	str	r2, [r3, #0]
}
 8003ee6:	e01c      	b.n	8003f22 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d10b      	bne.n	8003f06 <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <FLASH_OB_GetWRP+0x90>)
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <FLASH_OB_GetWRP+0x90>)
 8003efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efc:	0c1b      	lsrs	r3, r3, #16
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	601a      	str	r2, [r3, #0]
}
 8003f04:	e00d      	b.n	8003f22 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d10a      	bne.n	8003f22 <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <FLASH_OB_GetWRP+0x90>)
 8003f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <FLASH_OB_GetWRP+0x90>)
 8003f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1a:	0c1b      	lsrs	r3, r3, #16
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40022000 	.word	0x40022000

08003f34 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <FLASH_OB_GetRDP+0x30>)
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2baa      	cmp	r3, #170	; 0xaa
 8003f46:	d004      	beq.n	8003f52 <FLASH_OB_GetRDP+0x1e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2bcc      	cmp	r3, #204	; 0xcc
 8003f4c:	d001      	beq.n	8003f52 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 8003f4e:	23bb      	movs	r3, #187	; 0xbb
 8003f50:	e002      	b.n	8003f58 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 8003f52:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <FLASH_OB_GetRDP+0x30>)
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	b2db      	uxtb	r3, r3
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	40022000 	.word	0x40022000

08003f68 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <FLASH_OB_GetUser+0x24>)
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f7a:	607b      	str	r3, [r7, #4]

  return user_config;
 8003f7c:	687b      	ldr	r3, [r7, #4]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40022000 	.word	0x40022000

08003f90 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b089      	sub	sp, #36	; 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8003f9c:	4b3b      	ldr	r3, [pc, #236]	; (800408c <FLASH_OB_GetPCROP+0xfc>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d115      	bne.n	8003fd4 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 8003fa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fac:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8003fae:	4b38      	ldr	r3, [pc, #224]	; (8004090 <FLASH_OB_GetPCROP+0x100>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d008      	beq.n	8003fce <FLASH_OB_GetPCROP+0x3e>
 8003fbc:	4b34      	ldr	r3, [pc, #208]	; (8004090 <FLASH_OB_GetPCROP+0x100>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	029b      	lsls	r3, r3, #10
 8003fc2:	085a      	lsrs	r2, r3, #1
 8003fc4:	4b33      	ldr	r3, [pc, #204]	; (8004094 <FLASH_OB_GetPCROP+0x104>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003fcc:	e000      	b.n	8003fd0 <FLASH_OB_GetPCROP+0x40>
 8003fce:	4b32      	ldr	r3, [pc, #200]	; (8004098 <FLASH_OB_GetPCROP+0x108>)
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	e014      	b.n	8003ffe <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8003fd4:	4b2e      	ldr	r3, [pc, #184]	; (8004090 <FLASH_OB_GetPCROP+0x100>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d008      	beq.n	8003ff4 <FLASH_OB_GetPCROP+0x64>
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <FLASH_OB_GetPCROP+0x100>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	029b      	lsls	r3, r3, #10
 8003fe8:	085a      	lsrs	r2, r3, #1
 8003fea:	4b2a      	ldr	r3, [pc, #168]	; (8004094 <FLASH_OB_GetPCROP+0x104>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003ff2:	e000      	b.n	8003ff6 <FLASH_OB_GetPCROP+0x66>
 8003ff4:	4b28      	ldr	r3, [pc, #160]	; (8004098 <FLASH_OB_GetPCROP+0x108>)
 8003ff6:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 8003ff8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ffc:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d115      	bne.n	8004036 <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800400a:	4b24      	ldr	r3, [pc, #144]	; (800409c <FLASH_OB_GetPCROP+0x10c>)
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	b29b      	uxth	r3, r3
 8004010:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	00da      	lsls	r2, r3, #3
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	441a      	add	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 800401e:	4b1f      	ldr	r3, [pc, #124]	; (800409c <FLASH_OB_GetPCROP+0x10c>)
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	b29b      	uxth	r3, r3
 8004024:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	00da      	lsls	r2, r3, #3
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	1dda      	adds	r2, r3, #7
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	e01a      	b.n	800406c <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d114      	bne.n	800406c <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8004042:	4b16      	ldr	r3, [pc, #88]	; (800409c <FLASH_OB_GetPCROP+0x10c>)
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	b29b      	uxth	r3, r3
 8004048:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	00da      	lsls	r2, r3, #3
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	441a      	add	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8004056:	4b11      	ldr	r3, [pc, #68]	; (800409c <FLASH_OB_GetPCROP+0x10c>)
 8004058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405a:	b29b      	uxth	r3, r3
 800405c:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	00da      	lsls	r2, r3, #3
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	4413      	add	r3, r2
 8004066:	1dda      	adds	r2, r3, #7
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <FLASH_OB_GetPCROP+0x10c>)
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	431a      	orrs	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	601a      	str	r2, [r3, #0]
}
 800407e:	bf00      	nop
 8004080:	3724      	adds	r7, #36	; 0x24
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40010000 	.word	0x40010000
 8004090:	1fff75e0 	.word	0x1fff75e0
 8004094:	01fffe00 	.word	0x01fffe00
 8004098:	08080000 	.word	0x08080000
 800409c:	40022000 	.word	0x40022000

080040a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ae:	e17f      	b.n	80043b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	2101      	movs	r1, #1
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	fa01 f303 	lsl.w	r3, r1, r3
 80040bc:	4013      	ands	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 8171 	beq.w	80043aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d00b      	beq.n	80040e8 <HAL_GPIO_Init+0x48>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d007      	beq.n	80040e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040dc:	2b11      	cmp	r3, #17
 80040de:	d003      	beq.n	80040e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b12      	cmp	r3, #18
 80040e6:	d130      	bne.n	800414a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	2203      	movs	r2, #3
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4013      	ands	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800411e:	2201      	movs	r2, #1
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	f003 0201 	and.w	r2, r3, #1
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b03      	cmp	r3, #3
 8004154:	d118      	bne.n	8004188 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800415c:	2201      	movs	r2, #1
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4013      	ands	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	08db      	lsrs	r3, r3, #3
 8004172:	f003 0201 	and.w	r2, r3, #1
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0x128>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b12      	cmp	r3, #18
 80041c6:	d123      	bne.n	8004210 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	08da      	lsrs	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3208      	adds	r2, #8
 80041d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	220f      	movs	r2, #15
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	08da      	lsrs	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3208      	adds	r2, #8
 800420a:	6939      	ldr	r1, [r7, #16]
 800420c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	2203      	movs	r2, #3
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4013      	ands	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 0203 	and.w	r2, r3, #3
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80ac 	beq.w	80043aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004252:	4b5f      	ldr	r3, [pc, #380]	; (80043d0 <HAL_GPIO_Init+0x330>)
 8004254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004256:	4a5e      	ldr	r2, [pc, #376]	; (80043d0 <HAL_GPIO_Init+0x330>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	6613      	str	r3, [r2, #96]	; 0x60
 800425e:	4b5c      	ldr	r3, [pc, #368]	; (80043d0 <HAL_GPIO_Init+0x330>)
 8004260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800426a:	4a5a      	ldr	r2, [pc, #360]	; (80043d4 <HAL_GPIO_Init+0x334>)
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	3302      	adds	r3, #2
 8004272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004276:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	220f      	movs	r2, #15
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4013      	ands	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004294:	d025      	beq.n	80042e2 <HAL_GPIO_Init+0x242>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a4f      	ldr	r2, [pc, #316]	; (80043d8 <HAL_GPIO_Init+0x338>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01f      	beq.n	80042de <HAL_GPIO_Init+0x23e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a4e      	ldr	r2, [pc, #312]	; (80043dc <HAL_GPIO_Init+0x33c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d019      	beq.n	80042da <HAL_GPIO_Init+0x23a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a4d      	ldr	r2, [pc, #308]	; (80043e0 <HAL_GPIO_Init+0x340>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <HAL_GPIO_Init+0x236>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a4c      	ldr	r2, [pc, #304]	; (80043e4 <HAL_GPIO_Init+0x344>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00d      	beq.n	80042d2 <HAL_GPIO_Init+0x232>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a4b      	ldr	r2, [pc, #300]	; (80043e8 <HAL_GPIO_Init+0x348>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d007      	beq.n	80042ce <HAL_GPIO_Init+0x22e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a4a      	ldr	r2, [pc, #296]	; (80043ec <HAL_GPIO_Init+0x34c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d101      	bne.n	80042ca <HAL_GPIO_Init+0x22a>
 80042c6:	2306      	movs	r3, #6
 80042c8:	e00c      	b.n	80042e4 <HAL_GPIO_Init+0x244>
 80042ca:	2307      	movs	r3, #7
 80042cc:	e00a      	b.n	80042e4 <HAL_GPIO_Init+0x244>
 80042ce:	2305      	movs	r3, #5
 80042d0:	e008      	b.n	80042e4 <HAL_GPIO_Init+0x244>
 80042d2:	2304      	movs	r3, #4
 80042d4:	e006      	b.n	80042e4 <HAL_GPIO_Init+0x244>
 80042d6:	2303      	movs	r3, #3
 80042d8:	e004      	b.n	80042e4 <HAL_GPIO_Init+0x244>
 80042da:	2302      	movs	r3, #2
 80042dc:	e002      	b.n	80042e4 <HAL_GPIO_Init+0x244>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <HAL_GPIO_Init+0x244>
 80042e2:	2300      	movs	r3, #0
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	f002 0203 	and.w	r2, r2, #3
 80042ea:	0092      	lsls	r2, r2, #2
 80042ec:	4093      	lsls	r3, r2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042f4:	4937      	ldr	r1, [pc, #220]	; (80043d4 <HAL_GPIO_Init+0x334>)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	089b      	lsrs	r3, r3, #2
 80042fa:	3302      	adds	r3, #2
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004302:	4b3b      	ldr	r3, [pc, #236]	; (80043f0 <HAL_GPIO_Init+0x350>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	43db      	mvns	r3, r3
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4013      	ands	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004326:	4a32      	ldr	r2, [pc, #200]	; (80043f0 <HAL_GPIO_Init+0x350>)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800432c:	4b30      	ldr	r3, [pc, #192]	; (80043f0 <HAL_GPIO_Init+0x350>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	43db      	mvns	r3, r3
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4013      	ands	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004350:	4a27      	ldr	r2, [pc, #156]	; (80043f0 <HAL_GPIO_Init+0x350>)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004356:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <HAL_GPIO_Init+0x350>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	43db      	mvns	r3, r3
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4013      	ands	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800437a:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <HAL_GPIO_Init+0x350>)
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004380:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <HAL_GPIO_Init+0x350>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	43db      	mvns	r3, r3
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4013      	ands	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043a4:	4a12      	ldr	r2, [pc, #72]	; (80043f0 <HAL_GPIO_Init+0x350>)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	3301      	adds	r3, #1
 80043ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f47f ae78 	bne.w	80040b0 <HAL_GPIO_Init+0x10>
  }
}
 80043c0:	bf00      	nop
 80043c2:	bf00      	nop
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40010000 	.word	0x40010000
 80043d8:	48000400 	.word	0x48000400
 80043dc:	48000800 	.word	0x48000800
 80043e0:	48000c00 	.word	0x48000c00
 80043e4:	48001000 	.word	0x48001000
 80043e8:	48001400 	.word	0x48001400
 80043ec:	48001800 	.word	0x48001800
 80043f0:	40010400 	.word	0x40010400

080043f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004402:	e0cd      	b.n	80045a0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004404:	2201      	movs	r2, #1
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80c0 	beq.w	800459a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800441a:	4a68      	ldr	r2, [pc, #416]	; (80045bc <HAL_GPIO_DeInit+0x1c8>)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	089b      	lsrs	r3, r3, #2
 8004420:	3302      	adds	r3, #2
 8004422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004426:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	220f      	movs	r2, #15
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4013      	ands	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004442:	d025      	beq.n	8004490 <HAL_GPIO_DeInit+0x9c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a5e      	ldr	r2, [pc, #376]	; (80045c0 <HAL_GPIO_DeInit+0x1cc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d01f      	beq.n	800448c <HAL_GPIO_DeInit+0x98>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a5d      	ldr	r2, [pc, #372]	; (80045c4 <HAL_GPIO_DeInit+0x1d0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d019      	beq.n	8004488 <HAL_GPIO_DeInit+0x94>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a5c      	ldr	r2, [pc, #368]	; (80045c8 <HAL_GPIO_DeInit+0x1d4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <HAL_GPIO_DeInit+0x90>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a5b      	ldr	r2, [pc, #364]	; (80045cc <HAL_GPIO_DeInit+0x1d8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00d      	beq.n	8004480 <HAL_GPIO_DeInit+0x8c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a5a      	ldr	r2, [pc, #360]	; (80045d0 <HAL_GPIO_DeInit+0x1dc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d007      	beq.n	800447c <HAL_GPIO_DeInit+0x88>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a59      	ldr	r2, [pc, #356]	; (80045d4 <HAL_GPIO_DeInit+0x1e0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d101      	bne.n	8004478 <HAL_GPIO_DeInit+0x84>
 8004474:	2306      	movs	r3, #6
 8004476:	e00c      	b.n	8004492 <HAL_GPIO_DeInit+0x9e>
 8004478:	2307      	movs	r3, #7
 800447a:	e00a      	b.n	8004492 <HAL_GPIO_DeInit+0x9e>
 800447c:	2305      	movs	r3, #5
 800447e:	e008      	b.n	8004492 <HAL_GPIO_DeInit+0x9e>
 8004480:	2304      	movs	r3, #4
 8004482:	e006      	b.n	8004492 <HAL_GPIO_DeInit+0x9e>
 8004484:	2303      	movs	r3, #3
 8004486:	e004      	b.n	8004492 <HAL_GPIO_DeInit+0x9e>
 8004488:	2302      	movs	r3, #2
 800448a:	e002      	b.n	8004492 <HAL_GPIO_DeInit+0x9e>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <HAL_GPIO_DeInit+0x9e>
 8004490:	2300      	movs	r3, #0
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	f002 0203 	and.w	r2, r2, #3
 8004498:	0092      	lsls	r2, r2, #2
 800449a:	4093      	lsls	r3, r2
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d132      	bne.n	8004508 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80044a2:	4b4d      	ldr	r3, [pc, #308]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	494b      	ldr	r1, [pc, #300]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80044b0:	4b49      	ldr	r3, [pc, #292]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	43db      	mvns	r3, r3
 80044b8:	4947      	ldr	r1, [pc, #284]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80044be:	4b46      	ldr	r3, [pc, #280]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	4944      	ldr	r1, [pc, #272]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80044cc:	4b42      	ldr	r3, [pc, #264]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	4940      	ldr	r1, [pc, #256]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	220f      	movs	r2, #15
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80044ea:	4a34      	ldr	r2, [pc, #208]	; (80045bc <HAL_GPIO_DeInit+0x1c8>)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	3302      	adds	r3, #2
 80044f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	43da      	mvns	r2, r3
 80044fa:	4830      	ldr	r0, [pc, #192]	; (80045bc <HAL_GPIO_DeInit+0x1c8>)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	400a      	ands	r2, r1
 8004502:	3302      	adds	r3, #2
 8004504:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	2103      	movs	r1, #3
 8004512:	fa01 f303 	lsl.w	r3, r1, r3
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	08da      	lsrs	r2, r3, #3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3208      	adds	r2, #8
 8004524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	220f      	movs	r2, #15
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	08d2      	lsrs	r2, r2, #3
 800453c:	4019      	ands	r1, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3208      	adds	r2, #8
 8004542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	2103      	movs	r1, #3
 8004550:	fa01 f303 	lsl.w	r3, r1, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	401a      	ands	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	2101      	movs	r1, #1
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	43db      	mvns	r3, r3
 800456a:	401a      	ands	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	2103      	movs	r1, #3
 800457a:	fa01 f303 	lsl.w	r3, r1, r3
 800457e:	43db      	mvns	r3, r3
 8004580:	401a      	ands	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458a:	2101      	movs	r1, #1
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	fa01 f303 	lsl.w	r3, r1, r3
 8004592:	43db      	mvns	r3, r3
 8004594:	401a      	ands	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	3301      	adds	r3, #1
 800459e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	fa22 f303 	lsr.w	r3, r2, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f47f af2b 	bne.w	8004404 <HAL_GPIO_DeInit+0x10>
  }
}
 80045ae:	bf00      	nop
 80045b0:	bf00      	nop
 80045b2:	371c      	adds	r7, #28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	40010000 	.word	0x40010000
 80045c0:	48000400 	.word	0x48000400
 80045c4:	48000800 	.word	0x48000800
 80045c8:	48000c00 	.word	0x48000c00
 80045cc:	48001000 	.word	0x48001000
 80045d0:	48001400 	.word	0x48001400
 80045d4:	48001800 	.word	0x48001800
 80045d8:	40010400 	.word	0x40010400

080045dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
 80045f8:	e001      	b.n	80045fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800461c:	787b      	ldrb	r3, [r7, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004628:	e002      	b.n	8004630 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800462a:	887a      	ldrh	r2, [r7, #2]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800464e:	887a      	ldrh	r2, [r7, #2]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4013      	ands	r3, r2
 8004654:	041a      	lsls	r2, r3, #16
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	43d9      	mvns	r1, r3
 800465a:	887b      	ldrh	r3, [r7, #2]
 800465c:	400b      	ands	r3, r1
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	619a      	str	r2, [r3, #24]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bits to be locked.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800467c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004680:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8004682:	887a      	ldrh	r2, [r7, #2]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8004690:	887a      	ldrh	r2, [r7, #2]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	61da      	str	r2, [r3, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00u)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	e000      	b.n	80046b4 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
  }
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d006      	beq.n	80046e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046d6:	4a05      	ldr	r2, [pc, #20]	; (80046ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f806 	bl	80046f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40010400 	.word	0x40010400

080046f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e081      	b.n	800481c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d106      	bne.n	8004732 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f8a8 	bl	8004882 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2224      	movs	r2, #36	; 0x24
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004756:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004766:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d107      	bne.n	8004780 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800477c:	609a      	str	r2, [r3, #8]
 800477e:	e006      	b.n	800478e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800478c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d104      	bne.n	80047a0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800479e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	ea42 0103 	orr.w	r1, r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	021a      	lsls	r2, r3, #8
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69d9      	ldr	r1, [r3, #28]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1a      	ldr	r2, [r3, #32]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0201 	orr.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e021      	b.n	800487a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2224      	movs	r2, #36	; 0x24
 800483a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f821 	bl	8004896 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	607a      	str	r2, [r7, #4]
 80048b6:	461a      	mov	r2, r3
 80048b8:	460b      	mov	r3, r1
 80048ba:	817b      	strh	r3, [r7, #10]
 80048bc:	4613      	mov	r3, r2
 80048be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	f040 80da 	bne.w	8004a82 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_I2C_Master_Transmit+0x30>
 80048d8:	2302      	movs	r3, #2
 80048da:	e0d3      	b.n	8004a84 <HAL_I2C_Master_Transmit+0x1d8>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048e4:	f7fc feb4 	bl	8001650 <HAL_GetTick>
 80048e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	2319      	movs	r3, #25
 80048f0:	2201      	movs	r2, #1
 80048f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f004 f973 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e0be      	b.n	8004a84 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2221      	movs	r2, #33	; 0x21
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2210      	movs	r2, #16
 8004912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	893a      	ldrh	r2, [r7, #8]
 8004926:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	2bff      	cmp	r3, #255	; 0xff
 8004936:	d90e      	bls.n	8004956 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	22ff      	movs	r2, #255	; 0xff
 800493c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004942:	b2da      	uxtb	r2, r3
 8004944:	8979      	ldrh	r1, [r7, #10]
 8004946:	4b51      	ldr	r3, [pc, #324]	; (8004a8c <HAL_I2C_Master_Transmit+0x1e0>)
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f004 fad6 	bl	8008f00 <I2C_TransferConfig>
 8004954:	e06c      	b.n	8004a30 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004964:	b2da      	uxtb	r2, r3
 8004966:	8979      	ldrh	r1, [r7, #10]
 8004968:	4b48      	ldr	r3, [pc, #288]	; (8004a8c <HAL_I2C_Master_Transmit+0x1e0>)
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f004 fac5 	bl	8008f00 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004976:	e05b      	b.n	8004a30 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	6a39      	ldr	r1, [r7, #32]
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f004 f970 	bl	8008c62 <I2C_WaitOnTXISFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e07b      	b.n	8004a84 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d034      	beq.n	8004a30 <HAL_I2C_Master_Transmit+0x184>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d130      	bne.n	8004a30 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	2200      	movs	r2, #0
 80049d6:	2180      	movs	r1, #128	; 0x80
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f004 f902 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e04d      	b.n	8004a84 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2bff      	cmp	r3, #255	; 0xff
 80049f0:	d90e      	bls.n	8004a10 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	22ff      	movs	r2, #255	; 0xff
 80049f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	8979      	ldrh	r1, [r7, #10]
 8004a00:	2300      	movs	r3, #0
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f004 fa79 	bl	8008f00 <I2C_TransferConfig>
 8004a0e:	e00f      	b.n	8004a30 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	8979      	ldrh	r1, [r7, #10]
 8004a22:	2300      	movs	r3, #0
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f004 fa68 	bl	8008f00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d19e      	bne.n	8004978 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	6a39      	ldr	r1, [r7, #32]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f004 f94f 	bl	8008ce2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e01a      	b.n	8004a84 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2220      	movs	r2, #32
 8004a54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6859      	ldr	r1, [r3, #4]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_I2C_Master_Transmit+0x1e4>)
 8004a62:	400b      	ands	r3, r1
 8004a64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e000      	b.n	8004a84 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004a82:	2302      	movs	r3, #2
  }
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	80002000 	.word	0x80002000
 8004a90:	fe00e800 	.word	0xfe00e800

08004a94 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	817b      	strh	r3, [r7, #10]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	f040 80db 	bne.w	8004c6c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_I2C_Master_Receive+0x30>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e0d4      	b.n	8004c6e <HAL_I2C_Master_Receive+0x1da>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004acc:	f7fc fdc0 	bl	8001650 <HAL_GetTick>
 8004ad0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	2319      	movs	r3, #25
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f004 f87f 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e0bf      	b.n	8004c6e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2222      	movs	r2, #34	; 0x22
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2210      	movs	r2, #16
 8004afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	893a      	ldrh	r2, [r7, #8]
 8004b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2bff      	cmp	r3, #255	; 0xff
 8004b1e:	d90e      	bls.n	8004b3e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	22ff      	movs	r2, #255	; 0xff
 8004b24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	8979      	ldrh	r1, [r7, #10]
 8004b2e:	4b52      	ldr	r3, [pc, #328]	; (8004c78 <HAL_I2C_Master_Receive+0x1e4>)
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f004 f9e2 	bl	8008f00 <I2C_TransferConfig>
 8004b3c:	e06d      	b.n	8004c1a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	8979      	ldrh	r1, [r7, #10]
 8004b50:	4b49      	ldr	r3, [pc, #292]	; (8004c78 <HAL_I2C_Master_Receive+0x1e4>)
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f004 f9d1 	bl	8008f00 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004b5e:	e05c      	b.n	8004c1a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	6a39      	ldr	r1, [r7, #32]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f004 f8f9 	bl	8008d5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e07c      	b.n	8004c6e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d034      	beq.n	8004c1a <HAL_I2C_Master_Receive+0x186>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d130      	bne.n	8004c1a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2180      	movs	r1, #128	; 0x80
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f004 f80d 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e04d      	b.n	8004c6e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2bff      	cmp	r3, #255	; 0xff
 8004bda:	d90e      	bls.n	8004bfa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	22ff      	movs	r2, #255	; 0xff
 8004be0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	8979      	ldrh	r1, [r7, #10]
 8004bea:	2300      	movs	r3, #0
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f004 f984 	bl	8008f00 <I2C_TransferConfig>
 8004bf8:	e00f      	b.n	8004c1a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	8979      	ldrh	r1, [r7, #10]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f004 f973 	bl	8008f00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d19d      	bne.n	8004b60 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	6a39      	ldr	r1, [r7, #32]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f004 f85a 	bl	8008ce2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e01a      	b.n	8004c6e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6859      	ldr	r1, [r3, #4]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <HAL_I2C_Master_Receive+0x1e8>)
 8004c4c:	400b      	ands	r3, r1
 8004c4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	e000      	b.n	8004c6e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004c6c:	2302      	movs	r3, #2
  }
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	80002400 	.word	0x80002400
 8004c7c:	fe00e800 	.word	0xfe00e800

08004c80 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	f040 80f5 	bne.w	8004e88 <HAL_I2C_Slave_Transmit+0x208>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_I2C_Slave_Transmit+0x2a>
 8004ca4:	88fb      	ldrh	r3, [r7, #6]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d105      	bne.n	8004cb6 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e0e9      	b.n	8004e8a <HAL_I2C_Slave_Transmit+0x20a>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_I2C_Slave_Transmit+0x44>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e0e2      	b.n	8004e8a <HAL_I2C_Slave_Transmit+0x20a>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ccc:	f7fc fcc0 	bl	8001650 <HAL_GetTick>
 8004cd0:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2221      	movs	r2, #33	; 0x21
 8004cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	88fa      	ldrh	r2, [r7, #6]
 8004cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d08:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2200      	movs	r2, #0
 8004d12:	2108      	movs	r1, #8
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f003 ff64 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d009      	beq.n	8004d34 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d2e:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0aa      	b.n	8004e8a <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2208      	movs	r2, #8
 8004d3a:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d118      	bne.n	8004d76 <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2108      	movs	r1, #8
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f003 ff47 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d68:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e08d      	b.n	8004e8a <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2208      	movs	r2, #8
 8004d74:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f003 ff2d 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d02d      	beq.n	8004dea <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d9c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e073      	b.n	8004e8a <HAL_I2C_Slave_Transmit+0x20a>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	6839      	ldr	r1, [r7, #0]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f003 ff5b 	bl	8008c62 <I2C_WaitOnTXISFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dc0:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e061      	b.n	8004e8a <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	781a      	ldrb	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1d6      	bne.n	8004da2 <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	6839      	ldr	r1, [r7, #0]
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f003 ff72 	bl	8008ce2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d011      	beq.n	8004e28 <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e12:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d103      	bne.n	8004e24 <HAL_I2C_Slave_Transmit+0x1a4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	645a      	str	r2, [r3, #68]	; 0x44
 8004e22:	e001      	b.n	8004e28 <HAL_I2C_Slave_Transmit+0x1a8>
      }
      else
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e030      	b.n	8004e8a <HAL_I2C_Slave_Transmit+0x20a>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f003 fed0 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d009      	beq.n	8004e5c <HAL_I2C_Slave_Transmit+0x1dc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e56:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e016      	b.n	8004e8a <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e6a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e000      	b.n	8004e8a <HAL_I2C_Slave_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8004e88:	2302      	movs	r3, #2
  }
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b088      	sub	sp, #32
 8004e96:	af02      	add	r7, sp, #8
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	f040 80eb 	bne.w	8005086 <HAL_I2C_Slave_Receive+0x1f4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_I2C_Slave_Receive+0x2a>
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d105      	bne.n	8004ec8 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ec2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0df      	b.n	8005088 <HAL_I2C_Slave_Receive+0x1f6>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <HAL_I2C_Slave_Receive+0x44>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e0d8      	b.n	8005088 <HAL_I2C_Slave_Receive+0x1f6>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ede:	f7fc fbb7 	bl	8001650 <HAL_GetTick>
 8004ee2:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2222      	movs	r2, #34	; 0x22
 8004ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	88fa      	ldrh	r2, [r7, #6]
 8004f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f1a:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2200      	movs	r2, #0
 8004f24:	2108      	movs	r1, #8
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f003 fe5b 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <HAL_I2C_Slave_Receive+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f40:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e0a0      	b.n	8005088 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2208      	movs	r2, #8
 8004f4c:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f003 fe41 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d048      	beq.n	8004ff8 <HAL_I2C_Slave_Receive+0x166>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f74:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e086      	b.n	8005088 <HAL_I2C_Slave_Receive+0x1f6>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f003 feec 	bl	8008d5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d023      	beq.n	8004fd2 <HAL_I2C_Slave_Receive+0x140>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f98:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d112      	bne.n	8004fce <HAL_I2C_Slave_Receive+0x13c>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e05a      	b.n	8005088 <HAL_I2C_Slave_Receive+0x1f6>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1bb      	bne.n	8004f7a <HAL_I2C_Slave_Receive+0xe8>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f003 fe6b 	bl	8008ce2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d009      	beq.n	8005026 <HAL_I2C_Slave_Receive+0x194>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005020:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e030      	b.n	8005088 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2220      	movs	r2, #32
 800502c:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2201      	movs	r2, #1
 8005036:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f003 fdd1 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d009      	beq.n	800505a <HAL_I2C_Slave_Receive+0x1c8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005054:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e016      	b.n	8005088 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005068:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e000      	b.n	8005088 <HAL_I2C_Slave_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 8005086:	2302      	movs	r3, #2
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	461a      	mov	r2, r3
 800509c:	460b      	mov	r3, r1
 800509e:	817b      	strh	r3, [r7, #10]
 80050a0:	4613      	mov	r3, r2
 80050a2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d153      	bne.n	8005158 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050be:	d101      	bne.n	80050c4 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80050c0:	2302      	movs	r3, #2
 80050c2:	e04a      	b.n	800515a <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_I2C_Master_Transmit_IT+0x42>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e043      	b.n	800515a <HAL_I2C_Master_Transmit_IT+0xca>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2221      	movs	r2, #33	; 0x21
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2210      	movs	r2, #16
 80050e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	893a      	ldrh	r2, [r7, #8]
 80050fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4a19      	ldr	r2, [pc, #100]	; (8005164 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8005100:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4a18      	ldr	r2, [pc, #96]	; (8005168 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8005106:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510c:	b29b      	uxth	r3, r3
 800510e:	2bff      	cmp	r3, #255	; 0xff
 8005110:	d906      	bls.n	8005120 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	22ff      	movs	r2, #255	; 0xff
 8005116:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e007      	b.n	8005130 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800512a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800512e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005134:	b2da      	uxtb	r2, r3
 8005136:	8979      	ldrh	r1, [r7, #10]
 8005138:	4b0c      	ldr	r3, [pc, #48]	; (800516c <HAL_I2C_Master_Transmit_IT+0xdc>)
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f003 fede 	bl	8008f00 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800514c:	2101      	movs	r1, #1
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f003 ff04 	bl	8008f5c <I2C_Enable_IRQ>

    return HAL_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	e000      	b.n	800515a <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005158:	2302      	movs	r3, #2
  }
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	ffff0000 	.word	0xffff0000
 8005168:	080077af 	.word	0x080077af
 800516c:	80002000 	.word	0x80002000

08005170 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	607a      	str	r2, [r7, #4]
 800517a:	461a      	mov	r2, r3
 800517c:	460b      	mov	r3, r1
 800517e:	817b      	strh	r3, [r7, #10]
 8005180:	4613      	mov	r3, r2
 8005182:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b20      	cmp	r3, #32
 800518e:	d153      	bne.n	8005238 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800519a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800519e:	d101      	bne.n	80051a4 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80051a0:	2302      	movs	r3, #2
 80051a2:	e04a      	b.n	800523a <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_I2C_Master_Receive_IT+0x42>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e043      	b.n	800523a <HAL_I2C_Master_Receive_IT+0xca>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2222      	movs	r2, #34	; 0x22
 80051be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2210      	movs	r2, #16
 80051c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	893a      	ldrh	r2, [r7, #8]
 80051da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4a19      	ldr	r2, [pc, #100]	; (8005244 <HAL_I2C_Master_Receive_IT+0xd4>)
 80051e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4a18      	ldr	r2, [pc, #96]	; (8005248 <HAL_I2C_Master_Receive_IT+0xd8>)
 80051e6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2bff      	cmp	r3, #255	; 0xff
 80051f0:	d906      	bls.n	8005200 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	22ff      	movs	r2, #255	; 0xff
 80051f6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80051f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	e007      	b.n	8005210 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800520a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800520e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005214:	b2da      	uxtb	r2, r3
 8005216:	8979      	ldrh	r1, [r7, #10]
 8005218:	4b0c      	ldr	r3, [pc, #48]	; (800524c <HAL_I2C_Master_Receive_IT+0xdc>)
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f003 fe6e 	bl	8008f00 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800522c:	2102      	movs	r1, #2
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f003 fe94 	bl	8008f5c <I2C_Enable_IRQ>

    return HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	e000      	b.n	800523a <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005238:	2302      	movs	r3, #2
  }
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	ffff0000 	.word	0xffff0000
 8005248:	080077af 	.word	0x080077af
 800524c:	80002400 	.word	0x80002400

08005250 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	4613      	mov	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b20      	cmp	r3, #32
 8005268:	d139      	bne.n	80052de <HAL_I2C_Slave_Transmit_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_I2C_Slave_Transmit_IT+0x28>
 8005274:	2302      	movs	r3, #2
 8005276:	e033      	b.n	80052e0 <HAL_I2C_Slave_Transmit_IT+0x90>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2221      	movs	r2, #33	; 0x21
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052a4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a0a      	ldr	r2, [pc, #40]	; (80052e8 <HAL_I2C_Slave_Transmit_IT+0x98>)
 80052c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4a09      	ldr	r2, [pc, #36]	; (80052ec <HAL_I2C_Slave_Transmit_IT+0x9c>)
 80052c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80052d0:	f248 0101 	movw	r1, #32769	; 0x8001
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f003 fe41 	bl	8008f5c <I2C_Enable_IRQ>

    return HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	e000      	b.n	80052e0 <HAL_I2C_Slave_Transmit_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 80052de:	2302      	movs	r3, #2
  }
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	ffff0000 	.word	0xffff0000
 80052ec:	080079ff 	.word	0x080079ff

080052f0 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	4613      	mov	r3, r2
 80052fc:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b20      	cmp	r3, #32
 8005308:	d139      	bne.n	800537e <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_I2C_Slave_Receive_IT+0x28>
 8005314:	2302      	movs	r3, #2
 8005316:	e033      	b.n	8005380 <HAL_I2C_Slave_Receive_IT+0x90>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2222      	movs	r2, #34	; 0x22
 8005324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005344:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	88fa      	ldrh	r2, [r7, #6]
 8005350:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4a0a      	ldr	r2, [pc, #40]	; (8005388 <HAL_I2C_Slave_Receive_IT+0x98>)
 8005360:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4a09      	ldr	r2, [pc, #36]	; (800538c <HAL_I2C_Slave_Receive_IT+0x9c>)
 8005366:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8005370:	f248 0102 	movw	r1, #32770	; 0x8002
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f003 fdf1 	bl	8008f5c <I2C_Enable_IRQ>

    return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e000      	b.n	8005380 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 800537e:	2302      	movs	r3, #2
  }
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	ffff0000 	.word	0xffff0000
 800538c:	080079ff 	.word	0x080079ff

08005390 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	461a      	mov	r2, r3
 800539c:	460b      	mov	r3, r1
 800539e:	817b      	strh	r3, [r7, #10]
 80053a0:	4613      	mov	r3, r2
 80053a2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	f040 80cd 	bne.w	800554c <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c0:	d101      	bne.n	80053c6 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
 80053c4:	e0c3      	b.n	800554e <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_I2C_Master_Transmit_DMA+0x44>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e0bc      	b.n	800554e <HAL_I2C_Master_Transmit_DMA+0x1be>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2221      	movs	r2, #33	; 0x21
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2210      	movs	r2, #16
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	893a      	ldrh	r2, [r7, #8]
 80053fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4a55      	ldr	r2, [pc, #340]	; (8005558 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 8005402:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4a55      	ldr	r2, [pc, #340]	; (800555c <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8005408:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540e:	b29b      	uxth	r3, r3
 8005410:	2bff      	cmp	r3, #255	; 0xff
 8005412:	d906      	bls.n	8005422 <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	22ff      	movs	r2, #255	; 0xff
 8005418:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800541a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	e007      	b.n	8005432 <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800542c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005430:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005436:	2b00      	cmp	r3, #0
 8005438:	d070      	beq.n	800551c <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	2b00      	cmp	r3, #0
 8005440:	d020      	beq.n	8005484 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	4a46      	ldr	r2, [pc, #280]	; (8005560 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8005448:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	4a45      	ldr	r2, [pc, #276]	; (8005564 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 8005450:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	2200      	movs	r2, #0
 8005458:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	2200      	movs	r2, #0
 8005460:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3328      	adds	r3, #40	; 0x28
 800546e:	461a      	mov	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005474:	f7fc ff97 	bl	80023a6 <HAL_DMA_Start_IT>
 8005478:	4603      	mov	r3, r0
 800547a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800547c:	7cfb      	ldrb	r3, [r7, #19]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d138      	bne.n	80054f4 <HAL_I2C_Master_Transmit_DMA+0x164>
 8005482:	e013      	b.n	80054ac <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005498:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e050      	b.n	800554e <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	8979      	ldrh	r1, [r7, #10]
 80054b4:	4b2c      	ldr	r3, [pc, #176]	; (8005568 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f003 fd20 	bl	8008f00 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80054da:	2110      	movs	r1, #16
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f003 fd3d 	bl	8008f5c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e029      	b.n	8005548 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005508:	f043 0210 	orr.w	r2, r3, #16
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e018      	b.n	800554e <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4a13      	ldr	r2, [pc, #76]	; (800556c <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8005520:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005526:	b2da      	uxtb	r2, r3
 8005528:	8979      	ldrh	r1, [r7, #10]
 800552a:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f003 fce4 	bl	8008f00 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005540:	2101      	movs	r1, #1
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f003 fd0a 	bl	8008f5c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	e000      	b.n	800554e <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800554c:	2302      	movs	r3, #2
  }
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	ffff0000 	.word	0xffff0000
 800555c:	08007c05 	.word	0x08007c05
 8005560:	080089c7 	.word	0x080089c7
 8005564:	08008b79 	.word	0x08008b79
 8005568:	80002000 	.word	0x80002000
 800556c:	080077af 	.word	0x080077af

08005570 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af02      	add	r7, sp, #8
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	461a      	mov	r2, r3
 800557c:	460b      	mov	r3, r1
 800557e:	817b      	strh	r3, [r7, #10]
 8005580:	4613      	mov	r3, r2
 8005582:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b20      	cmp	r3, #32
 800558e:	f040 80cd 	bne.w	800572c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800559c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a0:	d101      	bne.n	80055a6 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80055a2:	2302      	movs	r3, #2
 80055a4:	e0c3      	b.n	800572e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_I2C_Master_Receive_DMA+0x44>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e0bc      	b.n	800572e <HAL_I2C_Master_Receive_DMA+0x1be>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2222      	movs	r2, #34	; 0x22
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2210      	movs	r2, #16
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	893a      	ldrh	r2, [r7, #8]
 80055dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4a55      	ldr	r2, [pc, #340]	; (8005738 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80055e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4a55      	ldr	r2, [pc, #340]	; (800573c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80055e8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2bff      	cmp	r3, #255	; 0xff
 80055f2:	d906      	bls.n	8005602 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	22ff      	movs	r2, #255	; 0xff
 80055f8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80055fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	e007      	b.n	8005612 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005606:	b29a      	uxth	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800560c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005610:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005616:	2b00      	cmp	r3, #0
 8005618:	d070      	beq.n	80056fc <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d020      	beq.n	8005664 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005626:	4a46      	ldr	r2, [pc, #280]	; (8005740 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005628:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562e:	4a45      	ldr	r2, [pc, #276]	; (8005744 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005630:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005636:	2200      	movs	r2, #0
 8005638:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563e:	2200      	movs	r2, #0
 8005640:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3324      	adds	r3, #36	; 0x24
 800564c:	4619      	mov	r1, r3
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005654:	f7fc fea7 	bl	80023a6 <HAL_DMA_Start_IT>
 8005658:	4603      	mov	r3, r0
 800565a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800565c:	7cfb      	ldrb	r3, [r7, #19]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d138      	bne.n	80056d4 <HAL_I2C_Master_Receive_DMA+0x164>
 8005662:	e013      	b.n	800568c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005678:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e050      	b.n	800572e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005690:	b2da      	uxtb	r2, r3
 8005692:	8979      	ldrh	r1, [r7, #10]
 8005694:	4b2c      	ldr	r3, [pc, #176]	; (8005748 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f003 fc30 	bl	8008f00 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80056ba:	2110      	movs	r1, #16
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f003 fc4d 	bl	8008f5c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	e029      	b.n	8005728 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e8:	f043 0210 	orr.w	r2, r3, #16
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e018      	b.n	800572e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4a13      	ldr	r2, [pc, #76]	; (800574c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8005700:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005706:	b2da      	uxtb	r2, r3
 8005708:	8979      	ldrh	r1, [r7, #10]
 800570a:	4b0f      	ldr	r3, [pc, #60]	; (8005748 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f003 fbf4 	bl	8008f00 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005720:	2101      	movs	r1, #1
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f003 fc1a 	bl	8008f5c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	e000      	b.n	800572e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800572c:	2302      	movs	r3, #2
  }
}
 800572e:	4618      	mov	r0, r3
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	ffff0000 	.word	0xffff0000
 800573c:	08007c05 	.word	0x08007c05
 8005740:	08008a9d 	.word	0x08008a9d
 8005744:	08008b79 	.word	0x08008b79
 8005748:	80002400 	.word	0x80002400
 800574c:	080077af 	.word	0x080077af

08005750 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	4613      	mov	r3, r2
 800575c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b20      	cmp	r3, #32
 8005768:	f040 809b 	bne.w	80058a2 <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <HAL_I2C_Slave_Transmit_DMA+0x28>
 8005772:	88fb      	ldrh	r3, [r7, #6]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d105      	bne.n	8005784 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800577e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e08f      	b.n	80058a4 <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_I2C_Slave_Transmit_DMA+0x42>
 800578e:	2302      	movs	r3, #2
 8005790:	e088      	b.n	80058a4 <HAL_I2C_Slave_Transmit_DMA+0x154>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2221      	movs	r2, #33	; 0x21
 800579e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	88fa      	ldrh	r2, [r7, #6]
 80057ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4a38      	ldr	r2, [pc, #224]	; (80058ac <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 80057ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4a38      	ldr	r2, [pc, #224]	; (80058b0 <HAL_I2C_Slave_Transmit_DMA+0x160>)
 80057d0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d020      	beq.n	800581c <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	4a35      	ldr	r2, [pc, #212]	; (80058b4 <HAL_I2C_Slave_Transmit_DMA+0x164>)
 80057e0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	4a34      	ldr	r2, [pc, #208]	; (80058b8 <HAL_I2C_Slave_Transmit_DMA+0x168>)
 80057e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ee:	2200      	movs	r2, #0
 80057f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	2200      	movs	r2, #0
 80057f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3328      	adds	r3, #40	; 0x28
 8005806:	461a      	mov	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580c:	f7fc fdcb 	bl	80023a6 <HAL_DMA_Start_IT>
 8005810:	4603      	mov	r3, r0
 8005812:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d12f      	bne.n	800587a <HAL_I2C_Slave_Transmit_DMA+0x12a>
 800581a:	e013      	b.n	8005844 <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2228      	movs	r2, #40	; 0x28
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005830:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e02f      	b.n	80058a4 <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005852:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800585c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f003 fb7b 	bl	8008f5c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005874:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	e014      	b.n	80058a4 <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2228      	movs	r2, #40	; 0x28
 800587e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588e:	f043 0210 	orr.w	r2, r3, #16
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 80058a2:	2302      	movs	r3, #2
  }
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	ffff0000 	.word	0xffff0000
 80058b0:	08007deb 	.word	0x08007deb
 80058b4:	08008a5d 	.word	0x08008a5d
 80058b8:	08008b79 	.word	0x08008b79

080058bc <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	4613      	mov	r3, r2
 80058c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b20      	cmp	r3, #32
 80058d4:	f040 809b 	bne.w	8005a0e <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_I2C_Slave_Receive_DMA+0x28>
 80058de:	88fb      	ldrh	r3, [r7, #6]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d105      	bne.n	80058f0 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e08f      	b.n	8005a10 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_I2C_Slave_Receive_DMA+0x42>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e088      	b.n	8005a10 <HAL_I2C_Slave_Receive_DMA+0x154>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2222      	movs	r2, #34	; 0x22
 800590a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	88fa      	ldrh	r2, [r7, #6]
 8005926:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a38      	ldr	r2, [pc, #224]	; (8005a18 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005936:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4a38      	ldr	r2, [pc, #224]	; (8005a1c <HAL_I2C_Slave_Receive_DMA+0x160>)
 800593c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d020      	beq.n	8005988 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	4a35      	ldr	r2, [pc, #212]	; (8005a20 <HAL_I2C_Slave_Receive_DMA+0x164>)
 800594c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005952:	4a34      	ldr	r2, [pc, #208]	; (8005a24 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005954:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595a:	2200      	movs	r2, #0
 800595c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005962:	2200      	movs	r2, #0
 8005964:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3324      	adds	r3, #36	; 0x24
 8005970:	4619      	mov	r1, r3
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005978:	f7fc fd15 	bl	80023a6 <HAL_DMA_Start_IT>
 800597c:	4603      	mov	r3, r0
 800597e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d12f      	bne.n	80059e6 <HAL_I2C_Slave_Receive_DMA+0x12a>
 8005986:	e013      	b.n	80059b0 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2228      	movs	r2, #40	; 0x28
 800598c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e02f      	b.n	8005a10 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059be:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80059c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f003 fac5 	bl	8008f5c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059e0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	e014      	b.n	8005a10 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2228      	movs	r2, #40	; 0x28
 80059ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	f043 0210 	orr.w	r2, r3, #16
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005a0e:	2302      	movs	r3, #2
  }
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	ffff0000 	.word	0xffff0000
 8005a1c:	08007deb 	.word	0x08007deb
 8005a20:	08008b33 	.word	0x08008b33
 8005a24:	08008b79 	.word	0x08008b79

08005a28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	4608      	mov	r0, r1
 8005a32:	4611      	mov	r1, r2
 8005a34:	461a      	mov	r2, r3
 8005a36:	4603      	mov	r3, r0
 8005a38:	817b      	strh	r3, [r7, #10]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	813b      	strh	r3, [r7, #8]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	f040 80f9 	bne.w	8005c42 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <HAL_I2C_Mem_Write+0x34>
 8005a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d105      	bne.n	8005a68 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0ed      	b.n	8005c44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <HAL_I2C_Mem_Write+0x4e>
 8005a72:	2302      	movs	r3, #2
 8005a74:	e0e6      	b.n	8005c44 <HAL_I2C_Mem_Write+0x21c>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a7e:	f7fb fde7 	bl	8001650 <HAL_GetTick>
 8005a82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	2319      	movs	r3, #25
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f003 f8a6 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e0d1      	b.n	8005c44 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2221      	movs	r2, #33	; 0x21
 8005aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2240      	movs	r2, #64	; 0x40
 8005aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a3a      	ldr	r2, [r7, #32]
 8005aba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ac8:	88f8      	ldrh	r0, [r7, #6]
 8005aca:	893a      	ldrh	r2, [r7, #8]
 8005acc:	8979      	ldrh	r1, [r7, #10]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	9301      	str	r3, [sp, #4]
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f002 fa67 	bl	8007fac <I2C_RequestMemoryWrite>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d005      	beq.n	8005af0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e0a9      	b.n	8005c44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2bff      	cmp	r3, #255	; 0xff
 8005af8:	d90e      	bls.n	8005b18 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	22ff      	movs	r2, #255	; 0xff
 8005afe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	8979      	ldrh	r1, [r7, #10]
 8005b08:	2300      	movs	r3, #0
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f003 f9f5 	bl	8008f00 <I2C_TransferConfig>
 8005b16:	e00f      	b.n	8005b38 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	8979      	ldrh	r1, [r7, #10]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f003 f9e4 	bl	8008f00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f003 f890 	bl	8008c62 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e07b      	b.n	8005c44 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	781a      	ldrb	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d034      	beq.n	8005bf0 <HAL_I2C_Mem_Write+0x1c8>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d130      	bne.n	8005bf0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	2200      	movs	r2, #0
 8005b96:	2180      	movs	r1, #128	; 0x80
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f003 f822 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e04d      	b.n	8005c44 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2bff      	cmp	r3, #255	; 0xff
 8005bb0:	d90e      	bls.n	8005bd0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	22ff      	movs	r2, #255	; 0xff
 8005bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	8979      	ldrh	r1, [r7, #10]
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f003 f999 	bl	8008f00 <I2C_TransferConfig>
 8005bce:	e00f      	b.n	8005bf0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	8979      	ldrh	r1, [r7, #10]
 8005be2:	2300      	movs	r3, #0
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f003 f988 	bl	8008f00 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d19e      	bne.n	8005b38 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f003 f86f 	bl	8008ce2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e01a      	b.n	8005c44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2220      	movs	r2, #32
 8005c14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6859      	ldr	r1, [r3, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <HAL_I2C_Mem_Write+0x224>)
 8005c22:	400b      	ands	r3, r1
 8005c24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e000      	b.n	8005c44 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005c42:	2302      	movs	r3, #2
  }
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	fe00e800 	.word	0xfe00e800

08005c50 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	4608      	mov	r0, r1
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	817b      	strh	r3, [r7, #10]
 8005c62:	460b      	mov	r3, r1
 8005c64:	813b      	strh	r3, [r7, #8]
 8005c66:	4613      	mov	r3, r2
 8005c68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	f040 80fd 	bne.w	8005e72 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <HAL_I2C_Mem_Read+0x34>
 8005c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d105      	bne.n	8005c90 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e0f1      	b.n	8005e74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d101      	bne.n	8005c9e <HAL_I2C_Mem_Read+0x4e>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e0ea      	b.n	8005e74 <HAL_I2C_Mem_Read+0x224>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ca6:	f7fb fcd3 	bl	8001650 <HAL_GetTick>
 8005caa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	2319      	movs	r3, #25
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f002 ff92 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e0d5      	b.n	8005e74 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2222      	movs	r2, #34	; 0x22
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2240      	movs	r2, #64	; 0x40
 8005cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a3a      	ldr	r2, [r7, #32]
 8005ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cf0:	88f8      	ldrh	r0, [r7, #6]
 8005cf2:	893a      	ldrh	r2, [r7, #8]
 8005cf4:	8979      	ldrh	r1, [r7, #10]
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	4603      	mov	r3, r0
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f002 f9a7 	bl	8008054 <I2C_RequestMemoryRead>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e0ad      	b.n	8005e74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2bff      	cmp	r3, #255	; 0xff
 8005d20:	d90e      	bls.n	8005d40 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	22ff      	movs	r2, #255	; 0xff
 8005d26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	8979      	ldrh	r1, [r7, #10]
 8005d30:	4b52      	ldr	r3, [pc, #328]	; (8005e7c <HAL_I2C_Mem_Read+0x22c>)
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f003 f8e1 	bl	8008f00 <I2C_TransferConfig>
 8005d3e:	e00f      	b.n	8005d60 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	8979      	ldrh	r1, [r7, #10]
 8005d52:	4b4a      	ldr	r3, [pc, #296]	; (8005e7c <HAL_I2C_Mem_Read+0x22c>)
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f003 f8d0 	bl	8008f00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	2200      	movs	r2, #0
 8005d68:	2104      	movs	r1, #4
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f002 ff39 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e07c      	b.n	8005e74 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d034      	beq.n	8005e20 <HAL_I2C_Mem_Read+0x1d0>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d130      	bne.n	8005e20 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2180      	movs	r1, #128	; 0x80
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f002 ff0a 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e04d      	b.n	8005e74 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2bff      	cmp	r3, #255	; 0xff
 8005de0:	d90e      	bls.n	8005e00 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	22ff      	movs	r2, #255	; 0xff
 8005de6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	8979      	ldrh	r1, [r7, #10]
 8005df0:	2300      	movs	r3, #0
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f003 f881 	bl	8008f00 <I2C_TransferConfig>
 8005dfe:	e00f      	b.n	8005e20 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	8979      	ldrh	r1, [r7, #10]
 8005e12:	2300      	movs	r3, #0
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f003 f870 	bl	8008f00 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d19a      	bne.n	8005d60 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f002 ff57 	bl	8008ce2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e01a      	b.n	8005e74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2220      	movs	r2, #32
 8005e44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6859      	ldr	r1, [r3, #4]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <HAL_I2C_Mem_Read+0x230>)
 8005e52:	400b      	ands	r3, r1
 8005e54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e000      	b.n	8005e74 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005e72:	2302      	movs	r3, #2
  }
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	80002400 	.word	0x80002400
 8005e80:	fe00e800 	.word	0xfe00e800

08005e84 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	4611      	mov	r1, r2
 8005e90:	461a      	mov	r2, r3
 8005e92:	4603      	mov	r3, r0
 8005e94:	817b      	strh	r3, [r7, #10]
 8005e96:	460b      	mov	r3, r1
 8005e98:	813b      	strh	r3, [r7, #8]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d176      	bne.n	8005f98 <HAL_I2C_Mem_Write_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <HAL_I2C_Mem_Write_IT+0x32>
 8005eb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d105      	bne.n	8005ec2 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ebc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e06b      	b.n	8005f9a <HAL_I2C_Mem_Write_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed0:	d101      	bne.n	8005ed6 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	e061      	b.n	8005f9a <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d101      	bne.n	8005ee4 <HAL_I2C_Mem_Write_IT+0x60>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e05a      	b.n	8005f9a <HAL_I2C_Mem_Write_IT+0x116>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005eec:	f7fb fbb0 	bl	8001650 <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2221      	movs	r2, #33	; 0x21
 8005ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2240      	movs	r2, #64	; 0x40
 8005efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a3a      	ldr	r2, [r7, #32]
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4a23      	ldr	r2, [pc, #140]	; (8005fa4 <HAL_I2C_Mem_Write_IT+0x120>)
 8005f18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4a22      	ldr	r2, [pc, #136]	; (8005fa8 <HAL_I2C_Mem_Write_IT+0x124>)
 8005f1e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2bff      	cmp	r3, #255	; 0xff
 8005f28:	d906      	bls.n	8005f38 <HAL_I2C_Mem_Write_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	22ff      	movs	r2, #255	; 0xff
 8005f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	e007      	b.n	8005f48 <HAL_I2C_Mem_Write_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005f42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f46:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005f48:	88f8      	ldrh	r0, [r7, #6]
 8005f4a:	893a      	ldrh	r2, [r7, #8]
 8005f4c:	8979      	ldrh	r1, [r7, #10]
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	2319      	movs	r3, #25
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	4603      	mov	r3, r0
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f002 f827 	bl	8007fac <I2C_RequestMemoryWrite>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <HAL_I2C_Mem_Write_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e014      	b.n	8005f9a <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	8979      	ldrh	r1, [r7, #10]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f002 ffbe 	bl	8008f00 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f002 ffe4 	bl	8008f5c <I2C_Enable_IRQ>

    return HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e000      	b.n	8005f9a <HAL_I2C_Mem_Write_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
  }
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	ffff0000 	.word	0xffff0000
 8005fa8:	080077af 	.word	0x080077af

08005fac <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	817b      	strh	r3, [r7, #10]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	813b      	strh	r3, [r7, #8]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d176      	bne.n	80060c0 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_I2C_Mem_Read_IT+0x32>
 8005fd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d105      	bne.n	8005fea <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fe4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e06b      	b.n	80060c2 <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff8:	d101      	bne.n	8005ffe <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e061      	b.n	80060c2 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_I2C_Mem_Read_IT+0x60>
 8006008:	2302      	movs	r3, #2
 800600a:	e05a      	b.n	80060c2 <HAL_I2C_Mem_Read_IT+0x116>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006014:	f7fb fb1c 	bl	8001650 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2222      	movs	r2, #34	; 0x22
 800601e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2240      	movs	r2, #64	; 0x40
 8006026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a3a      	ldr	r2, [r7, #32]
 8006034:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800603a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4a23      	ldr	r2, [pc, #140]	; (80060cc <HAL_I2C_Mem_Read_IT+0x120>)
 8006040:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4a22      	ldr	r2, [pc, #136]	; (80060d0 <HAL_I2C_Mem_Read_IT+0x124>)
 8006046:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604c:	b29b      	uxth	r3, r3
 800604e:	2bff      	cmp	r3, #255	; 0xff
 8006050:	d906      	bls.n	8006060 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	22ff      	movs	r2, #255	; 0xff
 8006056:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e007      	b.n	8006070 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800606a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800606e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006070:	88f8      	ldrh	r0, [r7, #6]
 8006072:	893a      	ldrh	r2, [r7, #8]
 8006074:	8979      	ldrh	r1, [r7, #10]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	9301      	str	r3, [sp, #4]
 800607a:	2319      	movs	r3, #25
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	4603      	mov	r3, r0
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f001 ffe7 	bl	8008054 <I2C_RequestMemoryRead>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e014      	b.n	80060c2 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609c:	b2da      	uxtb	r2, r3
 800609e:	8979      	ldrh	r1, [r7, #10]
 80060a0:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <HAL_I2C_Mem_Read_IT+0x128>)
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f002 ff2a 	bl	8008f00 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80060b4:	2102      	movs	r1, #2
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f002 ff50 	bl	8008f5c <I2C_Enable_IRQ>

    return HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	e000      	b.n	80060c2 <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 80060c0:	2302      	movs	r3, #2
  }
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	ffff0000 	.word	0xffff0000
 80060d0:	080077af 	.word	0x080077af
 80060d4:	80002400 	.word	0x80002400

080060d8 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08a      	sub	sp, #40	; 0x28
 80060dc:	af02      	add	r7, sp, #8
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	4608      	mov	r0, r1
 80060e2:	4611      	mov	r1, r2
 80060e4:	461a      	mov	r2, r3
 80060e6:	4603      	mov	r3, r0
 80060e8:	817b      	strh	r3, [r7, #10]
 80060ea:	460b      	mov	r3, r1
 80060ec:	813b      	strh	r3, [r7, #8]
 80060ee:	4613      	mov	r3, r2
 80060f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	f040 80d5 	bne.w	80062aa <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <HAL_I2C_Mem_Write_DMA+0x34>
 8006106:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d105      	bne.n	8006118 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006112:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e0c9      	b.n	80062ac <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006126:	d101      	bne.n	800612c <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8006128:	2302      	movs	r3, #2
 800612a:	e0bf      	b.n	80062ac <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <HAL_I2C_Mem_Write_DMA+0x62>
 8006136:	2302      	movs	r3, #2
 8006138:	e0b8      	b.n	80062ac <HAL_I2C_Mem_Write_DMA+0x1d4>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006142:	f7fb fa85 	bl	8001650 <HAL_GetTick>
 8006146:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2221      	movs	r2, #33	; 0x21
 800614c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2240      	movs	r2, #64	; 0x40
 8006154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006162:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006168:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4a51      	ldr	r2, [pc, #324]	; (80062b4 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 800616e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4a51      	ldr	r2, [pc, #324]	; (80062b8 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8006174:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617a:	b29b      	uxth	r3, r3
 800617c:	2bff      	cmp	r3, #255	; 0xff
 800617e:	d906      	bls.n	800618e <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	22ff      	movs	r2, #255	; 0xff
 8006184:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006186:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800618a:	61fb      	str	r3, [r7, #28]
 800618c:	e007      	b.n	800619e <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006198:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800619c:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800619e:	88f8      	ldrh	r0, [r7, #6]
 80061a0:	893a      	ldrh	r2, [r7, #8]
 80061a2:	8979      	ldrh	r1, [r7, #10]
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	2319      	movs	r3, #25
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	4603      	mov	r3, r0
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f001 fefc 	bl	8007fac <I2C_RequestMemoryWrite>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e072      	b.n	80062ac <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d020      	beq.n	8006210 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	4a3a      	ldr	r2, [pc, #232]	; (80062bc <HAL_I2C_Mem_Write_DMA+0x1e4>)
 80061d4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	4a39      	ldr	r2, [pc, #228]	; (80062c0 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 80061dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	2200      	movs	r2, #0
 80061e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	2200      	movs	r2, #0
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80061f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3328      	adds	r3, #40	; 0x28
 80061fa:	461a      	mov	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006200:	f7fc f8d1 	bl	80023a6 <HAL_DMA_Start_IT>
 8006204:	4603      	mov	r3, r0
 8006206:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006208:	7dfb      	ldrb	r3, [r7, #23]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d139      	bne.n	8006282 <HAL_I2C_Mem_Write_DMA+0x1aa>
 800620e:	e013      	b.n	8006238 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006224:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e039      	b.n	80062ac <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623c:	b2da      	uxtb	r2, r3
 800623e:	8979      	ldrh	r1, [r7, #10]
 8006240:	2300      	movs	r3, #0
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f002 fe5a 	bl	8008f00 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006266:	2110      	movs	r1, #16
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f002 fe77 	bl	8008f5c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800627c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	e014      	b.n	80062ac <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006296:	f043 0210 	orr.w	r2, r3, #16
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80062aa:	2302      	movs	r3, #2
  }
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3720      	adds	r7, #32
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	ffff0000 	.word	0xffff0000
 80062b8:	08007c05 	.word	0x08007c05
 80062bc:	080089c7 	.word	0x080089c7
 80062c0:	08008b79 	.word	0x08008b79

080062c4 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	; 0x28
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	4608      	mov	r0, r1
 80062ce:	4611      	mov	r1, r2
 80062d0:	461a      	mov	r2, r3
 80062d2:	4603      	mov	r3, r0
 80062d4:	817b      	strh	r3, [r7, #10]
 80062d6:	460b      	mov	r3, r1
 80062d8:	813b      	strh	r3, [r7, #8]
 80062da:	4613      	mov	r3, r2
 80062dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	f040 80d5 	bne.w	8006496 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_I2C_Mem_Read_DMA+0x34>
 80062f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d105      	bne.n	8006304 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0c9      	b.n	8006498 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800630e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006312:	d101      	bne.n	8006318 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8006314:	2302      	movs	r3, #2
 8006316:	e0bf      	b.n	8006498 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_I2C_Mem_Read_DMA+0x62>
 8006322:	2302      	movs	r3, #2
 8006324:	e0b8      	b.n	8006498 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800632e:	f7fb f98f 	bl	8001650 <HAL_GetTick>
 8006332:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2222      	movs	r2, #34	; 0x22
 8006338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2240      	movs	r2, #64	; 0x40
 8006340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800634e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4a51      	ldr	r2, [pc, #324]	; (80064a0 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 800635a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4a51      	ldr	r2, [pc, #324]	; (80064a4 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8006360:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006366:	b29b      	uxth	r3, r3
 8006368:	2bff      	cmp	r3, #255	; 0xff
 800636a:	d906      	bls.n	800637a <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	22ff      	movs	r2, #255	; 0xff
 8006370:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006372:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006376:	61fb      	str	r3, [r7, #28]
 8006378:	e007      	b.n	800638a <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637e:	b29a      	uxth	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006384:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006388:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800638a:	88f8      	ldrh	r0, [r7, #6]
 800638c:	893a      	ldrh	r2, [r7, #8]
 800638e:	8979      	ldrh	r1, [r7, #10]
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	9301      	str	r3, [sp, #4]
 8006394:	2319      	movs	r3, #25
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	4603      	mov	r3, r0
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f001 fe5a 	bl	8008054 <I2C_RequestMemoryRead>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d005      	beq.n	80063b2 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e072      	b.n	8006498 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d020      	beq.n	80063fc <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063be:	4a3a      	ldr	r2, [pc, #232]	; (80064a8 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 80063c0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c6:	4a39      	ldr	r2, [pc, #228]	; (80064ac <HAL_I2C_Mem_Read_DMA+0x1e8>)
 80063c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ce:	2200      	movs	r2, #0
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d6:	2200      	movs	r2, #0
 80063d8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3324      	adds	r3, #36	; 0x24
 80063e4:	4619      	mov	r1, r3
 80063e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ec:	f7fb ffdb 	bl	80023a6 <HAL_DMA_Start_IT>
 80063f0:	4603      	mov	r3, r0
 80063f2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d139      	bne.n	800646e <HAL_I2C_Mem_Read_DMA+0x1aa>
 80063fa:	e013      	b.n	8006424 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006410:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e039      	b.n	8006498 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006428:	b2da      	uxtb	r2, r3
 800642a:	8979      	ldrh	r1, [r7, #10]
 800642c:	4b20      	ldr	r3, [pc, #128]	; (80064b0 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f002 fd64 	bl	8008f00 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643c:	b29a      	uxth	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006452:	2110      	movs	r1, #16
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f002 fd81 	bl	8008f5c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006468:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	e014      	b.n	8006498 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006482:	f043 0210 	orr.w	r2, r3, #16
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8006496:	2302      	movs	r3, #2
  }
}
 8006498:	4618      	mov	r0, r3
 800649a:	3720      	adds	r7, #32
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	ffff0000 	.word	0xffff0000
 80064a4:	08007c05 	.word	0x08007c05
 80064a8:	08008a9d 	.word	0x08008a9d
 80064ac:	08008b79 	.word	0x08008b79
 80064b0:	80002400 	.word	0x80002400

080064b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08a      	sub	sp, #40	; 0x28
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	607a      	str	r2, [r7, #4]
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	460b      	mov	r3, r1
 80064c2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	f040 80f1 	bne.w	80066b8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e4:	d101      	bne.n	80064ea <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80064e6:	2302      	movs	r3, #2
 80064e8:	e0e7      	b.n	80066ba <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <HAL_I2C_IsDeviceReady+0x44>
 80064f4:	2302      	movs	r3, #2
 80064f6:	e0e0      	b.n	80066ba <HAL_I2C_IsDeviceReady+0x206>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2224      	movs	r2, #36	; 0x24
 8006504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d107      	bne.n	8006526 <HAL_I2C_IsDeviceReady+0x72>
 8006516:	897b      	ldrh	r3, [r7, #10]
 8006518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800651c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006524:	e004      	b.n	8006530 <HAL_I2C_IsDeviceReady+0x7c>
 8006526:	897b      	ldrh	r3, [r7, #10]
 8006528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800652c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	6812      	ldr	r2, [r2, #0]
 8006534:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006536:	f7fb f88b 	bl	8001650 <HAL_GetTick>
 800653a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	f003 0320 	and.w	r3, r3, #32
 8006546:	2b20      	cmp	r3, #32
 8006548:	bf0c      	ite	eq
 800654a:	2301      	moveq	r3, #1
 800654c:	2300      	movne	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b10      	cmp	r3, #16
 800655e:	bf0c      	ite	eq
 8006560:	2301      	moveq	r3, #1
 8006562:	2300      	movne	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006568:	e034      	b.n	80065d4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006570:	d01a      	beq.n	80065a8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006572:	f7fb f86d 	bl	8001650 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d302      	bcc.n	8006588 <HAL_I2C_IsDeviceReady+0xd4>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10f      	bne.n	80065a8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006594:	f043 0220 	orr.w	r2, r3, #32
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e088      	b.n	80066ba <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	bf0c      	ite	eq
 80065b6:	2301      	moveq	r3, #1
 80065b8:	2300      	movne	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	f003 0310 	and.w	r3, r3, #16
 80065c8:	2b10      	cmp	r3, #16
 80065ca:	bf0c      	ite	eq
 80065cc:	2301      	moveq	r3, #1
 80065ce:	2300      	movne	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80065d4:	7ffb      	ldrb	r3, [r7, #31]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d102      	bne.n	80065e0 <HAL_I2C_IsDeviceReady+0x12c>
 80065da:	7fbb      	ldrb	r3, [r7, #30]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0c4      	beq.n	800656a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	f003 0310 	and.w	r3, r3, #16
 80065ea:	2b10      	cmp	r3, #16
 80065ec:	d01a      	beq.n	8006624 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2200      	movs	r2, #0
 80065f6:	2120      	movs	r1, #32
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f002 faf2 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e058      	b.n	80066ba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2220      	movs	r2, #32
 800660e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	e04a      	b.n	80066ba <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2200      	movs	r2, #0
 800662c:	2120      	movs	r1, #32
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f002 fad7 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e03d      	b.n	80066ba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2210      	movs	r2, #16
 8006644:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2220      	movs	r2, #32
 800664c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	429a      	cmp	r2, r3
 8006654:	d118      	bne.n	8006688 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006664:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2200      	movs	r2, #0
 800666e:	2120      	movs	r1, #32
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f002 fab6 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e01c      	b.n	80066ba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2220      	movs	r2, #32
 8006686:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	3301      	adds	r3, #1
 800668c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	429a      	cmp	r2, r3
 8006694:	f63f af3b 	bhi.w	800650e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2220      	movs	r2, #32
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a4:	f043 0220 	orr.w	r2, r3, #32
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80066b8:	2302      	movs	r3, #2
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	607a      	str	r2, [r7, #4]
 80066ce:	461a      	mov	r2, r3
 80066d0:	460b      	mov	r3, r1
 80066d2:	817b      	strh	r3, [r7, #10]
 80066d4:	4613      	mov	r3, r2
 80066d6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 80066d8:	4b3a      	ldr	r3, [pc, #232]	; (80067c4 <HAL_I2C_Master_Seq_Transmit_IT+0x100>)
 80066da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d167      	bne.n	80067b8 <HAL_I2C_Master_Seq_Transmit_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_I2C_Master_Seq_Transmit_IT+0x32>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e061      	b.n	80067ba <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2221      	movs	r2, #33	; 0x21
 8006702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2210      	movs	r2, #16
 800670a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	893a      	ldrh	r2, [r7, #8]
 800671e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a3a      	ldr	r2, [r7, #32]
 8006724:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4a27      	ldr	r2, [pc, #156]	; (80067c8 <HAL_I2C_Master_Seq_Transmit_IT+0x104>)
 800672a:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006730:	b29b      	uxth	r3, r3
 8006732:	2bff      	cmp	r3, #255	; 0xff
 8006734:	d906      	bls.n	8006744 <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	22ff      	movs	r2, #255	; 0xff
 800673a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800673c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	e007      	b.n	8006754 <HAL_I2C_Master_Seq_Transmit_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	2b11      	cmp	r3, #17
 800675a:	d10e      	bne.n	800677a <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	2baa      	cmp	r3, #170	; 0xaa
 8006760:	d003      	beq.n	800676a <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8006768:	d101      	bne.n	800676e <HAL_I2C_Master_Seq_Transmit_IT+0xaa>
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <HAL_I2C_Master_Seq_Transmit_IT+0xac>
 800676e:	2300      	movs	r3, #0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d102      	bne.n	800677a <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 8006774:	2300      	movs	r3, #0
 8006776:	613b      	str	r3, [r7, #16]
 8006778:	e00a      	b.n	8006790 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f002 fcb0 	bl	80090e0 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006784:	b29b      	uxth	r3, r3
 8006786:	2bff      	cmp	r3, #255	; 0xff
 8006788:	d802      	bhi.n	8006790 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678e:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006794:	b2da      	uxtb	r2, r3
 8006796:	8979      	ldrh	r1, [r7, #10]
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f002 fbae 	bl	8008f00 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80067ac:	2101      	movs	r1, #1
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f002 fbd4 	bl	8008f5c <I2C_Enable_IRQ>

    return HAL_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	e000      	b.n	80067ba <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 80067b8:	2302      	movs	r3, #2
  }
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	80002000 	.word	0x80002000
 80067c8:	080077af 	.word	0x080077af

080067cc <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                  uint16_t Size, uint32_t XferOptions)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08a      	sub	sp, #40	; 0x28
 80067d0:	af02      	add	r7, sp, #8
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	607a      	str	r2, [r7, #4]
 80067d6:	461a      	mov	r2, r3
 80067d8:	460b      	mov	r3, r1
 80067da:	817b      	strh	r3, [r7, #10]
 80067dc:	4613      	mov	r3, r2
 80067de:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 80067e0:	4b77      	ldr	r3, [pc, #476]	; (80069c0 <HAL_I2C_Master_Seq_Transmit_DMA+0x1f4>)
 80067e2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	f040 80e1 	bne.w	80069b4 <HAL_I2C_Master_Seq_Transmit_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_I2C_Master_Seq_Transmit_DMA+0x34>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e0da      	b.n	80069b6 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2221      	movs	r2, #33	; 0x21
 800680c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2210      	movs	r2, #16
 8006814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	893a      	ldrh	r2, [r7, #8]
 8006828:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800682e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4a64      	ldr	r2, [pc, #400]	; (80069c4 <HAL_I2C_Master_Seq_Transmit_DMA+0x1f8>)
 8006834:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683a:	b29b      	uxth	r3, r3
 800683c:	2bff      	cmp	r3, #255	; 0xff
 800683e:	d906      	bls.n	800684e <HAL_I2C_Master_Seq_Transmit_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	22ff      	movs	r2, #255	; 0xff
 8006844:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006846:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800684a:	61fb      	str	r3, [r7, #28]
 800684c:	e007      	b.n	800685e <HAL_I2C_Master_Seq_Transmit_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006862:	2b11      	cmp	r3, #17
 8006864:	d10e      	bne.n	8006884 <HAL_I2C_Master_Seq_Transmit_DMA+0xb8>
 8006866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006868:	2baa      	cmp	r3, #170	; 0xaa
 800686a:	d003      	beq.n	8006874 <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8006872:	d101      	bne.n	8006878 <HAL_I2C_Master_Seq_Transmit_DMA+0xac>
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <HAL_I2C_Master_Seq_Transmit_DMA+0xae>
 8006878:	2300      	movs	r3, #0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d102      	bne.n	8006884 <HAL_I2C_Master_Seq_Transmit_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
 800687e:	2300      	movs	r3, #0
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	e00a      	b.n	800689a <HAL_I2C_Master_Seq_Transmit_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f002 fc2b 	bl	80090e0 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688e:	b29b      	uxth	r3, r3
 8006890:	2bff      	cmp	r3, #255	; 0xff
 8006892:	d802      	bhi.n	800689a <HAL_I2C_Master_Seq_Transmit_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d070      	beq.n	8006984 <HAL_I2C_Master_Seq_Transmit_DMA+0x1b8>
    {
      if (hi2c->hdmatx != NULL)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d020      	beq.n	80068ec <HAL_I2C_Master_Seq_Transmit_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	4a46      	ldr	r2, [pc, #280]	; (80069c8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>)
 80068b0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b6:	4a45      	ldr	r2, [pc, #276]	; (80069cc <HAL_I2C_Master_Seq_Transmit_DMA+0x200>)
 80068b8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	2200      	movs	r2, #0
 80068c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	2200      	movs	r2, #0
 80068c8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3328      	adds	r3, #40	; 0x28
 80068d6:	461a      	mov	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068dc:	f7fb fd63 	bl	80023a6 <HAL_DMA_Start_IT>
 80068e0:	4603      	mov	r3, r0
 80068e2:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80068e4:	7dfb      	ldrb	r3, [r7, #23]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d138      	bne.n	800695c <HAL_I2C_Master_Seq_Transmit_DMA+0x190>
 80068ea:	e013      	b.n	8006914 <HAL_I2C_Master_Seq_Transmit_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006900:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e050      	b.n	80069b6 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to write */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006918:	b2da      	uxtb	r2, r3
 800691a:	8979      	ldrh	r1, [r7, #10]
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f002 faec 	bl	8008f00 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006942:	2110      	movs	r1, #16
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f002 fb09 	bl	8008f5c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	e029      	b.n	80069b0 <HAL_I2C_Master_Seq_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006970:	f043 0210 	orr.w	r2, r3, #16
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e018      	b.n	80069b6 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4a12      	ldr	r2, [pc, #72]	; (80069d0 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>)
 8006988:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698e:	b2da      	uxtb	r2, r3
 8006990:	8979      	ldrh	r1, [r7, #10]
 8006992:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <HAL_I2C_Master_Seq_Transmit_DMA+0x1f4>)
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f002 fab0 	bl	8008f00 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80069a8:	2101      	movs	r1, #1
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f002 fad6 	bl	8008f5c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	e000      	b.n	80069b6 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80069b4:	2302      	movs	r3, #2
  }
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3720      	adds	r7, #32
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	80002000 	.word	0x80002000
 80069c4:	08007c05 	.word	0x08007c05
 80069c8:	080089c7 	.word	0x080089c7
 80069cc:	08008b79 	.word	0x08008b79
 80069d0:	080077af 	.word	0x080077af

080069d4 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b088      	sub	sp, #32
 80069d8:	af02      	add	r7, sp, #8
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	607a      	str	r2, [r7, #4]
 80069de:	461a      	mov	r2, r3
 80069e0:	460b      	mov	r3, r1
 80069e2:	817b      	strh	r3, [r7, #10]
 80069e4:	4613      	mov	r3, r2
 80069e6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 80069e8:	4b3a      	ldr	r3, [pc, #232]	; (8006ad4 <HAL_I2C_Master_Seq_Receive_IT+0x100>)
 80069ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b20      	cmp	r3, #32
 80069f6:	d167      	bne.n	8006ac8 <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_I2C_Master_Seq_Receive_IT+0x32>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e061      	b.n	8006aca <HAL_I2C_Master_Seq_Receive_IT+0xf6>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2222      	movs	r2, #34	; 0x22
 8006a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2210      	movs	r2, #16
 8006a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	893a      	ldrh	r2, [r7, #8]
 8006a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6a3a      	ldr	r2, [r7, #32]
 8006a34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4a27      	ldr	r2, [pc, #156]	; (8006ad8 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
 8006a3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	2bff      	cmp	r3, #255	; 0xff
 8006a44:	d906      	bls.n	8006a54 <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	22ff      	movs	r2, #255	; 0xff
 8006a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006a4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	e007      	b.n	8006a64 <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	2b12      	cmp	r3, #18
 8006a6a:	d10e      	bne.n	8006a8a <HAL_I2C_Master_Seq_Receive_IT+0xb6>
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	2baa      	cmp	r3, #170	; 0xaa
 8006a70:	d003      	beq.n	8006a7a <HAL_I2C_Master_Seq_Receive_IT+0xa6>
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8006a78:	d101      	bne.n	8006a7e <HAL_I2C_Master_Seq_Receive_IT+0xaa>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e000      	b.n	8006a80 <HAL_I2C_Master_Seq_Receive_IT+0xac>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d102      	bne.n	8006a8a <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 8006a84:	2300      	movs	r3, #0
 8006a86:	613b      	str	r3, [r7, #16]
 8006a88:	e00a      	b.n	8006aa0 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f002 fb28 	bl	80090e0 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2bff      	cmp	r3, #255	; 0xff
 8006a98:	d802      	bhi.n	8006aa0 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	8979      	ldrh	r1, [r7, #10]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f002 fa26 	bl	8008f00 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006abc:	2102      	movs	r1, #2
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f002 fa4c 	bl	8008f5c <I2C_Enable_IRQ>

    return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	e000      	b.n	8006aca <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8006ac8:	2302      	movs	r3, #2
  }
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	80002400 	.word	0x80002400
 8006ad8:	080077af 	.word	0x080077af

08006adc <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	; 0x28
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	607a      	str	r2, [r7, #4]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	460b      	mov	r3, r1
 8006aea:	817b      	strh	r3, [r7, #10]
 8006aec:	4613      	mov	r3, r2
 8006aee:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8006af0:	4b77      	ldr	r3, [pc, #476]	; (8006cd0 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
 8006af2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	f040 80e1 	bne.w	8006cc4 <HAL_I2C_Master_Seq_Receive_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_I2C_Master_Seq_Receive_DMA+0x34>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e0da      	b.n	8006cc6 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2222      	movs	r2, #34	; 0x22
 8006b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2210      	movs	r2, #16
 8006b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	893a      	ldrh	r2, [r7, #8]
 8006b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4a64      	ldr	r2, [pc, #400]	; (8006cd4 <HAL_I2C_Master_Seq_Receive_DMA+0x1f8>)
 8006b44:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2bff      	cmp	r3, #255	; 0xff
 8006b4e:	d906      	bls.n	8006b5e <HAL_I2C_Master_Seq_Receive_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	22ff      	movs	r2, #255	; 0xff
 8006b54:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006b56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b5a:	61fb      	str	r3, [r7, #28]
 8006b5c:	e007      	b.n	8006b6e <HAL_I2C_Master_Seq_Receive_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6c:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	2b12      	cmp	r3, #18
 8006b74:	d10e      	bne.n	8006b94 <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	2baa      	cmp	r3, #170	; 0xaa
 8006b7a:	d003      	beq.n	8006b84 <HAL_I2C_Master_Seq_Receive_DMA+0xa8>
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8006b82:	d101      	bne.n	8006b88 <HAL_I2C_Master_Seq_Receive_DMA+0xac>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <HAL_I2C_Master_Seq_Receive_DMA+0xae>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d102      	bne.n	8006b94 <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	e00a      	b.n	8006baa <HAL_I2C_Master_Seq_Receive_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f002 faa3 	bl	80090e0 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	2bff      	cmp	r3, #255	; 0xff
 8006ba2:	d802      	bhi.n	8006baa <HAL_I2C_Master_Seq_Receive_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d070      	beq.n	8006c94 <HAL_I2C_Master_Seq_Receive_DMA+0x1b8>
    {
      if (hi2c->hdmarx != NULL)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d020      	beq.n	8006bfc <HAL_I2C_Master_Seq_Receive_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbe:	4a46      	ldr	r2, [pc, #280]	; (8006cd8 <HAL_I2C_Master_Seq_Receive_DMA+0x1fc>)
 8006bc0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc6:	4a45      	ldr	r2, [pc, #276]	; (8006cdc <HAL_I2C_Master_Seq_Receive_DMA+0x200>)
 8006bc8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bce:	2200      	movs	r2, #0
 8006bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3324      	adds	r3, #36	; 0x24
 8006be4:	4619      	mov	r1, r3
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bec:	f7fb fbdb 	bl	80023a6 <HAL_DMA_Start_IT>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d138      	bne.n	8006c6c <HAL_I2C_Master_Seq_Receive_DMA+0x190>
 8006bfa:	e013      	b.n	8006c24 <HAL_I2C_Master_Seq_Receive_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e050      	b.n	8006cc6 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to read */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	8979      	ldrh	r1, [r7, #10]
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f002 f964 	bl	8008f00 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006c52:	2110      	movs	r1, #16
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f002 f981 	bl	8008f5c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	e029      	b.n	8006cc0 <HAL_I2C_Master_Seq_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c80:	f043 0210 	orr.w	r2, r3, #16
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e018      	b.n	8006cc6 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4a12      	ldr	r2, [pc, #72]	; (8006ce0 <HAL_I2C_Master_Seq_Receive_DMA+0x204>)
 8006c98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	8979      	ldrh	r1, [r7, #10]
 8006ca2:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f002 f928 	bl	8008f00 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006cb8:	2101      	movs	r1, #1
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f002 f94e 	bl	8008f5c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e000      	b.n	8006cc6 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006cc4:	2302      	movs	r3, #2
  }
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	80002400 	.word	0x80002400
 8006cd4:	08007c05 	.word	0x08007c05
 8006cd8:	08008a9d 	.word	0x08008a9d
 8006cdc:	08008b79 	.word	0x08008b79
 8006ce0:	080077af 	.word	0x080077af

08006ce4 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	603b      	str	r3, [r7, #0]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d00:	2b28      	cmp	r3, #40	; 0x28
 8006d02:	f040 808a 	bne.w	8006e1a <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8006d0c:	88fb      	ldrh	r3, [r7, #6]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d105      	bne.n	8006d1e <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d18:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e07e      	b.n	8006e1c <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006d1e:	f248 0101 	movw	r1, #32769	; 0x8001
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f002 f97e 	bl	8009024 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e072      	b.n	8006e1c <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b2a      	cmp	r3, #42	; 0x2a
 8006d48:	d12a      	bne.n	8006da0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006d4a:	2102      	movs	r1, #2
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f002 f969 	bl	8009024 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d60:	d11e      	bne.n	8006da0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d70:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d012      	beq.n	8006da0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7e:	4a29      	ldr	r2, [pc, #164]	; (8006e24 <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
 8006d80:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fb fbab 	bl	80024e2 <HAL_DMA_Abort_IT>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d006      	beq.n	8006da0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2229      	movs	r2, #41	; 0x29
 8006da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dc4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	88fa      	ldrh	r2, [r7, #6]
 8006dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4a10      	ldr	r2, [pc, #64]	; (8006e28 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
 8006de6:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	0c1b      	lsrs	r3, r3, #16
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d103      	bne.n	8006e04 <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2208      	movs	r2, #8
 8006e02:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8006e0c:	f248 0101 	movw	r1, #32769	; 0x8001
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f002 f8a3 	bl	8008f5c <I2C_Enable_IRQ>

    return HAL_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	e000      	b.n	8006e1c <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
  }
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	08008ba7 	.word	0x08008ba7
 8006e28:	080079ff 	.word	0x080079ff

08006e2c <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                 uint32_t XferOptions)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	603b      	str	r3, [r7, #0]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e48:	2b28      	cmp	r3, #40	; 0x28
 8006e4a:	f040 811a 	bne.w	8007082 <HAL_I2C_Slave_Seq_Transmit_DMA+0x256>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 8006e54:	88fb      	ldrh	r3, [r7, #6]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d105      	bne.n	8006e66 <HAL_I2C_Slave_Seq_Transmit_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e60:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e10e      	b.n	8007084 <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_I2C_Slave_Seq_Transmit_DMA+0x48>
 8006e70:	2302      	movs	r3, #2
 8006e72:	e107      	b.n	8007084 <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006e7c:	f248 0101 	movw	r1, #32769	; 0x8001
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f002 f8cf 	bl	8009024 <I2C_Disable_IRQ>

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e90:	d12b      	bne.n	8006eea <HAL_I2C_Slave_Seq_Transmit_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006e92:	2102      	movs	r1, #2
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f002 f8c5 	bl	8009024 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ea8:	d14c      	bne.n	8006f44 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d048      	beq.n	8006f44 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ec0:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec6:	4a71      	ldr	r2, [pc, #452]	; (800708c <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>)
 8006ec8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fb fb07 	bl	80024e2 <HAL_DMA_Abort_IT>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d034      	beq.n	8006f44 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4798      	blx	r3
 8006ee8:	e02c      	b.n	8006f44 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b29      	cmp	r3, #41	; 0x29
 8006ef4:	d126      	bne.n	8006f44 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f04:	d11e      	bne.n	8006f44 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f14:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d012      	beq.n	8006f44 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	4a5a      	ldr	r2, [pc, #360]	; (800708c <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>)
 8006f24:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fb fad9 	bl	80024e2 <HAL_DMA_Abort_IT>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d006      	beq.n	8006f44 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f40:	4610      	mov	r0, r2
 8006f42:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2229      	movs	r2, #41	; 0x29
 8006f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f68:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	88fa      	ldrh	r2, [r7, #6]
 8006f74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	4a41      	ldr	r2, [pc, #260]	; (8007090 <HAL_I2C_Slave_Seq_Transmit_DMA+0x264>)
 8006f8a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d020      	beq.n	8006fd6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	4a3e      	ldr	r2, [pc, #248]	; (8007094 <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
 8006f9a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa0:	4a3d      	ldr	r2, [pc, #244]	; (8007098 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26c>)
 8006fa2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	2200      	movs	r2, #0
 8006faa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3328      	adds	r3, #40	; 0x28
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc6:	f7fb f9ee 	bl	80023a6 <HAL_DMA_Start_IT>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d12b      	bne.n	800702c <HAL_I2C_Slave_Seq_Transmit_DMA+0x200>
 8006fd4:	e013      	b.n	8006ffe <HAL_I2C_Slave_Seq_Transmit_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2228      	movs	r2, #40	; 0x28
 8006fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e042      	b.n	8007084 <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007002:	b29a      	uxth	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	b29a      	uxth	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	851a      	strh	r2, [r3, #40]	; 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	0c1b      	lsrs	r3, r3, #16
 800701e:	b2db      	uxtb	r3, r3
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b01      	cmp	r3, #1
 8007028:	d118      	bne.n	800705c <HAL_I2C_Slave_Seq_Transmit_DMA+0x230>
 800702a:	e013      	b.n	8007054 <HAL_I2C_Slave_Seq_Transmit_DMA+0x228>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2228      	movs	r2, #40	; 0x28
 8007030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007040:	f043 0210 	orr.w	r2, r3, #16
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e017      	b.n	8007084 <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2208      	movs	r2, #8
 800705a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* Enable ERR, STOP, NACK, ADDR interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f001 ff77 	bl	8008f5c <I2C_Enable_IRQ>

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800707c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	e000      	b.n	8007084 <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
  }
  else
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
  }
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	08008ba7 	.word	0x08008ba7
 8007090:	08007deb 	.word	0x08007deb
 8007094:	08008a5d 	.word	0x08008a5d
 8007098:	08008b79 	.word	0x08008b79

0800709c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	603b      	str	r3, [r7, #0]
 80070a8:	4613      	mov	r3, r2
 80070aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80070b8:	2b28      	cmp	r3, #40	; 0x28
 80070ba:	f040 808a 	bne.w	80071d2 <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80070c4:	88fb      	ldrh	r3, [r7, #6]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e07e      	b.n	80071d4 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80070d6:	f248 0102 	movw	r1, #32770	; 0x8002
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f001 ffa2 	bl	8009024 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d101      	bne.n	80070ee <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80070ea:	2302      	movs	r3, #2
 80070ec:	e072      	b.n	80071d4 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b29      	cmp	r3, #41	; 0x29
 8007100:	d12a      	bne.n	8007158 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007102:	2101      	movs	r1, #1
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f001 ff8d 	bl	8009024 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007118:	d11e      	bne.n	8007158 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007128:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	2b00      	cmp	r3, #0
 8007130:	d012      	beq.n	8007158 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007136:	4a29      	ldr	r2, [pc, #164]	; (80071dc <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
 8007138:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713e:	4618      	mov	r0, r3
 8007140:	f7fb f9cf 	bl	80024e2 <HAL_DMA_Abort_IT>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d006      	beq.n	8007158 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007154:	4610      	mov	r0, r2
 8007156:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	222a      	movs	r2, #42	; 0x2a
 800715c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2220      	movs	r2, #32
 8007164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800717c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	88fa      	ldrh	r2, [r7, #6]
 8007188:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4a10      	ldr	r2, [pc, #64]	; (80071e0 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
 800719e:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	0c1b      	lsrs	r3, r3, #16
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d103      	bne.n	80071bc <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2208      	movs	r2, #8
 80071ba:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80071c4:	f248 0102 	movw	r1, #32770	; 0x8002
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f001 fec7 	bl	8008f5c <I2C_Enable_IRQ>

    return HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	e000      	b.n	80071d4 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
  }
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	08008ba7 	.word	0x08008ba7
 80071e0:	080079ff 	.word	0x080079ff

080071e4 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	4613      	mov	r3, r2
 80071f2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007200:	2b28      	cmp	r3, #40	; 0x28
 8007202:	f040 811a 	bne.w	800743a <HAL_I2C_Slave_Seq_Receive_DMA+0x256>
  {
    if ((pData == NULL) || (Size == 0U))
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 800720c:	88fb      	ldrh	r3, [r7, #6]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d105      	bne.n	800721e <HAL_I2C_Slave_Seq_Receive_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007218:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e10e      	b.n	800743c <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800721e:	f248 0102 	movw	r1, #32770	; 0x8002
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f001 fefe 	bl	8009024 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800722e:	2b01      	cmp	r3, #1
 8007230:	d101      	bne.n	8007236 <HAL_I2C_Slave_Seq_Receive_DMA+0x52>
 8007232:	2302      	movs	r3, #2
 8007234:	e102      	b.n	800743c <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b29      	cmp	r3, #41	; 0x29
 8007248:	d12b      	bne.n	80072a2 <HAL_I2C_Slave_Seq_Receive_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800724a:	2101      	movs	r1, #1
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f001 fee9 	bl	8009024 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800725c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007260:	d14c      	bne.n	80072fc <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007266:	2b00      	cmp	r3, #0
 8007268:	d048      	beq.n	80072fc <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007278:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727e:	4a71      	ldr	r2, [pc, #452]	; (8007444 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>)
 8007280:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007286:	4618      	mov	r0, r3
 8007288:	f7fb f92b 	bl	80024e2 <HAL_DMA_Abort_IT>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d034      	beq.n	80072fc <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800729c:	4610      	mov	r0, r2
 800729e:	4798      	blx	r3
 80072a0:	e02c      	b.n	80072fc <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b2a      	cmp	r3, #42	; 0x2a
 80072ac:	d126      	bne.n	80072fc <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072bc:	d11e      	bne.n	80072fc <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072cc:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d012      	beq.n	80072fc <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072da:	4a5a      	ldr	r2, [pc, #360]	; (8007444 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>)
 80072dc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fb f8fd 	bl	80024e2 <HAL_DMA_Abort_IT>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d006      	beq.n	80072fc <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80072f8:	4610      	mov	r0, r2
 80072fa:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	222a      	movs	r2, #42	; 0x2a
 8007300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2220      	movs	r2, #32
 8007308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007320:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	88fa      	ldrh	r2, [r7, #6]
 800732c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007332:	b29a      	uxth	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4a41      	ldr	r2, [pc, #260]	; (8007448 <HAL_I2C_Slave_Seq_Receive_DMA+0x264>)
 8007342:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d020      	beq.n	800738e <HAL_I2C_Slave_Seq_Receive_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007350:	4a3e      	ldr	r2, [pc, #248]	; (800744c <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 8007352:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007358:	4a3d      	ldr	r2, [pc, #244]	; (8007450 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
 800735a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007360:	2200      	movs	r2, #0
 8007362:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007368:	2200      	movs	r2, #0
 800736a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3324      	adds	r3, #36	; 0x24
 8007376:	4619      	mov	r1, r3
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737e:	f7fb f812 	bl	80023a6 <HAL_DMA_Start_IT>
 8007382:	4603      	mov	r3, r0
 8007384:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d12b      	bne.n	80073e4 <HAL_I2C_Slave_Seq_Receive_DMA+0x200>
 800738c:	e013      	b.n	80073b6 <HAL_I2C_Slave_Seq_Receive_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2228      	movs	r2, #40	; 0x28
 8007392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e042      	b.n	800743c <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	851a      	strh	r2, [r3, #40]	; 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	0c1b      	lsrs	r3, r3, #16
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d118      	bne.n	8007414 <HAL_I2C_Slave_Seq_Receive_DMA+0x230>
 80073e2:	e013      	b.n	800740c <HAL_I2C_Slave_Seq_Receive_DMA+0x228>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2228      	movs	r2, #40	; 0x28
 80073e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f8:	f043 0210 	orr.w	r2, r3, #16
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e017      	b.n	800743c <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2208      	movs	r2, #8
 8007412:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 800741c:	f248 0102 	movw	r1, #32770	; 0x8002
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f001 fd9b 	bl	8008f5c <I2C_Enable_IRQ>

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007434:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	e000      	b.n	800743c <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
  }
  else
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
  }
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	08008ba7 	.word	0x08008ba7
 8007448:	08007deb 	.word	0x08007deb
 800744c:	08008b33 	.word	0x08008b33
 8007450:	08008b79 	.word	0x08008b79

08007454 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b20      	cmp	r3, #32
 8007466:	d10d      	bne.n	8007484 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2228      	movs	r2, #40	; 0x28
 800746c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a07      	ldr	r2, [pc, #28]	; (8007490 <HAL_I2C_EnableListen_IT+0x3c>)
 8007474:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f001 fd6e 	bl	8008f5c <I2C_Enable_IRQ>

    return HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	e000      	b.n	8007486 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8007484:	2302      	movs	r3, #2
  }
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	080079ff 	.word	0x080079ff

08007494 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b28      	cmp	r3, #40	; 0x28
 80074a6:	d121      	bne.n	80074ec <HAL_I2C_DisableListen_IT+0x58>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	f003 0303 	and.w	r3, r3, #3
 80074b4:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	461a      	mov	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->XferISR = NULL;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable the Address Match interrupt */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80074de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fd9e 	bl	8009024 <I2C_Disable_IRQ>

    return HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	e000      	b.n	80074ee <HAL_I2C_DisableListen_IT+0x5a>
  }
  else
  {
    return HAL_BUSY;
 80074ec:	2302      	movs	r3, #2
  }
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	807b      	strh	r3, [r7, #2]
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b10      	cmp	r3, #16
 800750e:	d13c      	bne.n	800758a <HAL_I2C_Master_Abort_IT+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007516:	2b01      	cmp	r3, #1
 8007518:	d101      	bne.n	800751e <HAL_I2C_Master_Abort_IT+0x26>
 800751a:	2302      	movs	r3, #2
 800751c:	e036      	b.n	800758c <HAL_I2C_Master_Abort_IT+0x94>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Disable Interrupts and Store Previous state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b21      	cmp	r3, #33	; 0x21
 8007530:	d107      	bne.n	8007542 <HAL_I2C_Master_Abort_IT+0x4a>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007532:	2101      	movs	r1, #1
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 fd75 	bl	8009024 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2211      	movs	r2, #17
 800753e:	631a      	str	r2, [r3, #48]	; 0x30
 8007540:	e00c      	b.n	800755c <HAL_I2C_Master_Abort_IT+0x64>
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b22      	cmp	r3, #34	; 0x22
 800754c:	d106      	bne.n	800755c <HAL_I2C_Master_Abort_IT+0x64>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800754e:	2102      	movs	r1, #2
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 fd67 	bl	8009024 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2212      	movs	r2, #18
 800755a:	631a      	str	r2, [r3, #48]	; 0x30
    {
      /* Do nothing */
    }

    /* Set State at HAL_I2C_STATE_ABORT */
    hi2c->State = HAL_I2C_STATE_ABORT;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2260      	movs	r2, #96	; 0x60
 8007560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set NBYTES to 1 to generate a dummy read on I2C peripheral */
    /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */
    I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
 8007564:	8879      	ldrh	r1, [r7, #2]
 8007566:	4b0b      	ldr	r3, [pc, #44]	; (8007594 <HAL_I2C_Master_Abort_IT+0x9c>)
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800756e:	2201      	movs	r2, #1
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 fcc5 	bl	8008f00 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800757e:	2120      	movs	r1, #32
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 fceb 	bl	8008f5c <I2C_Enable_IRQ>

    return HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	e000      	b.n	800758c <HAL_I2C_Master_Abort_IT+0x94>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
  }
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	80004000 	.word	0x80004000

08007598 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d005      	beq.n	80075c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	68f9      	ldr	r1, [r7, #12]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	4798      	blx	r3
  }
}
 80075c4:	bf00      	nop
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	0a1b      	lsrs	r3, r3, #8
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d010      	beq.n	8007612 <HAL_I2C_ER_IRQHandler+0x46>
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	09db      	lsrs	r3, r3, #7
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007600:	f043 0201 	orr.w	r2, r3, #1
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007610:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	0a9b      	lsrs	r3, r3, #10
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d010      	beq.n	8007640 <HAL_I2C_ER_IRQHandler+0x74>
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	09db      	lsrs	r3, r3, #7
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762e:	f043 0208 	orr.w	r2, r3, #8
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800763e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	0a5b      	lsrs	r3, r3, #9
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	2b00      	cmp	r3, #0
 800764a:	d010      	beq.n	800766e <HAL_I2C_ER_IRQHandler+0xa2>
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	09db      	lsrs	r3, r3, #7
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00a      	beq.n	800766e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765c:	f043 0202 	orr.w	r2, r3, #2
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800766c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007672:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f003 030b 	and.w	r3, r3, #11
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800767e:	68f9      	ldr	r1, [r7, #12]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f001 f885 	bl	8008790 <I2C_ITError>
  }
}
 8007686:	bf00      	nop
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	460b      	mov	r3, r1
 80076e8:	70fb      	strb	r3, [r7, #3]
 80076ea:	4613      	mov	r3, r2
 80076ec:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007702:	bf00      	nop
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800772a:	bf00      	nop
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800776c:	b2db      	uxtb	r3, r3
}
 800776e:	4618      	mov	r0, r3
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007788:	b2db      	uxtb	r3, r3
}
 800778a:	4618      	mov	r0, r3
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b088      	sub	sp, #32
 80077b2:	af02      	add	r7, sp, #8
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d101      	bne.n	80077cc <I2C_Master_ISR_IT+0x1e>
 80077c8:	2302      	movs	r3, #2
 80077ca:	e114      	b.n	80079f6 <I2C_Master_ISR_IT+0x248>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	091b      	lsrs	r3, r3, #4
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d013      	beq.n	8007808 <I2C_Master_ISR_IT+0x5a>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	091b      	lsrs	r3, r3, #4
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00d      	beq.n	8007808 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2210      	movs	r2, #16
 80077f2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f8:	f043 0204 	orr.w	r2, r3, #4
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f001 f8bc 	bl	800897e <I2C_Flush_TXDR>
 8007806:	e0e1      	b.n	80079cc <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	089b      	lsrs	r3, r3, #2
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	2b00      	cmp	r3, #0
 8007812:	d023      	beq.n	800785c <I2C_Master_ISR_IT+0xae>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	089b      	lsrs	r3, r3, #2
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01d      	beq.n	800785c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f023 0304 	bic.w	r3, r3, #4
 8007826:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	b2d2      	uxtb	r2, r2
 8007834:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007844:	3b01      	subs	r3, #1
 8007846:	b29a      	uxth	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007850:	b29b      	uxth	r3, r3
 8007852:	3b01      	subs	r3, #1
 8007854:	b29a      	uxth	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	855a      	strh	r2, [r3, #42]	; 0x2a
 800785a:	e0b7      	b.n	80079cc <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	085b      	lsrs	r3, r3, #1
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01e      	beq.n	80078a6 <I2C_Master_ISR_IT+0xf8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	085b      	lsrs	r3, r3, #1
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d018      	beq.n	80078a6 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	781a      	ldrb	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	1c5a      	adds	r2, r3, #1
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800788e:	3b01      	subs	r3, #1
 8007890:	b29a      	uxth	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789a:	b29b      	uxth	r3, r3
 800789c:	3b01      	subs	r3, #1
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078a4:	e092      	b.n	80079cc <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	09db      	lsrs	r3, r3, #7
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d05d      	beq.n	800796e <I2C_Master_ISR_IT+0x1c0>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	099b      	lsrs	r3, r3, #6
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d057      	beq.n	800796e <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d040      	beq.n	800794a <I2C_Master_ISR_IT+0x19c>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d13c      	bne.n	800794a <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078dc:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	2bff      	cmp	r3, #255	; 0xff
 80078e6:	d90e      	bls.n	8007906 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	22ff      	movs	r2, #255	; 0xff
 80078ec:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	8a79      	ldrh	r1, [r7, #18]
 80078f6:	2300      	movs	r3, #0
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f001 fafe 	bl	8008f00 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007904:	e032      	b.n	800796c <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790a:	b29a      	uxth	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007918:	d00b      	beq.n	8007932 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800791e:	b2da      	uxtb	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	8a79      	ldrh	r1, [r7, #18]
 8007926:	2000      	movs	r0, #0
 8007928:	9000      	str	r0, [sp, #0]
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f001 fae8 	bl	8008f00 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007930:	e01c      	b.n	800796c <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007936:	b2da      	uxtb	r2, r3
 8007938:	8a79      	ldrh	r1, [r7, #18]
 800793a:	2300      	movs	r3, #0
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f001 fadc 	bl	8008f00 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007948:	e010      	b.n	800796c <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007954:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007958:	d003      	beq.n	8007962 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f000 fc52 	bl	8008204 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007960:	e034      	b.n	80079cc <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007962:	2140      	movs	r1, #64	; 0x40
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 ff13 	bl	8008790 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800796a:	e02f      	b.n	80079cc <I2C_Master_ISR_IT+0x21e>
 800796c:	e02e      	b.n	80079cc <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	099b      	lsrs	r3, r3, #6
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d028      	beq.n	80079cc <I2C_Master_ISR_IT+0x21e>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	099b      	lsrs	r3, r3, #6
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	d022      	beq.n	80079cc <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798a:	b29b      	uxth	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d119      	bne.n	80079c4 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800799a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800799e:	d015      	beq.n	80079cc <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079a8:	d108      	bne.n	80079bc <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079b8:	605a      	str	r2, [r3, #4]
 80079ba:	e007      	b.n	80079cc <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 fc21 	bl	8008204 <I2C_ITMasterSeqCplt>
 80079c2:	e003      	b.n	80079cc <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80079c4:	2140      	movs	r1, #64	; 0x40
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 fee2 	bl	8008790 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	095b      	lsrs	r3, r3, #5
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d009      	beq.n	80079ec <I2C_Master_ISR_IT+0x23e>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80079e4:	6979      	ldr	r1, [r7, #20]
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 fca8 	bl	800833c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b086      	sub	sp, #24
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <I2C_Slave_ISR_IT+0x24>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e0ec      	b.n	8007bfc <I2C_Slave_ISR_IT+0x1fe>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <I2C_Slave_ISR_IT+0x4c>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	095b      	lsrs	r3, r3, #5
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007a42:	6939      	ldr	r1, [r7, #16]
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 fd43 	bl	80084d0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	091b      	lsrs	r3, r3, #4
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d04d      	beq.n	8007af2 <I2C_Slave_ISR_IT+0xf4>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	091b      	lsrs	r3, r3, #4
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d047      	beq.n	8007af2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d128      	bne.n	8007abe <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b28      	cmp	r3, #40	; 0x28
 8007a76:	d108      	bne.n	8007a8a <I2C_Slave_ISR_IT+0x8c>
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a7e:	d104      	bne.n	8007a8a <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007a80:	6939      	ldr	r1, [r7, #16]
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 fe2e 	bl	80086e4 <I2C_ITListenCplt>
 8007a88:	e032      	b.n	8007af0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b29      	cmp	r3, #41	; 0x29
 8007a94:	d10e      	bne.n	8007ab4 <I2C_Slave_ISR_IT+0xb6>
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a9c:	d00a      	beq.n	8007ab4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2210      	movs	r2, #16
 8007aa4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 ff69 	bl	800897e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 fbe6 	bl	800827e <I2C_ITSlaveSeqCplt>
 8007ab2:	e01d      	b.n	8007af0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2210      	movs	r2, #16
 8007aba:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007abc:	e096      	b.n	8007bec <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2210      	movs	r2, #16
 8007ac4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aca:	f043 0204 	orr.w	r2, r3, #4
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d004      	beq.n	8007ae2 <I2C_Slave_ISR_IT+0xe4>
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ade:	f040 8085 	bne.w	8007bec <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 fe51 	bl	8008790 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007aee:	e07d      	b.n	8007bec <I2C_Slave_ISR_IT+0x1ee>
 8007af0:	e07c      	b.n	8007bec <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	089b      	lsrs	r3, r3, #2
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d030      	beq.n	8007b60 <I2C_Slave_ISR_IT+0x162>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	089b      	lsrs	r3, r3, #2
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d02a      	beq.n	8007b60 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d018      	beq.n	8007b46 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	b2d2      	uxtb	r2, r2
 8007b20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b30:	3b01      	subs	r3, #1
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d14f      	bne.n	8007bf0 <I2C_Slave_ISR_IT+0x1f2>
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b56:	d04b      	beq.n	8007bf0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fb90 	bl	800827e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007b5e:	e047      	b.n	8007bf0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	08db      	lsrs	r3, r3, #3
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00a      	beq.n	8007b82 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	08db      	lsrs	r3, r3, #3
 8007b70:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d004      	beq.n	8007b82 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007b78:	6939      	ldr	r1, [r7, #16]
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 fabe 	bl	80080fc <I2C_ITAddrCplt>
 8007b80:	e037      	b.n	8007bf2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	085b      	lsrs	r3, r3, #1
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d031      	beq.n	8007bf2 <I2C_Slave_ISR_IT+0x1f4>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	085b      	lsrs	r3, r3, #1
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d02b      	beq.n	8007bf2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d018      	beq.n	8007bd6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	781a      	ldrb	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	851a      	strh	r2, [r3, #40]	; 0x28
 8007bd4:	e00d      	b.n	8007bf2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bdc:	d002      	beq.n	8007be4 <I2C_Slave_ISR_IT+0x1e6>
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d106      	bne.n	8007bf2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 fb4a 	bl	800827e <I2C_ITSlaveSeqCplt>
 8007bea:	e002      	b.n	8007bf2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8007bec:	bf00      	nop
 8007bee:	e000      	b.n	8007bf2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8007bf0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d101      	bne.n	8007c1e <I2C_Master_ISR_DMA+0x1a>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e0e1      	b.n	8007de2 <I2C_Master_ISR_DMA+0x1de>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	091b      	lsrs	r3, r3, #4
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d017      	beq.n	8007c62 <I2C_Master_ISR_DMA+0x5e>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	091b      	lsrs	r3, r3, #4
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d011      	beq.n	8007c62 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2210      	movs	r2, #16
 8007c44:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4a:	f043 0204 	orr.w	r2, r3, #4
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007c52:	2120      	movs	r1, #32
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f001 f981 	bl	8008f5c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 fe8f 	bl	800897e <I2C_Flush_TXDR>
 8007c60:	e0ba      	b.n	8007dd8 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	09db      	lsrs	r3, r3, #7
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d072      	beq.n	8007d54 <I2C_Master_ISR_DMA+0x150>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	099b      	lsrs	r3, r3, #6
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d06c      	beq.n	8007d54 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c88:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d04e      	beq.n	8007d32 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ca0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2bff      	cmp	r3, #255	; 0xff
 8007caa:	d906      	bls.n	8007cba <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	22ff      	movs	r2, #255	; 0xff
 8007cb0:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8007cb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	e010      	b.n	8007cdc <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ccc:	d003      	beq.n	8007cd6 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	617b      	str	r3, [r7, #20]
 8007cd4:	e002      	b.n	8007cdc <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007cd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cda:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	8a79      	ldrh	r1, [r7, #18]
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f001 f908 	bl	8008f00 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b22      	cmp	r3, #34	; 0x22
 8007d0c:	d108      	bne.n	8007d20 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d1c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007d1e:	e05b      	b.n	8007dd8 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d2e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007d30:	e052      	b.n	8007dd8 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d40:	d003      	beq.n	8007d4a <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 fa5e 	bl	8008204 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007d48:	e046      	b.n	8007dd8 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007d4a:	2140      	movs	r1, #64	; 0x40
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 fd1f 	bl	8008790 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007d52:	e041      	b.n	8007dd8 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	099b      	lsrs	r3, r3, #6
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d029      	beq.n	8007db4 <I2C_Master_ISR_DMA+0x1b0>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	099b      	lsrs	r3, r3, #6
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d023      	beq.n	8007db4 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d119      	bne.n	8007daa <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d84:	d027      	beq.n	8007dd6 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d8e:	d108      	bne.n	8007da2 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d9e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007da0:	e019      	b.n	8007dd6 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f000 fa2e 	bl	8008204 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007da8:	e015      	b.n	8007dd6 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007daa:	2140      	movs	r1, #64	; 0x40
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 fcef 	bl	8008790 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007db2:	e010      	b.n	8007dd6 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	095b      	lsrs	r3, r3, #5
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00b      	beq.n	8007dd8 <I2C_Master_ISR_DMA+0x1d4>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	095b      	lsrs	r3, r3, #5
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d005      	beq.n	8007dd8 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007dcc:	68b9      	ldr	r1, [r7, #8]
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 fab4 	bl	800833c <I2C_ITMasterCplt>
 8007dd4:	e000      	b.n	8007dd8 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8007dd6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b088      	sub	sp, #32
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	60b9      	str	r1, [r7, #8]
 8007df4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfa:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d101      	bne.n	8007e0e <I2C_Slave_ISR_DMA+0x24>
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	e0c9      	b.n	8007fa2 <I2C_Slave_ISR_DMA+0x1b8>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	095b      	lsrs	r3, r3, #5
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <I2C_Slave_ISR_DMA+0x4c>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	095b      	lsrs	r3, r3, #5
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007e2e:	68b9      	ldr	r1, [r7, #8]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 fb4d 	bl	80084d0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	091b      	lsrs	r3, r3, #4
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 809a 	beq.w	8007f78 <I2C_Slave_ISR_DMA+0x18e>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	091b      	lsrs	r3, r3, #4
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 8093 	beq.w	8007f78 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	0b9b      	lsrs	r3, r3, #14
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d105      	bne.n	8007e6a <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	0bdb      	lsrs	r3, r3, #15
 8007e62:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d07f      	beq.n	8007f6a <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00d      	beq.n	8007e8e <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	0bdb      	lsrs	r3, r3, #15
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d007      	beq.n	8007e8e <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00d      	beq.n	8007eb2 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	0b9b      	lsrs	r3, r3, #14
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d128      	bne.n	8007f0a <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b28      	cmp	r3, #40	; 0x28
 8007ec2:	d108      	bne.n	8007ed6 <I2C_Slave_ISR_DMA+0xec>
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007eca:	d104      	bne.n	8007ed6 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007ecc:	68b9      	ldr	r1, [r7, #8]
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fc08 	bl	80086e4 <I2C_ITListenCplt>
 8007ed4:	e048      	b.n	8007f68 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b29      	cmp	r3, #41	; 0x29
 8007ee0:	d10e      	bne.n	8007f00 <I2C_Slave_ISR_DMA+0x116>
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ee8:	d00a      	beq.n	8007f00 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2210      	movs	r2, #16
 8007ef0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 fd43 	bl	800897e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 f9c0 	bl	800827e <I2C_ITSlaveSeqCplt>
 8007efe:	e033      	b.n	8007f68 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2210      	movs	r2, #16
 8007f06:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007f08:	e034      	b.n	8007f74 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2210      	movs	r2, #16
 8007f10:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f16:	f043 0204 	orr.w	r2, r3, #4
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f24:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <I2C_Slave_ISR_DMA+0x14a>
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f32:	d11f      	bne.n	8007f74 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
 8007f36:	2b21      	cmp	r3, #33	; 0x21
 8007f38:	d002      	beq.n	8007f40 <I2C_Slave_ISR_DMA+0x156>
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	2b29      	cmp	r3, #41	; 0x29
 8007f3e:	d103      	bne.n	8007f48 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2221      	movs	r2, #33	; 0x21
 8007f44:	631a      	str	r2, [r3, #48]	; 0x30
 8007f46:	e008      	b.n	8007f5a <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	2b22      	cmp	r3, #34	; 0x22
 8007f4c:	d002      	beq.n	8007f54 <I2C_Slave_ISR_DMA+0x16a>
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	2b2a      	cmp	r3, #42	; 0x2a
 8007f52:	d102      	bne.n	8007f5a <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2222      	movs	r2, #34	; 0x22
 8007f58:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5e:	4619      	mov	r1, r3
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 fc15 	bl	8008790 <I2C_ITError>
      if (treatdmanack == 1U)
 8007f66:	e005      	b.n	8007f74 <I2C_Slave_ISR_DMA+0x18a>
 8007f68:	e004      	b.n	8007f74 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2210      	movs	r2, #16
 8007f70:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f72:	e011      	b.n	8007f98 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8007f74:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f76:	e00f      	b.n	8007f98 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	08db      	lsrs	r3, r3, #3
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d009      	beq.n	8007f98 <I2C_Slave_ISR_DMA+0x1ae>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	08db      	lsrs	r3, r3, #3
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007f90:	68b9      	ldr	r1, [r7, #8]
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 f8b2 	bl	80080fc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3720      	adds	r7, #32
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af02      	add	r7, sp, #8
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	461a      	mov	r2, r3
 8007fba:	4603      	mov	r3, r0
 8007fbc:	817b      	strh	r3, [r7, #10]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	813b      	strh	r3, [r7, #8]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007fc6:	88fb      	ldrh	r3, [r7, #6]
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	8979      	ldrh	r1, [r7, #10]
 8007fcc:	4b20      	ldr	r3, [pc, #128]	; (8008050 <I2C_RequestMemoryWrite+0xa4>)
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 ff93 	bl	8008f00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fda:	69fa      	ldr	r2, [r7, #28]
 8007fdc:	69b9      	ldr	r1, [r7, #24]
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 fe3f 	bl	8008c62 <I2C_WaitOnTXISFlagUntilTimeout>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e02c      	b.n	8008048 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fee:	88fb      	ldrh	r3, [r7, #6]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d105      	bne.n	8008000 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ff4:	893b      	ldrh	r3, [r7, #8]
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	629a      	str	r2, [r3, #40]	; 0x28
 8007ffe:	e015      	b.n	800802c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008000:	893b      	ldrh	r3, [r7, #8]
 8008002:	0a1b      	lsrs	r3, r3, #8
 8008004:	b29b      	uxth	r3, r3
 8008006:	b2da      	uxtb	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	69b9      	ldr	r1, [r7, #24]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 fe25 	bl	8008c62 <I2C_WaitOnTXISFlagUntilTimeout>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e012      	b.n	8008048 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008022:	893b      	ldrh	r3, [r7, #8]
 8008024:	b2da      	uxtb	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	2200      	movs	r2, #0
 8008034:	2180      	movs	r1, #128	; 0x80
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 fdd3 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e000      	b.n	8008048 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	80002000 	.word	0x80002000

08008054 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af02      	add	r7, sp, #8
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	4608      	mov	r0, r1
 800805e:	4611      	mov	r1, r2
 8008060:	461a      	mov	r2, r3
 8008062:	4603      	mov	r3, r0
 8008064:	817b      	strh	r3, [r7, #10]
 8008066:	460b      	mov	r3, r1
 8008068:	813b      	strh	r3, [r7, #8]
 800806a:	4613      	mov	r3, r2
 800806c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800806e:	88fb      	ldrh	r3, [r7, #6]
 8008070:	b2da      	uxtb	r2, r3
 8008072:	8979      	ldrh	r1, [r7, #10]
 8008074:	4b20      	ldr	r3, [pc, #128]	; (80080f8 <I2C_RequestMemoryRead+0xa4>)
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	2300      	movs	r3, #0
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 ff40 	bl	8008f00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008080:	69fa      	ldr	r2, [r7, #28]
 8008082:	69b9      	ldr	r1, [r7, #24]
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 fdec 	bl	8008c62 <I2C_WaitOnTXISFlagUntilTimeout>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e02c      	b.n	80080ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008094:	88fb      	ldrh	r3, [r7, #6]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d105      	bne.n	80080a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800809a:	893b      	ldrh	r3, [r7, #8]
 800809c:	b2da      	uxtb	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	629a      	str	r2, [r3, #40]	; 0x28
 80080a4:	e015      	b.n	80080d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80080a6:	893b      	ldrh	r3, [r7, #8]
 80080a8:	0a1b      	lsrs	r3, r3, #8
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080b4:	69fa      	ldr	r2, [r7, #28]
 80080b6:	69b9      	ldr	r1, [r7, #24]
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 fdd2 	bl	8008c62 <I2C_WaitOnTXISFlagUntilTimeout>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e012      	b.n	80080ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080c8:	893b      	ldrh	r3, [r7, #8]
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	2200      	movs	r2, #0
 80080da:	2140      	movs	r1, #64	; 0x40
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f000 fd80 	bl	8008be2 <I2C_WaitOnFlagUntilTimeout>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e000      	b.n	80080ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	80002000 	.word	0x80002000

080080fc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800810c:	b2db      	uxtb	r3, r3
 800810e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008112:	2b28      	cmp	r3, #40	; 0x28
 8008114:	d16a      	bne.n	80081ec <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	0c1b      	lsrs	r3, r3, #16
 800811e:	b2db      	uxtb	r3, r3
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	0c1b      	lsrs	r3, r3, #16
 800812e:	b29b      	uxth	r3, r3
 8008130:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008134:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	b29b      	uxth	r3, r3
 800813e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008142:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	b29b      	uxth	r3, r3
 800814c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008150:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	2b02      	cmp	r3, #2
 8008158:	d138      	bne.n	80081cc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800815a:	897b      	ldrh	r3, [r7, #10]
 800815c:	09db      	lsrs	r3, r3, #7
 800815e:	b29a      	uxth	r2, r3
 8008160:	89bb      	ldrh	r3, [r7, #12]
 8008162:	4053      	eors	r3, r2
 8008164:	b29b      	uxth	r3, r3
 8008166:	f003 0306 	and.w	r3, r3, #6
 800816a:	2b00      	cmp	r3, #0
 800816c:	d11c      	bne.n	80081a8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800816e:	897b      	ldrh	r3, [r7, #10]
 8008170:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008180:	2b02      	cmp	r3, #2
 8008182:	d13b      	bne.n	80081fc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2208      	movs	r2, #8
 8008190:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800819a:	89ba      	ldrh	r2, [r7, #12]
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff fa9c 	bl	80076de <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80081a6:	e029      	b.n	80081fc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80081a8:	893b      	ldrh	r3, [r7, #8]
 80081aa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80081ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 ff37 	bl	8009024 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80081be:	89ba      	ldrh	r2, [r7, #12]
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff fa8a 	bl	80076de <HAL_I2C_AddrCallback>
}
 80081ca:	e017      	b.n	80081fc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80081cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 ff27 	bl	8009024 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80081de:	89ba      	ldrh	r2, [r7, #12]
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff fa7a 	bl	80076de <HAL_I2C_AddrCallback>
}
 80081ea:	e007      	b.n	80081fc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2208      	movs	r2, #8
 80081f2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80081fc:	bf00      	nop
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b21      	cmp	r3, #33	; 0x21
 800821e:	d115      	bne.n	800824c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2220      	movs	r2, #32
 8008224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2211      	movs	r2, #17
 800822c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008234:	2101      	movs	r1, #1
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fef4 	bl	8009024 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7ff fa22 	bl	800768e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800824a:	e014      	b.n	8008276 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2220      	movs	r2, #32
 8008250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2212      	movs	r2, #18
 8008258:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008260:	2102      	movs	r1, #2
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fede 	bl	8009024 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7ff fa16 	bl	80076a2 <HAL_I2C_MasterRxCpltCallback>
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	0b9b      	lsrs	r3, r3, #14
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d008      	beq.n	80082b4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	e00d      	b.n	80082d0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	0bdb      	lsrs	r3, r3, #15
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d007      	beq.n	80082d0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082ce:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b29      	cmp	r3, #41	; 0x29
 80082da:	d112      	bne.n	8008302 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2228      	movs	r2, #40	; 0x28
 80082e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2221      	movs	r2, #33	; 0x21
 80082e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80082ea:	2101      	movs	r1, #1
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fe99 	bl	8009024 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff f9db 	bl	80076b6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008300:	e017      	b.n	8008332 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b2a      	cmp	r3, #42	; 0x2a
 800830c:	d111      	bne.n	8008332 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2228      	movs	r2, #40	; 0x28
 8008312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2222      	movs	r2, #34	; 0x22
 800831a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800831c:	2102      	movs	r1, #2
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fe80 	bl	8009024 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff f9cc 	bl	80076ca <HAL_I2C_SlaveRxCpltCallback>
}
 8008332:	bf00      	nop
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2220      	movs	r2, #32
 8008350:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b21      	cmp	r3, #33	; 0x21
 800835c:	d107      	bne.n	800836e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800835e:	2101      	movs	r1, #1
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fe5f 	bl	8009024 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2211      	movs	r2, #17
 800836a:	631a      	str	r2, [r3, #48]	; 0x30
 800836c:	e00c      	b.n	8008388 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b22      	cmp	r3, #34	; 0x22
 8008378:	d106      	bne.n	8008388 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800837a:	2102      	movs	r1, #2
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fe51 	bl	8009024 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2212      	movs	r2, #18
 8008386:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6859      	ldr	r1, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	4b4d      	ldr	r3, [pc, #308]	; (80084c8 <I2C_ITMasterCplt+0x18c>)
 8008394:	400b      	ands	r3, r1
 8008396:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a4a      	ldr	r2, [pc, #296]	; (80084cc <I2C_ITMasterCplt+0x190>)
 80083a2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	091b      	lsrs	r3, r3, #4
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d009      	beq.n	80083c4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2210      	movs	r2, #16
 80083b6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083bc:	f043 0204 	orr.w	r2, r3, #4
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b60      	cmp	r3, #96	; 0x60
 80083ce:	d10b      	bne.n	80083e8 <I2C_ITMasterCplt+0xac>
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	089b      	lsrs	r3, r3, #2
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d005      	beq.n	80083e8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80083e6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fac8 	bl	800897e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b60      	cmp	r3, #96	; 0x60
 80083fe:	d002      	beq.n	8008406 <I2C_ITMasterCplt+0xca>
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d006      	beq.n	8008414 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f9bf 	bl	8008790 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008412:	e054      	b.n	80084be <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b21      	cmp	r3, #33	; 0x21
 800841e:	d124      	bne.n	800846a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2220      	movs	r2, #32
 8008424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b40      	cmp	r3, #64	; 0x40
 8008438:	d10b      	bne.n	8008452 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff f95f 	bl	800770e <HAL_I2C_MemTxCpltCallback>
}
 8008450:	e035      	b.n	80084be <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7ff f913 	bl	800768e <HAL_I2C_MasterTxCpltCallback>
}
 8008468:	e029      	b.n	80084be <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b22      	cmp	r3, #34	; 0x22
 8008474:	d123      	bne.n	80084be <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2220      	movs	r2, #32
 800847a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b40      	cmp	r3, #64	; 0x40
 800848e:	d10b      	bne.n	80084a8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f7ff f93e 	bl	8007722 <HAL_I2C_MemRxCpltCallback>
}
 80084a6:	e00a      	b.n	80084be <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff f8f2 	bl	80076a2 <HAL_I2C_MasterRxCpltCallback>
}
 80084be:	bf00      	nop
 80084c0:	3718      	adds	r7, #24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	fe00e800 	.word	0xfe00e800
 80084cc:	ffff0000 	.word	0xffff0000

080084d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084ec:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2220      	movs	r2, #32
 80084f4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	2b21      	cmp	r3, #33	; 0x21
 80084fa:	d002      	beq.n	8008502 <I2C_ITSlaveCplt+0x32>
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	2b29      	cmp	r3, #41	; 0x29
 8008500:	d108      	bne.n	8008514 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008502:	f248 0101 	movw	r1, #32769	; 0x8001
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fd8c 	bl	8009024 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2221      	movs	r2, #33	; 0x21
 8008510:	631a      	str	r2, [r3, #48]	; 0x30
 8008512:	e00d      	b.n	8008530 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	2b22      	cmp	r3, #34	; 0x22
 8008518:	d002      	beq.n	8008520 <I2C_ITSlaveCplt+0x50>
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	2b2a      	cmp	r3, #42	; 0x2a
 800851e:	d107      	bne.n	8008530 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008520:	f248 0102 	movw	r1, #32770	; 0x8002
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fd7d 	bl	8009024 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2222      	movs	r2, #34	; 0x22
 800852e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800853e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6859      	ldr	r1, [r3, #4]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	4b64      	ldr	r3, [pc, #400]	; (80086dc <I2C_ITSlaveCplt+0x20c>)
 800854c:	400b      	ands	r3, r1
 800854e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fa14 	bl	800897e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	0b9b      	lsrs	r3, r3, #14
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d013      	beq.n	800858a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008570:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	2b00      	cmp	r3, #0
 8008578:	d020      	beq.n	80085bc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	b29a      	uxth	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008588:	e018      	b.n	80085bc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	0bdb      	lsrs	r3, r3, #15
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d012      	beq.n	80085bc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085a4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d006      	beq.n	80085bc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	089b      	lsrs	r3, r3, #2
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d020      	beq.n	800860a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f023 0304 	bic.w	r3, r3, #4
 80085ce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085da:	b2d2      	uxtb	r2, r2
 80085dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00c      	beq.n	800860a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085f4:	3b01      	subs	r3, #1
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008600:	b29b      	uxth	r3, r3
 8008602:	3b01      	subs	r3, #1
 8008604:	b29a      	uxth	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800860e:	b29b      	uxth	r3, r3
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008618:	f043 0204 	orr.w	r2, r3, #4
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008632:	2b00      	cmp	r3, #0
 8008634:	d010      	beq.n	8008658 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f8a7 	bl	8008790 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b28      	cmp	r3, #40	; 0x28
 800864c:	d141      	bne.n	80086d2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800864e:	6979      	ldr	r1, [r7, #20]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f847 	bl	80086e4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008656:	e03c      	b.n	80086d2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008660:	d014      	beq.n	800868c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff fe0b 	bl	800827e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a1d      	ldr	r2, [pc, #116]	; (80086e0 <I2C_ITSlaveCplt+0x210>)
 800866c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2220      	movs	r2, #32
 8008672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff f838 	bl	80076fa <HAL_I2C_ListenCpltCallback>
}
 800868a:	e022      	b.n	80086d2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b22      	cmp	r3, #34	; 0x22
 8008696:	d10e      	bne.n	80086b6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2220      	movs	r2, #32
 800869c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7ff f80b 	bl	80076ca <HAL_I2C_SlaveRxCpltCallback>
}
 80086b4:	e00d      	b.n	80086d2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2220      	movs	r2, #32
 80086ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7fe fff2 	bl	80076b6 <HAL_I2C_SlaveTxCpltCallback>
}
 80086d2:	bf00      	nop
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	fe00e800 	.word	0xfe00e800
 80086e0:	ffff0000 	.word	0xffff0000

080086e4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a26      	ldr	r2, [pc, #152]	; (800878c <I2C_ITListenCplt+0xa8>)
 80086f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	089b      	lsrs	r3, r3, #2
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b00      	cmp	r3, #0
 800871a:	d022      	beq.n	8008762 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	b2d2      	uxtb	r2, r2
 8008728:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008738:	2b00      	cmp	r3, #0
 800873a:	d012      	beq.n	8008762 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008740:	3b01      	subs	r3, #1
 8008742:	b29a      	uxth	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800874c:	b29b      	uxth	r3, r3
 800874e:	3b01      	subs	r3, #1
 8008750:	b29a      	uxth	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800875a:	f043 0204 	orr.w	r2, r3, #4
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008762:	f248 0103 	movw	r1, #32771	; 0x8003
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fc5c 	bl	8009024 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2210      	movs	r2, #16
 8008772:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7fe ffbc 	bl	80076fa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008782:	bf00      	nop
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	ffff0000 	.word	0xffff0000

08008790 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a5d      	ldr	r2, [pc, #372]	; (8008924 <I2C_ITError+0x194>)
 80087ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	431a      	orrs	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	2b28      	cmp	r3, #40	; 0x28
 80087c6:	d005      	beq.n	80087d4 <I2C_ITError+0x44>
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
 80087ca:	2b29      	cmp	r3, #41	; 0x29
 80087cc:	d002      	beq.n	80087d4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	2b2a      	cmp	r3, #42	; 0x2a
 80087d2:	d10b      	bne.n	80087ec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80087d4:	2103      	movs	r1, #3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fc24 	bl	8009024 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2228      	movs	r2, #40	; 0x28
 80087e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a50      	ldr	r2, [pc, #320]	; (8008928 <I2C_ITError+0x198>)
 80087e8:	635a      	str	r2, [r3, #52]	; 0x34
 80087ea:	e011      	b.n	8008810 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80087ec:	f248 0103 	movw	r1, #32771	; 0x8003
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fc17 	bl	8009024 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b60      	cmp	r3, #96	; 0x60
 8008800:	d003      	beq.n	800880a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2220      	movs	r2, #32
 8008806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008814:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881a:	2b00      	cmp	r3, #0
 800881c:	d039      	beq.n	8008892 <I2C_ITError+0x102>
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2b11      	cmp	r3, #17
 8008822:	d002      	beq.n	800882a <I2C_ITError+0x9a>
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b21      	cmp	r3, #33	; 0x21
 8008828:	d133      	bne.n	8008892 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008838:	d107      	bne.n	800884a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008848:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884e:	4618      	mov	r0, r3
 8008850:	f7fa f87e 	bl	8002950 <HAL_DMA_GetState>
 8008854:	4603      	mov	r3, r0
 8008856:	2b01      	cmp	r3, #1
 8008858:	d017      	beq.n	800888a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885e:	4a33      	ldr	r2, [pc, #204]	; (800892c <I2C_ITError+0x19c>)
 8008860:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886e:	4618      	mov	r0, r3
 8008870:	f7f9 fe37 	bl	80024e2 <HAL_DMA_Abort_IT>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d04d      	beq.n	8008916 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008884:	4610      	mov	r0, r2
 8008886:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008888:	e045      	b.n	8008916 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f850 	bl	8008930 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008890:	e041      	b.n	8008916 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d039      	beq.n	800890e <I2C_ITError+0x17e>
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2b12      	cmp	r3, #18
 800889e:	d002      	beq.n	80088a6 <I2C_ITError+0x116>
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2b22      	cmp	r3, #34	; 0x22
 80088a4:	d133      	bne.n	800890e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088b4:	d107      	bne.n	80088c6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088c4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fa f840 	bl	8002950 <HAL_DMA_GetState>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d017      	beq.n	8008906 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088da:	4a14      	ldr	r2, [pc, #80]	; (800892c <I2C_ITError+0x19c>)
 80088dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7f9 fdf9 	bl	80024e2 <HAL_DMA_Abort_IT>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d011      	beq.n	800891a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008904:	e009      	b.n	800891a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f812 	bl	8008930 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800890c:	e005      	b.n	800891a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f80e 	bl	8008930 <I2C_TreatErrorCallback>
  }
}
 8008914:	e002      	b.n	800891c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008916:	bf00      	nop
 8008918:	e000      	b.n	800891c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800891a:	bf00      	nop
}
 800891c:	bf00      	nop
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	ffff0000 	.word	0xffff0000
 8008928:	080079ff 	.word	0x080079ff
 800892c:	08008ba7 	.word	0x08008ba7

08008930 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b60      	cmp	r3, #96	; 0x60
 8008942:	d10e      	bne.n	8008962 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2220      	movs	r2, #32
 8008948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7fe fef5 	bl	800774a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008960:	e009      	b.n	8008976 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7fe fee0 	bl	8007736 <HAL_I2C_ErrorCallback>
}
 8008976:	bf00      	nop
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800897e:	b480      	push	{r7}
 8008980:	b083      	sub	sp, #12
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b02      	cmp	r3, #2
 8008992:	d103      	bne.n	800899c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2200      	movs	r2, #0
 800899a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d007      	beq.n	80089ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	699a      	ldr	r2, [r3, #24]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f042 0201 	orr.w	r2, r2, #1
 80089b8:	619a      	str	r2, [r3, #24]
  }
}
 80089ba:	bf00      	nop
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80089e2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d104      	bne.n	80089f8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80089ee:	2120      	movs	r1, #32
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fab3 	bl	8008f5c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80089f6:	e02d      	b.n	8008a54 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008a00:	441a      	add	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	2bff      	cmp	r3, #255	; 0xff
 8008a0e:	d903      	bls.n	8008a18 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	22ff      	movs	r2, #255	; 0xff
 8008a14:	851a      	strh	r2, [r3, #40]	; 0x28
 8008a16:	e004      	b.n	8008a22 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	3328      	adds	r3, #40	; 0x28
 8008a32:	461a      	mov	r2, r3
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a38:	f7f9 fcb5 	bl	80023a6 <HAL_DMA_Start_IT>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d004      	beq.n	8008a4c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008a42:	2110      	movs	r1, #16
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f7ff fea3 	bl	8008790 <I2C_ITError>
}
 8008a4a:	e003      	b.n	8008a54 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008a4c:	2140      	movs	r1, #64	; 0x40
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 fa84 	bl	8008f5c <I2C_Enable_IRQ>
}
 8008a54:	bf00      	nop
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a76:	d002      	beq.n	8008a7e <I2C_DMASlaveTransmitCplt+0x22>
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10a      	bne.n	8008a94 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a8c:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f7ff fbf5 	bl	800827e <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8008a94:	bf00      	nop
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ab8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d104      	bne.n	8008ace <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008ac4:	2120      	movs	r1, #32
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 fa48 	bl	8008f5c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008acc:	e02d      	b.n	8008b2a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008ad6:	441a      	add	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	2bff      	cmp	r3, #255	; 0xff
 8008ae4:	d903      	bls.n	8008aee <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	22ff      	movs	r2, #255	; 0xff
 8008aea:	851a      	strh	r2, [r3, #40]	; 0x28
 8008aec:	e004      	b.n	8008af8 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3324      	adds	r3, #36	; 0x24
 8008b02:	4619      	mov	r1, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	461a      	mov	r2, r3
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b0e:	f7f9 fc4a 	bl	80023a6 <HAL_DMA_Start_IT>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d004      	beq.n	8008b22 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008b18:	2110      	movs	r1, #16
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f7ff fe38 	bl	8008790 <I2C_ITError>
}
 8008b20:	e003      	b.n	8008b2a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008b22:	2140      	movs	r1, #64	; 0x40
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 fa19 	bl	8008f5c <I2C_Enable_IRQ>
}
 8008b2a:	bf00      	nop
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b44:	60bb      	str	r3, [r7, #8]

  if ((__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U) && \
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10e      	bne.n	8008b70 <I2C_DMASlaveReceiveCplt+0x3e>
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008b58:	d00a      	beq.n	8008b70 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b68:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f7ff fb87 	bl	800827e <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8008b70:	bf00      	nop
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b84:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b94:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008b96:	2110      	movs	r1, #16
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f7ff fdf9 	bl	8008790 <I2C_ITError>
}
 8008b9e:	bf00      	nop
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d003      	beq.n	8008bc4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d003      	beq.n	8008bd4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff feab 	bl	8008930 <I2C_TreatErrorCallback>
}
 8008bda:	bf00      	nop
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	60f8      	str	r0, [r7, #12]
 8008bea:	60b9      	str	r1, [r7, #8]
 8008bec:	603b      	str	r3, [r7, #0]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bf2:	e022      	b.n	8008c3a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfa:	d01e      	beq.n	8008c3a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bfc:	f7f8 fd28 	bl	8001650 <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d302      	bcc.n	8008c12 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d113      	bne.n	8008c3a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c16:	f043 0220 	orr.w	r2, r3, #32
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2220      	movs	r2, #32
 8008c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e00f      	b.n	8008c5a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	699a      	ldr	r2, [r3, #24]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	4013      	ands	r3, r2
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	bf0c      	ite	eq
 8008c4a:	2301      	moveq	r3, #1
 8008c4c:	2300      	movne	r3, #0
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	461a      	mov	r2, r3
 8008c52:	79fb      	ldrb	r3, [r7, #7]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d0cd      	beq.n	8008bf4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c6e:	e02c      	b.n	8008cca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	68b9      	ldr	r1, [r7, #8]
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 f8dd 	bl	8008e34 <I2C_IsAcknowledgeFailed>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d001      	beq.n	8008c84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e02a      	b.n	8008cda <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8a:	d01e      	beq.n	8008cca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c8c:	f7f8 fce0 	bl	8001650 <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d302      	bcc.n	8008ca2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d113      	bne.n	8008cca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca6:	f043 0220 	orr.w	r2, r3, #32
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e007      	b.n	8008cda <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d1cb      	bne.n	8008c70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	60b9      	str	r1, [r7, #8]
 8008cec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008cee:	e028      	b.n	8008d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	68b9      	ldr	r1, [r7, #8]
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 f89d 	bl	8008e34 <I2C_IsAcknowledgeFailed>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e026      	b.n	8008d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d04:	f7f8 fca4 	bl	8001650 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d302      	bcc.n	8008d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d113      	bne.n	8008d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d1e:	f043 0220 	orr.w	r2, r3, #32
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e007      	b.n	8008d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	f003 0320 	and.w	r3, r3, #32
 8008d4c:	2b20      	cmp	r3, #32
 8008d4e:	d1cf      	bne.n	8008cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
	...

08008d5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008d68:	e055      	b.n	8008e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	68b9      	ldr	r1, [r7, #8]
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 f860 	bl	8008e34 <I2C_IsAcknowledgeFailed>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e053      	b.n	8008e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	f003 0320 	and.w	r3, r3, #32
 8008d88:	2b20      	cmp	r3, #32
 8008d8a:	d129      	bne.n	8008de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	f003 0304 	and.w	r3, r3, #4
 8008d96:	2b04      	cmp	r3, #4
 8008d98:	d105      	bne.n	8008da6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	e03f      	b.n	8008e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2220      	movs	r2, #32
 8008dac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6859      	ldr	r1, [r3, #4]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	4b1d      	ldr	r3, [pc, #116]	; (8008e30 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8008dba:	400b      	ands	r3, r1
 8008dbc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2220      	movs	r2, #32
 8008dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e022      	b.n	8008e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008de0:	f7f8 fc36 	bl	8001650 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d302      	bcc.n	8008df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10f      	bne.n	8008e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfa:	f043 0220 	orr.w	r2, r3, #32
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e007      	b.n	8008e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	f003 0304 	and.w	r3, r3, #4
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	d1a2      	bne.n	8008d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	fe00e800 	.word	0xfe00e800

08008e34 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	f003 0310 	and.w	r3, r3, #16
 8008e4a:	2b10      	cmp	r3, #16
 8008e4c:	d151      	bne.n	8008ef2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e4e:	e022      	b.n	8008e96 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e56:	d01e      	beq.n	8008e96 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e58:	f7f8 fbfa 	bl	8001650 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d302      	bcc.n	8008e6e <I2C_IsAcknowledgeFailed+0x3a>
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d113      	bne.n	8008e96 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e72:	f043 0220 	orr.w	r2, r3, #32
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2220      	movs	r2, #32
 8008e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e02e      	b.n	8008ef4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	f003 0320 	and.w	r3, r3, #32
 8008ea0:	2b20      	cmp	r3, #32
 8008ea2:	d1d5      	bne.n	8008e50 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2210      	movs	r2, #16
 8008eaa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f7ff fd62 	bl	800897e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	6859      	ldr	r1, [r3, #4]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <I2C_IsAcknowledgeFailed+0xc8>)
 8008ec6:	400b      	ands	r3, r1
 8008ec8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ece:	f043 0204 	orr.w	r2, r3, #4
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e000      	b.n	8008ef4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	fe00e800 	.word	0xfe00e800

08008f00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	607b      	str	r3, [r7, #4]
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	817b      	strh	r3, [r7, #10]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	0d5b      	lsrs	r3, r3, #21
 8008f1c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008f20:	4b0d      	ldr	r3, [pc, #52]	; (8008f58 <I2C_TransferConfig+0x58>)
 8008f22:	430b      	orrs	r3, r1
 8008f24:	43db      	mvns	r3, r3
 8008f26:	ea02 0103 	and.w	r1, r2, r3
 8008f2a:	897b      	ldrh	r3, [r7, #10]
 8008f2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008f30:	7a7b      	ldrb	r3, [r7, #9]
 8008f32:	041b      	lsls	r3, r3, #16
 8008f34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	431a      	orrs	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	430a      	orrs	r2, r1
 8008f48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008f4a:	bf00      	nop
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	03ff63ff 	.word	0x03ff63ff

08008f5c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f70:	4a2a      	ldr	r2, [pc, #168]	; (800901c <I2C_Enable_IRQ+0xc0>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d004      	beq.n	8008f80 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8008f7a:	4a29      	ldr	r2, [pc, #164]	; (8009020 <I2C_Enable_IRQ+0xc4>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d11d      	bne.n	8008fbc <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008f80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	da03      	bge.n	8008f90 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008f8e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008f90:	887b      	ldrh	r3, [r7, #2]
 8008f92:	2b10      	cmp	r3, #16
 8008f94:	d103      	bne.n	8008f9e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008f9c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008f9e:	887b      	ldrh	r3, [r7, #2]
 8008fa0:	2b20      	cmp	r3, #32
 8008fa2:	d103      	bne.n	8008fac <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008faa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008fac:	887b      	ldrh	r3, [r7, #2]
 8008fae:	2b40      	cmp	r3, #64	; 0x40
 8008fb0:	d125      	bne.n	8008ffe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fb8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008fba:	e020      	b.n	8008ffe <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008fbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	da03      	bge.n	8008fcc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008fca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008fcc:	887b      	ldrh	r3, [r7, #2]
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d003      	beq.n	8008fde <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008fdc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008fde:	887b      	ldrh	r3, [r7, #2]
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d003      	beq.n	8008ff0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008fee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008ff0:	887b      	ldrh	r3, [r7, #2]
 8008ff2:	2b20      	cmp	r3, #32
 8008ff4:	d103      	bne.n	8008ffe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f043 0320 	orr.w	r3, r3, #32
 8008ffc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6819      	ldr	r1, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	430a      	orrs	r2, r1
 800900c:	601a      	str	r2, [r3, #0]
}
 800900e:	bf00      	nop
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	08007c05 	.word	0x08007c05
 8009020:	08007deb 	.word	0x08007deb

08009024 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	460b      	mov	r3, r1
 800902e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009034:	887b      	ldrh	r3, [r7, #2]
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00f      	beq.n	800905e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009044:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800904c:	b2db      	uxtb	r3, r3
 800904e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009052:	2b28      	cmp	r3, #40	; 0x28
 8009054:	d003      	beq.n	800905e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800905c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800905e:	887b      	ldrh	r3, [r7, #2]
 8009060:	f003 0302 	and.w	r3, r3, #2
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00f      	beq.n	8009088 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800906e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009076:	b2db      	uxtb	r3, r3
 8009078:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800907c:	2b28      	cmp	r3, #40	; 0x28
 800907e:	d003      	beq.n	8009088 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009086:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009088:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800908c:	2b00      	cmp	r3, #0
 800908e:	da03      	bge.n	8009098 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009096:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009098:	887b      	ldrh	r3, [r7, #2]
 800909a:	2b10      	cmp	r3, #16
 800909c:	d103      	bne.n	80090a6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80090a4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80090a6:	887b      	ldrh	r3, [r7, #2]
 80090a8:	2b20      	cmp	r3, #32
 80090aa:	d103      	bne.n	80090b4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f043 0320 	orr.w	r3, r3, #32
 80090b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80090b4:	887b      	ldrh	r3, [r7, #2]
 80090b6:	2b40      	cmp	r3, #64	; 0x40
 80090b8:	d103      	bne.n	80090c2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090c0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6819      	ldr	r1, [r3, #0]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	43da      	mvns	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	400a      	ands	r2, r1
 80090d2:	601a      	str	r2, [r3, #0]
}
 80090d4:	bf00      	nop
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ec:	2baa      	cmp	r3, #170	; 0xaa
 80090ee:	d103      	bne.n	80090f8 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80090f6:	e008      	b.n	800910a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fc:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8009100:	d103      	bne.n	800910a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009108:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800910a:	bf00      	nop
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009116:	b480      	push	{r7}
 8009118:	b083      	sub	sp, #12
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009126:	b2db      	uxtb	r3, r3
 8009128:	2b20      	cmp	r3, #32
 800912a:	d138      	bne.n	800919e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009132:	2b01      	cmp	r3, #1
 8009134:	d101      	bne.n	800913a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009136:	2302      	movs	r3, #2
 8009138:	e032      	b.n	80091a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2201      	movs	r2, #1
 800913e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2224      	movs	r2, #36	; 0x24
 8009146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f022 0201 	bic.w	r2, r2, #1
 8009158:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009168:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6819      	ldr	r1, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	430a      	orrs	r2, r1
 8009178:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f042 0201 	orr.w	r2, r2, #1
 8009188:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2220      	movs	r2, #32
 800918e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	e000      	b.n	80091a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800919e:	2302      	movs	r3, #2
  }
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b20      	cmp	r3, #32
 80091c0:	d139      	bne.n	8009236 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d101      	bne.n	80091d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80091cc:	2302      	movs	r3, #2
 80091ce:	e033      	b.n	8009238 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2224      	movs	r2, #36	; 0x24
 80091dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0201 	bic.w	r2, r2, #1
 80091ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80091fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	4313      	orrs	r3, r2
 8009208:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f042 0201 	orr.w	r2, r2, #1
 8009220:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2220      	movs	r2, #32
 8009226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	e000      	b.n	8009238 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009236:	2302      	movs	r3, #2
  }
}
 8009238:	4618      	mov	r0, r3
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_I2CEx_EnableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b20      	cmp	r3, #32
 8009256:	d130      	bne.n	80092ba <HAL_I2CEx_EnableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800925e:	2b01      	cmp	r3, #1
 8009260:	d101      	bne.n	8009266 <HAL_I2CEx_EnableWakeUp+0x22>
 8009262:	2302      	movs	r3, #2
 8009264:	e02a      	b.n	80092bc <HAL_I2CEx_EnableWakeUp+0x78>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2224      	movs	r2, #36	; 0x24
 8009272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 0201 	bic.w	r2, r2, #1
 8009284:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 |= I2C_CR1_WUPEN;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009294:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f042 0201 	orr.w	r2, r2, #1
 80092a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	e000      	b.n	80092bc <HAL_I2CEx_EnableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
 80092ba:	2302      	movs	r3, #2
  }
}
 80092bc:	4618      	mov	r0, r3
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <HAL_I2CEx_DisableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b20      	cmp	r3, #32
 80092da:	d130      	bne.n	800933e <HAL_I2CEx_DisableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d101      	bne.n	80092ea <HAL_I2CEx_DisableWakeUp+0x22>
 80092e6:	2302      	movs	r3, #2
 80092e8:	e02a      	b.n	8009340 <HAL_I2CEx_DisableWakeUp+0x78>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2224      	movs	r2, #36	; 0x24
 80092f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f022 0201 	bic.w	r2, r2, #1
 8009308:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 &= ~(I2C_CR1_WUPEN);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009318:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f042 0201 	orr.w	r2, r2, #1
 8009328:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2220      	movs	r2, #32
 800932e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800933a:	2300      	movs	r3, #0
 800933c:	e000      	b.n	8009340 <HAL_I2CEx_DisableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
 800933e:	2302      	movs	r3, #2
  }
}
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009354:	4b0b      	ldr	r3, [pc, #44]	; (8009384 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009358:	4a0a      	ldr	r2, [pc, #40]	; (8009384 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800935a:	f043 0301 	orr.w	r3, r3, #1
 800935e:	6613      	str	r3, [r2, #96]	; 0x60
 8009360:	4b08      	ldr	r3, [pc, #32]	; (8009384 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	60fb      	str	r3, [r7, #12]
 800936a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800936c:	4b06      	ldr	r3, [pc, #24]	; (8009388 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	4905      	ldr	r1, [pc, #20]	; (8009388 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4313      	orrs	r3, r2
 8009376:	604b      	str	r3, [r1, #4]
}
 8009378:	bf00      	nop
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	40021000 	.word	0x40021000
 8009388:	40010000 	.word	0x40010000

0800938c <HAL_I2CEx_DisableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be disabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009394:	4b0c      	ldr	r3, [pc, #48]	; (80093c8 <HAL_I2CEx_DisableFastModePlus+0x3c>)
 8009396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009398:	4a0b      	ldr	r2, [pc, #44]	; (80093c8 <HAL_I2CEx_DisableFastModePlus+0x3c>)
 800939a:	f043 0301 	orr.w	r3, r3, #1
 800939e:	6613      	str	r3, [r2, #96]	; 0x60
 80093a0:	4b09      	ldr	r3, [pc, #36]	; (80093c8 <HAL_I2CEx_DisableFastModePlus+0x3c>)
 80093a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	68fb      	ldr	r3, [r7, #12]

  /* Disable fast mode plus driving capability for selected pin */
  CLEAR_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80093ac:	4b07      	ldr	r3, [pc, #28]	; (80093cc <HAL_I2CEx_DisableFastModePlus+0x40>)
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	43db      	mvns	r3, r3
 80093b4:	4905      	ldr	r1, [pc, #20]	; (80093cc <HAL_I2CEx_DisableFastModePlus+0x40>)
 80093b6:	4013      	ands	r3, r2
 80093b8:	604b      	str	r3, [r1, #4]
}
 80093ba:	bf00      	nop
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	40021000 	.word	0x40021000
 80093cc:	40010000 	.word	0x40010000

080093d0 <HAL_PWR_DeInit>:
/**
  * @brief Deinitialize the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 80093d0:	b480      	push	{r7}
 80093d2:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 80093d4:	4b08      	ldr	r3, [pc, #32]	; (80093f8 <HAL_PWR_DeInit+0x28>)
 80093d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d8:	4a07      	ldr	r2, [pc, #28]	; (80093f8 <HAL_PWR_DeInit+0x28>)
 80093da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093de:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_PWR_RELEASE_RESET();
 80093e0:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <HAL_PWR_DeInit+0x28>)
 80093e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e4:	4a04      	ldr	r2, [pc, #16]	; (80093f8 <HAL_PWR_DeInit+0x28>)
 80093e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093ea:	6393      	str	r3, [r2, #56]	; 0x38
}
 80093ec:	bf00      	nop
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	40021000 	.word	0x40021000

080093fc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80093fc:	b480      	push	{r7}
 80093fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009400:	4b05      	ldr	r3, [pc, #20]	; (8009418 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a04      	ldr	r2, [pc, #16]	; (8009418 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800940a:	6013      	str	r3, [r2, #0]
}
 800940c:	bf00      	nop
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	40007000 	.word	0x40007000

0800941c <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800941c:	b480      	push	{r7}
 800941e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8009420:	4b05      	ldr	r3, [pc, #20]	; (8009438 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a04      	ldr	r2, [pc, #16]	; (8009438 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8009426:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800942a:	6013      	str	r3, [r2, #0]
}
 800942c:	bf00      	nop
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	40007000 	.word	0x40007000

0800943c <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8009444:	4b2b      	ldr	r3, [pc, #172]	; (80094f4 <HAL_PWR_ConfigPVD+0xb8>)
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	f023 020e 	bic.w	r2, r3, #14
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4928      	ldr	r1, [pc, #160]	; (80094f4 <HAL_PWR_ConfigPVD+0xb8>)
 8009452:	4313      	orrs	r3, r2
 8009454:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8009456:	4b28      	ldr	r3, [pc, #160]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	4a27      	ldr	r2, [pc, #156]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 800945c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009460:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8009462:	4b25      	ldr	r3, [pc, #148]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a24      	ldr	r2, [pc, #144]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 8009468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800946c:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800946e:	4b22      	ldr	r3, [pc, #136]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	4a21      	ldr	r2, [pc, #132]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 8009474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009478:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800947a:	4b1f      	ldr	r3, [pc, #124]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	4a1e      	ldr	r2, [pc, #120]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 8009480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009484:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d005      	beq.n	800949e <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8009492:	4b19      	ldr	r3, [pc, #100]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a18      	ldr	r2, [pc, #96]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 8009498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800949c:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d005      	beq.n	80094b6 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80094aa:	4b13      	ldr	r3, [pc, #76]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	4a12      	ldr	r2, [pc, #72]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 80094b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094b4:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d005      	beq.n	80094ce <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80094c2:	4b0d      	ldr	r3, [pc, #52]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	4a0c      	ldr	r2, [pc, #48]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 80094c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094cc:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	f003 0302 	and.w	r3, r3, #2
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d005      	beq.n	80094e6 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80094da:	4b07      	ldr	r3, [pc, #28]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	4a06      	ldr	r2, [pc, #24]	; (80094f8 <HAL_PWR_ConfigPVD+0xbc>)
 80094e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094e4:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr
 80094f4:	40007000 	.word	0x40007000
 80094f8:	40010400 	.word	0x40010400

080094fc <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80094fc:	b480      	push	{r7}
 80094fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8009500:	4b05      	ldr	r3, [pc, #20]	; (8009518 <HAL_PWR_EnablePVD+0x1c>)
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	4a04      	ldr	r2, [pc, #16]	; (8009518 <HAL_PWR_EnablePVD+0x1c>)
 8009506:	f043 0301 	orr.w	r3, r3, #1
 800950a:	6053      	str	r3, [r2, #4]
}
 800950c:	bf00      	nop
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	40007000 	.word	0x40007000

0800951c <HAL_PWR_DisablePVD>:
/**
  * @brief Disable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 8009520:	4b05      	ldr	r3, [pc, #20]	; (8009538 <HAL_PWR_DisablePVD+0x1c>)
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	4a04      	ldr	r2, [pc, #16]	; (8009538 <HAL_PWR_DisablePVD+0x1c>)
 8009526:	f023 0301 	bic.w	r3, r3, #1
 800952a:	6053      	str	r3, [r2, #4]
}
 800952c:	bf00      	nop
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	40007000 	.word	0x40007000

0800953c <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8009544:	4b0c      	ldr	r3, [pc, #48]	; (8009578 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8009546:	68da      	ldr	r2, [r3, #12]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f003 031f 	and.w	r3, r3, #31
 800954e:	43db      	mvns	r3, r3
 8009550:	401a      	ands	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	095b      	lsrs	r3, r3, #5
 8009556:	4908      	ldr	r1, [pc, #32]	; (8009578 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8009558:	4313      	orrs	r3, r2
 800955a:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 800955c:	4b06      	ldr	r3, [pc, #24]	; (8009578 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800955e:	689a      	ldr	r2, [r3, #8]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f003 031f 	and.w	r3, r3, #31
 8009566:	4904      	ldr	r1, [pc, #16]	; (8009578 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8009568:	4313      	orrs	r3, r2
 800956a:	608b      	str	r3, [r1, #8]


}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	40007000 	.word	0x40007000

0800957c <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8009584:	4b07      	ldr	r3, [pc, #28]	; (80095a4 <HAL_PWR_DisableWakeUpPin+0x28>)
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f003 031f 	and.w	r3, r3, #31
 800958e:	43db      	mvns	r3, r3
 8009590:	4904      	ldr	r1, [pc, #16]	; (80095a4 <HAL_PWR_DisableWakeUpPin+0x28>)
 8009592:	4013      	ands	r3, r2
 8009594:	608b      	str	r3, [r1, #8]
}
 8009596:	bf00      	nop
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	40007000 	.word	0x40007000

080095a8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10c      	bne.n	80095d4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80095ba:	4b13      	ldr	r3, [pc, #76]	; (8009608 <HAL_PWR_EnterSLEEPMode+0x60>)
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095c6:	d10e      	bne.n	80095e6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80095c8:	f000 fde6 	bl	800a198 <HAL_PWREx_DisableLowPowerRunMode>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d009      	beq.n	80095e6 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 80095d2:	e016      	b.n	8009602 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 80095d4:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <HAL_PWR_EnterSLEEPMode+0x60>)
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095e0:	d001      	beq.n	80095e6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80095e2:	f000 fdc9 	bl	800a178 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80095e6:	4b09      	ldr	r3, [pc, #36]	; (800960c <HAL_PWR_EnterSLEEPMode+0x64>)
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	4a08      	ldr	r2, [pc, #32]	; (800960c <HAL_PWR_EnterSLEEPMode+0x64>)
 80095ec:	f023 0304 	bic.w	r3, r3, #4
 80095f0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80095f2:	78fb      	ldrb	r3, [r7, #3]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d101      	bne.n	80095fc <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80095f8:	bf30      	wfi
 80095fa:	e002      	b.n	8009602 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80095fc:	bf40      	sev
    __WFE();
 80095fe:	bf20      	wfe
    __WFE();
 8009600:	bf20      	wfe
  }

}
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	40007000 	.word	0x40007000
 800960c:	e000ed00 	.word	0xe000ed00

08009610 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009622:	d104      	bne.n	800962e <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fe18 	bl	800a25c <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 800962c:	e003      	b.n	8009636 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 800962e:	78fb      	ldrb	r3, [r7, #3]
 8009630:	4618      	mov	r0, r3
 8009632:	f000 fde9 	bl	800a208 <HAL_PWREx_EnterSTOP0Mode>
}
 8009636:	bf00      	nop
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8009640:	b480      	push	{r7}
 8009642:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8009644:	4b09      	ldr	r3, [pc, #36]	; (800966c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f023 0307 	bic.w	r3, r3, #7
 800964c:	4a07      	ldr	r2, [pc, #28]	; (800966c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800964e:	f043 0303 	orr.w	r3, r3, #3
 8009652:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009654:	4b06      	ldr	r3, [pc, #24]	; (8009670 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	4a05      	ldr	r2, [pc, #20]	; (8009670 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800965a:	f043 0304 	orr.w	r3, r3, #4
 800965e:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8009660:	bf30      	wfi
}
 8009662:	bf00      	nop
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	40007000 	.word	0x40007000
 8009670:	e000ed00 	.word	0xe000ed00

08009674 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8009674:	b480      	push	{r7}
 8009676:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8009678:	4b05      	ldr	r3, [pc, #20]	; (8009690 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	4a04      	ldr	r2, [pc, #16]	; (8009690 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800967e:	f043 0302 	orr.w	r3, r3, #2
 8009682:	6113      	str	r3, [r2, #16]
}
 8009684:	bf00      	nop
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	e000ed00 	.word	0xe000ed00

08009694 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8009694:	b480      	push	{r7}
 8009696:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8009698:	4b05      	ldr	r3, [pc, #20]	; (80096b0 <HAL_PWR_DisableSleepOnExit+0x1c>)
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	4a04      	ldr	r2, [pc, #16]	; (80096b0 <HAL_PWR_DisableSleepOnExit+0x1c>)
 800969e:	f023 0302 	bic.w	r3, r3, #2
 80096a2:	6113      	str	r3, [r2, #16]
}
 80096a4:	bf00      	nop
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	e000ed00 	.word	0xe000ed00

080096b4 <HAL_PWR_EnableSEVOnPend>:
  * @note Set SEVONPEND bit of SCR register. When this bit is set, this causes
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 80096b4:	b480      	push	{r7}
 80096b6:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 80096b8:	4b05      	ldr	r3, [pc, #20]	; (80096d0 <HAL_PWR_EnableSEVOnPend+0x1c>)
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	4a04      	ldr	r2, [pc, #16]	; (80096d0 <HAL_PWR_EnableSEVOnPend+0x1c>)
 80096be:	f043 0310 	orr.w	r3, r3, #16
 80096c2:	6113      	str	r3, [r2, #16]
}
 80096c4:	bf00      	nop
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	e000ed00 	.word	0xe000ed00

080096d4 <HAL_PWR_DisableSEVOnPend>:
  * @note Clear SEVONPEND bit of SCR register. When this bit is set, this causes
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 80096d4:	b480      	push	{r7}
 80096d6:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 80096d8:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <HAL_PWR_DisableSEVOnPend+0x1c>)
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	4a04      	ldr	r2, [pc, #16]	; (80096f0 <HAL_PWR_DisableSEVOnPend+0x1c>)
 80096de:	f023 0310 	bic.w	r3, r3, #16
 80096e2:	6113      	str	r3, [r2, #16]
}
 80096e4:	bf00      	nop
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	e000ed00 	.word	0xe000ed00

080096f4 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80096f4:	b480      	push	{r7}
 80096f6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 80096f8:	bf00      	nop
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
	...

08009704 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009708:	4b04      	ldr	r3, [pc, #16]	; (800971c <HAL_PWREx_GetVoltageRange+0x18>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009710:	4618      	mov	r0, r3
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	40007000 	.word	0x40007000

08009720 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800972e:	d130      	bne.n	8009792 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009730:	4b23      	ldr	r3, [pc, #140]	; (80097c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800973c:	d038      	beq.n	80097b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800973e:	4b20      	ldr	r3, [pc, #128]	; (80097c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009746:	4a1e      	ldr	r2, [pc, #120]	; (80097c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009748:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800974c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800974e:	4b1d      	ldr	r3, [pc, #116]	; (80097c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2232      	movs	r2, #50	; 0x32
 8009754:	fb02 f303 	mul.w	r3, r2, r3
 8009758:	4a1b      	ldr	r2, [pc, #108]	; (80097c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800975a:	fba2 2303 	umull	r2, r3, r2, r3
 800975e:	0c9b      	lsrs	r3, r3, #18
 8009760:	3301      	adds	r3, #1
 8009762:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009764:	e002      	b.n	800976c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3b01      	subs	r3, #1
 800976a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800976c:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009778:	d102      	bne.n	8009780 <HAL_PWREx_ControlVoltageScaling+0x60>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1f2      	bne.n	8009766 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009780:	4b0f      	ldr	r3, [pc, #60]	; (80097c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009782:	695b      	ldr	r3, [r3, #20]
 8009784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800978c:	d110      	bne.n	80097b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e00f      	b.n	80097b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009792:	4b0b      	ldr	r3, [pc, #44]	; (80097c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800979a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800979e:	d007      	beq.n	80097b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80097a0:	4b07      	ldr	r3, [pc, #28]	; (80097c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80097a8:	4a05      	ldr	r2, [pc, #20]	; (80097c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80097aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80097ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3714      	adds	r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	40007000 	.word	0x40007000
 80097c4:	20000008 	.word	0x20000008
 80097c8:	431bde83 	.word	0x431bde83

080097cc <HAL_PWREx_EnableBatteryCharging>:
  *            @arg @ref PWR_BATTERY_CHARGING_RESISTOR_5     5 kOhms resistor
  *            @arg @ref PWR_BATTERY_CHARGING_RESISTOR_1_5 1.5 kOhms resistor
  * @retval None
  */
void HAL_PWREx_EnableBatteryCharging(uint32_t ResistorSelection)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_BATTERY_RESISTOR_SELECT(ResistorSelection));

  /* Specify resistor selection */
  MODIFY_REG(PWR->CR4, PWR_CR4_VBRS, ResistorSelection);
 80097d4:	4b09      	ldr	r3, [pc, #36]	; (80097fc <HAL_PWREx_EnableBatteryCharging+0x30>)
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80097dc:	4907      	ldr	r1, [pc, #28]	; (80097fc <HAL_PWREx_EnableBatteryCharging+0x30>)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	60cb      	str	r3, [r1, #12]

  /* Enable battery charging */
  SET_BIT(PWR->CR4, PWR_CR4_VBE);
 80097e4:	4b05      	ldr	r3, [pc, #20]	; (80097fc <HAL_PWREx_EnableBatteryCharging+0x30>)
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	4a04      	ldr	r2, [pc, #16]	; (80097fc <HAL_PWREx_EnableBatteryCharging+0x30>)
 80097ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097ee:	60d3      	str	r3, [r2, #12]
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	40007000 	.word	0x40007000

08009800 <HAL_PWREx_DisableBatteryCharging>:
/**
  * @brief Disable battery charging.
  * @retval None
  */
void HAL_PWREx_DisableBatteryCharging(void)
{
 8009800:	b480      	push	{r7}
 8009802:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR4, PWR_CR4_VBE);
 8009804:	4b05      	ldr	r3, [pc, #20]	; (800981c <HAL_PWREx_DisableBatteryCharging+0x1c>)
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	4a04      	ldr	r2, [pc, #16]	; (800981c <HAL_PWREx_DisableBatteryCharging+0x1c>)
 800980a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800980e:	60d3      	str	r3, [r2, #12]
}
 8009810:	bf00      	nop
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	40007000 	.word	0x40007000

08009820 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009820:	b480      	push	{r7}
 8009822:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009824:	4b05      	ldr	r3, [pc, #20]	; (800983c <HAL_PWREx_EnableVddUSB+0x1c>)
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	4a04      	ldr	r2, [pc, #16]	; (800983c <HAL_PWREx_EnableVddUSB+0x1c>)
 800982a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800982e:	6053      	str	r3, [r2, #4]
}
 8009830:	bf00      	nop
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	40007000 	.word	0x40007000

08009840 <HAL_PWREx_DisableVddUSB>:
/**
  * @brief Disable VDDUSB supply.
  * @retval None
  */
void HAL_PWREx_DisableVddUSB(void)
{
 8009840:	b480      	push	{r7}
 8009842:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 8009844:	4b05      	ldr	r3, [pc, #20]	; (800985c <HAL_PWREx_DisableVddUSB+0x1c>)
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	4a04      	ldr	r2, [pc, #16]	; (800985c <HAL_PWREx_DisableVddUSB+0x1c>)
 800984a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800984e:	6053      	str	r3, [r2, #4]
}
 8009850:	bf00      	nop
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	40007000 	.word	0x40007000

08009860 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009860:	b480      	push	{r7}
 8009862:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8009864:	4b05      	ldr	r3, [pc, #20]	; (800987c <HAL_PWREx_EnableVddIO2+0x1c>)
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	4a04      	ldr	r2, [pc, #16]	; (800987c <HAL_PWREx_EnableVddIO2+0x1c>)
 800986a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800986e:	6053      	str	r3, [r2, #4]
}
 8009870:	bf00      	nop
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	40007000 	.word	0x40007000

08009880 <HAL_PWREx_DisableVddIO2>:
/**
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
 8009880:	b480      	push	{r7}
 8009882:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 8009884:	4b05      	ldr	r3, [pc, #20]	; (800989c <HAL_PWREx_DisableVddIO2+0x1c>)
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	4a04      	ldr	r2, [pc, #16]	; (800989c <HAL_PWREx_DisableVddIO2+0x1c>)
 800988a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800988e:	6053      	str	r3, [r2, #4]
}
 8009890:	bf00      	nop
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	40007000 	.word	0x40007000

080098a0 <HAL_PWREx_EnableInternalWakeUpLine>:
/**
  * @brief Enable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_EnableInternalWakeUpLine(void)
{
 80098a0:	b480      	push	{r7}
 80098a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 80098a4:	4b05      	ldr	r3, [pc, #20]	; (80098bc <HAL_PWREx_EnableInternalWakeUpLine+0x1c>)
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	4a04      	ldr	r2, [pc, #16]	; (80098bc <HAL_PWREx_EnableInternalWakeUpLine+0x1c>)
 80098aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ae:	6093      	str	r3, [r2, #8]
}
 80098b0:	bf00      	nop
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	40007000 	.word	0x40007000

080098c0 <HAL_PWREx_DisableInternalWakeUpLine>:
/**
  * @brief Disable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_DisableInternalWakeUpLine(void)
{
 80098c0:	b480      	push	{r7}
 80098c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_EIWF);
 80098c4:	4b05      	ldr	r3, [pc, #20]	; (80098dc <HAL_PWREx_DisableInternalWakeUpLine+0x1c>)
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	4a04      	ldr	r2, [pc, #16]	; (80098dc <HAL_PWREx_DisableInternalWakeUpLine+0x1c>)
 80098ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098ce:	6093      	str	r3, [r2, #8]
}
 80098d0:	bf00      	nop
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	40007000 	.word	0x40007000

080098e0 <HAL_PWREx_EnableGPIOPullUp>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2b07      	cmp	r3, #7
 80098f2:	f200 808d 	bhi.w	8009a10 <HAL_PWREx_EnableGPIOPullUp+0x130>
 80098f6:	a201      	add	r2, pc, #4	; (adr r2, 80098fc <HAL_PWREx_EnableGPIOPullUp+0x1c>)
 80098f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fc:	0800991d 	.word	0x0800991d
 8009900:	08009941 	.word	0x08009941
 8009904:	08009961 	.word	0x08009961
 8009908:	0800997d 	.word	0x0800997d
 800990c:	08009999 	.word	0x08009999
 8009910:	080099b5 	.word	0x080099b5
 8009914:	080099d1 	.word	0x080099d1
 8009918:	080099ed 	.word	0x080099ed
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 800991c:	4b41      	ldr	r3, [pc, #260]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800991e:	6a1a      	ldr	r2, [r3, #32]
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009926:	493f      	ldr	r1, [pc, #252]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8009928:	4313      	orrs	r3, r2
 800992a:	620b      	str	r3, [r1, #32]
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 800992c:	4b3d      	ldr	r3, [pc, #244]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800992e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009936:	43db      	mvns	r3, r3
 8009938:	493a      	ldr	r1, [pc, #232]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800993a:	4013      	ands	r3, r2
 800993c:	624b      	str	r3, [r1, #36]	; 0x24
       break;
 800993e:	e06a      	b.n	8009a16 <HAL_PWREx_EnableGPIOPullUp+0x136>
    case PWR_GPIO_B:
       SET_BIT(PWR->PUCRB, GPIONumber);
 8009940:	4b38      	ldr	r3, [pc, #224]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8009942:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009944:	4937      	ldr	r1, [pc, #220]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	4313      	orrs	r3, r2
 800994a:	628b      	str	r3, [r1, #40]	; 0x28
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 800994c:	4b35      	ldr	r3, [pc, #212]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800994e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	f023 0310 	bic.w	r3, r3, #16
 8009956:	43db      	mvns	r3, r3
 8009958:	4932      	ldr	r1, [pc, #200]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800995a:	4013      	ands	r3, r2
 800995c:	62cb      	str	r3, [r1, #44]	; 0x2c
       break;
 800995e:	e05a      	b.n	8009a16 <HAL_PWREx_EnableGPIOPullUp+0x136>
    case PWR_GPIO_C:
       SET_BIT(PWR->PUCRC, GPIONumber);
 8009960:	4b30      	ldr	r3, [pc, #192]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8009962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009964:	492f      	ldr	r1, [pc, #188]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	4313      	orrs	r3, r2
 800996a:	630b      	str	r3, [r1, #48]	; 0x30
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 800996c:	4b2d      	ldr	r3, [pc, #180]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800996e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	43db      	mvns	r3, r3
 8009974:	492b      	ldr	r1, [pc, #172]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8009976:	4013      	ands	r3, r2
 8009978:	634b      	str	r3, [r1, #52]	; 0x34
       break;
 800997a:	e04c      	b.n	8009a16 <HAL_PWREx_EnableGPIOPullUp+0x136>
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PUCRD, GPIONumber);
 800997c:	4b29      	ldr	r3, [pc, #164]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800997e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009980:	4928      	ldr	r1, [pc, #160]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	4313      	orrs	r3, r2
 8009986:	638b      	str	r3, [r1, #56]	; 0x38
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 8009988:	4b26      	ldr	r3, [pc, #152]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800998a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	43db      	mvns	r3, r3
 8009990:	4924      	ldr	r1, [pc, #144]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8009992:	4013      	ands	r3, r2
 8009994:	63cb      	str	r3, [r1, #60]	; 0x3c
       break;
 8009996:	e03e      	b.n	8009a16 <HAL_PWREx_EnableGPIOPullUp+0x136>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PUCRE, GPIONumber);
 8009998:	4b22      	ldr	r3, [pc, #136]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800999a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800999c:	4921      	ldr	r1, [pc, #132]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	640b      	str	r3, [r1, #64]	; 0x40
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 80099a4:	4b1f      	ldr	r3, [pc, #124]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80099a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	43db      	mvns	r3, r3
 80099ac:	491d      	ldr	r1, [pc, #116]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80099ae:	4013      	ands	r3, r2
 80099b0:	644b      	str	r3, [r1, #68]	; 0x44
       break;
 80099b2:	e030      	b.n	8009a16 <HAL_PWREx_EnableGPIOPullUp+0x136>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PUCRF, GPIONumber);
 80099b4:	4b1b      	ldr	r3, [pc, #108]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80099b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099b8:	491a      	ldr	r1, [pc, #104]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	4313      	orrs	r3, r2
 80099be:	648b      	str	r3, [r1, #72]	; 0x48
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 80099c0:	4b18      	ldr	r3, [pc, #96]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80099c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	43db      	mvns	r3, r3
 80099c8:	4916      	ldr	r1, [pc, #88]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80099ca:	4013      	ands	r3, r2
 80099cc:	64cb      	str	r3, [r1, #76]	; 0x4c
       break;
 80099ce:	e022      	b.n	8009a16 <HAL_PWREx_EnableGPIOPullUp+0x136>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PUCRG, GPIONumber);
 80099d0:	4b14      	ldr	r3, [pc, #80]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80099d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099d4:	4913      	ldr	r1, [pc, #76]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	4313      	orrs	r3, r2
 80099da:	650b      	str	r3, [r1, #80]	; 0x50
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 80099dc:	4b11      	ldr	r3, [pc, #68]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80099de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	43db      	mvns	r3, r3
 80099e4:	490f      	ldr	r1, [pc, #60]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80099e6:	4013      	ands	r3, r2
 80099e8:	654b      	str	r3, [r1, #84]	; 0x54
       break;
 80099ea:	e014      	b.n	8009a16 <HAL_PWREx_EnableGPIOPullUp+0x136>
#endif
    case PWR_GPIO_H:
       SET_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 80099ec:	4b0d      	ldr	r3, [pc, #52]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80099ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	f003 0303 	and.w	r3, r3, #3
 80099f6:	490b      	ldr	r1, [pc, #44]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80099f8:	4313      	orrs	r3, r2
 80099fa:	658b      	str	r3, [r1, #88]	; 0x58
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 80099fc:	4b09      	ldr	r3, [pc, #36]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80099fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	f003 0303 	and.w	r3, r3, #3
 8009a06:	43db      	mvns	r3, r3
 8009a08:	4906      	ldr	r1, [pc, #24]	; (8009a24 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	65cb      	str	r3, [r1, #92]	; 0x5c
#endif
       break;
 8009a0e:	e002      	b.n	8009a16 <HAL_PWREx_EnableGPIOPullUp+0x136>
       SET_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	73fb      	strb	r3, [r7, #15]
      break;
 8009a14:	bf00      	nop
  }

  return status;
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	40007000 	.word	0x40007000

08009a28 <HAL_PWREx_DisableGPIOPullUp>:
  *         I/O pins are available) or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2b07      	cmp	r3, #7
 8009a3a:	d857      	bhi.n	8009aec <HAL_PWREx_DisableGPIOPullUp+0xc4>
 8009a3c:	a201      	add	r2, pc, #4	; (adr r2, 8009a44 <HAL_PWREx_DisableGPIOPullUp+0x1c>)
 8009a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a42:	bf00      	nop
 8009a44:	08009a65 	.word	0x08009a65
 8009a48:	08009a79 	.word	0x08009a79
 8009a4c:	08009a89 	.word	0x08009a89
 8009a50:	08009a99 	.word	0x08009a99
 8009a54:	08009aa9 	.word	0x08009aa9
 8009a58:	08009ab9 	.word	0x08009ab9
 8009a5c:	08009ac9 	.word	0x08009ac9
 8009a60:	08009ad9 	.word	0x08009ad9
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
  {
    case PWR_GPIO_A:
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 8009a64:	4b26      	ldr	r3, [pc, #152]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009a66:	6a1a      	ldr	r2, [r3, #32]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a6e:	43db      	mvns	r3, r3
 8009a70:	4923      	ldr	r1, [pc, #140]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009a72:	4013      	ands	r3, r2
 8009a74:	620b      	str	r3, [r1, #32]
       break;
 8009a76:	e03c      	b.n	8009af2 <HAL_PWREx_DisableGPIOPullUp+0xca>
    case PWR_GPIO_B:
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 8009a78:	4b21      	ldr	r3, [pc, #132]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009a7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	43db      	mvns	r3, r3
 8009a80:	491f      	ldr	r1, [pc, #124]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009a82:	4013      	ands	r3, r2
 8009a84:	628b      	str	r3, [r1, #40]	; 0x28
       break;
 8009a86:	e034      	b.n	8009af2 <HAL_PWREx_DisableGPIOPullUp+0xca>
    case PWR_GPIO_C:
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 8009a88:	4b1d      	ldr	r3, [pc, #116]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	43db      	mvns	r3, r3
 8009a90:	491b      	ldr	r1, [pc, #108]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009a92:	4013      	ands	r3, r2
 8009a94:	630b      	str	r3, [r1, #48]	; 0x30
       break;
 8009a96:	e02c      	b.n	8009af2 <HAL_PWREx_DisableGPIOPullUp+0xca>
#if defined(GPIOD)
    case PWR_GPIO_D:
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 8009a98:	4b19      	ldr	r3, [pc, #100]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	43db      	mvns	r3, r3
 8009aa0:	4917      	ldr	r1, [pc, #92]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	638b      	str	r3, [r1, #56]	; 0x38
       break;
 8009aa6:	e024      	b.n	8009af2 <HAL_PWREx_DisableGPIOPullUp+0xca>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 8009aa8:	4b15      	ldr	r3, [pc, #84]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	43db      	mvns	r3, r3
 8009ab0:	4913      	ldr	r1, [pc, #76]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	640b      	str	r3, [r1, #64]	; 0x40
       break;
 8009ab6:	e01c      	b.n	8009af2 <HAL_PWREx_DisableGPIOPullUp+0xca>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 8009ab8:	4b11      	ldr	r3, [pc, #68]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009aba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	43db      	mvns	r3, r3
 8009ac0:	490f      	ldr	r1, [pc, #60]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	648b      	str	r3, [r1, #72]	; 0x48
       break;
 8009ac6:	e014      	b.n	8009af2 <HAL_PWREx_DisableGPIOPullUp+0xca>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 8009ac8:	4b0d      	ldr	r3, [pc, #52]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009aca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	43db      	mvns	r3, r3
 8009ad0:	490b      	ldr	r1, [pc, #44]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	650b      	str	r3, [r1, #80]	; 0x50
       break;
 8009ad6:	e00c      	b.n	8009af2 <HAL_PWREx_DisableGPIOPullUp+0xca>
#endif
    case PWR_GPIO_H:
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8009ad8:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009ada:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	f003 0303 	and.w	r3, r3, #3
 8009ae2:	43db      	mvns	r3, r3
 8009ae4:	4906      	ldr	r1, [pc, #24]	; (8009b00 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	658b      	str	r3, [r1, #88]	; 0x58
       break;
 8009aea:	e002      	b.n	8009af2 <HAL_PWREx_DisableGPIOPullUp+0xca>
    case PWR_GPIO_I:
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
       status = HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	73fb      	strb	r3, [r7, #15]
       break;
 8009af0:	bf00      	nop
  }

  return status;
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	40007000 	.word	0x40007000

08009b04 <HAL_PWREx_EnableGPIOPullDown>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	73fb      	strb	r3, [r7, #15]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b07      	cmp	r3, #7
 8009b16:	f200 808d 	bhi.w	8009c34 <HAL_PWREx_EnableGPIOPullDown+0x130>
 8009b1a:	a201      	add	r2, pc, #4	; (adr r2, 8009b20 <HAL_PWREx_EnableGPIOPullDown+0x1c>)
 8009b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b20:	08009b41 	.word	0x08009b41
 8009b24:	08009b65 	.word	0x08009b65
 8009b28:	08009b85 	.word	0x08009b85
 8009b2c:	08009ba1 	.word	0x08009ba1
 8009b30:	08009bbd 	.word	0x08009bbd
 8009b34:	08009bd9 	.word	0x08009bd9
 8009b38:	08009bf5 	.word	0x08009bf5
 8009b3c:	08009c11 	.word	0x08009c11
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 8009b40:	4b41      	ldr	r3, [pc, #260]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009b4a:	493f      	ldr	r1, [pc, #252]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	624b      	str	r3, [r1, #36]	; 0x24
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 8009b50:	4b3d      	ldr	r3, [pc, #244]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009b52:	6a1a      	ldr	r2, [r3, #32]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b5a:	43db      	mvns	r3, r3
 8009b5c:	493a      	ldr	r1, [pc, #232]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009b5e:	4013      	ands	r3, r2
 8009b60:	620b      	str	r3, [r1, #32]
       break;
 8009b62:	e06a      	b.n	8009c3a <HAL_PWREx_EnableGPIOPullDown+0x136>
    case PWR_GPIO_B:
       SET_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 8009b64:	4b38      	ldr	r3, [pc, #224]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	f023 0310 	bic.w	r3, r3, #16
 8009b6e:	4936      	ldr	r1, [pc, #216]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	62cb      	str	r3, [r1, #44]	; 0x2c
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 8009b74:	4b34      	ldr	r3, [pc, #208]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009b76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	43db      	mvns	r3, r3
 8009b7c:	4932      	ldr	r1, [pc, #200]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009b7e:	4013      	ands	r3, r2
 8009b80:	628b      	str	r3, [r1, #40]	; 0x28
       break;
 8009b82:	e05a      	b.n	8009c3a <HAL_PWREx_EnableGPIOPullDown+0x136>
    case PWR_GPIO_C:
       SET_BIT(PWR->PDCRC, GPIONumber);
 8009b84:	4b30      	ldr	r3, [pc, #192]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b88:	492f      	ldr	r1, [pc, #188]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	634b      	str	r3, [r1, #52]	; 0x34
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 8009b90:	4b2d      	ldr	r3, [pc, #180]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	43db      	mvns	r3, r3
 8009b98:	492b      	ldr	r1, [pc, #172]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	630b      	str	r3, [r1, #48]	; 0x30
       break;
 8009b9e:	e04c      	b.n	8009c3a <HAL_PWREx_EnableGPIOPullDown+0x136>
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PDCRD, GPIONumber);
 8009ba0:	4b29      	ldr	r3, [pc, #164]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ba4:	4928      	ldr	r1, [pc, #160]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	63cb      	str	r3, [r1, #60]	; 0x3c
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 8009bac:	4b26      	ldr	r3, [pc, #152]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	43db      	mvns	r3, r3
 8009bb4:	4924      	ldr	r1, [pc, #144]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009bb6:	4013      	ands	r3, r2
 8009bb8:	638b      	str	r3, [r1, #56]	; 0x38
       break;
 8009bba:	e03e      	b.n	8009c3a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PDCRE, GPIONumber);
 8009bbc:	4b22      	ldr	r3, [pc, #136]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009bbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bc0:	4921      	ldr	r1, [pc, #132]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	644b      	str	r3, [r1, #68]	; 0x44
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 8009bc8:	4b1f      	ldr	r3, [pc, #124]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	43db      	mvns	r3, r3
 8009bd0:	491d      	ldr	r1, [pc, #116]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	640b      	str	r3, [r1, #64]	; 0x40
       break;
 8009bd6:	e030      	b.n	8009c3a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PDCRF, GPIONumber);
 8009bd8:	4b1b      	ldr	r3, [pc, #108]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bdc:	491a      	ldr	r1, [pc, #104]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	64cb      	str	r3, [r1, #76]	; 0x4c
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 8009be4:	4b18      	ldr	r3, [pc, #96]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009be6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	43db      	mvns	r3, r3
 8009bec:	4916      	ldr	r1, [pc, #88]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009bee:	4013      	ands	r3, r2
 8009bf0:	648b      	str	r3, [r1, #72]	; 0x48
       break;
 8009bf2:	e022      	b.n	8009c3a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PDCRG, GPIONumber);
 8009bf4:	4b14      	ldr	r3, [pc, #80]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009bf6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bf8:	4913      	ldr	r1, [pc, #76]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	654b      	str	r3, [r1, #84]	; 0x54
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 8009c00:	4b11      	ldr	r3, [pc, #68]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009c02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	43db      	mvns	r3, r3
 8009c08:	490f      	ldr	r1, [pc, #60]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	650b      	str	r3, [r1, #80]	; 0x50
       break;
 8009c0e:	e014      	b.n	8009c3a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       SET_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       SET_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8009c10:	4b0d      	ldr	r3, [pc, #52]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009c12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	f003 0303 	and.w	r3, r3, #3
 8009c1a:	490b      	ldr	r1, [pc, #44]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	65cb      	str	r3, [r1, #92]	; 0x5c
#endif
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8009c20:	4b09      	ldr	r3, [pc, #36]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009c22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	f003 0303 	and.w	r3, r3, #3
 8009c2a:	43db      	mvns	r3, r3
 8009c2c:	4906      	ldr	r1, [pc, #24]	; (8009c48 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8009c2e:	4013      	ands	r3, r2
 8009c30:	658b      	str	r3, [r1, #88]	; 0x58
       break;
 8009c32:	e002      	b.n	8009c3a <HAL_PWREx_EnableGPIOPullDown+0x136>
       SET_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	73fb      	strb	r3, [r7, #15]
      break;
 8009c38:	bf00      	nop
  }

  return status;
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3714      	adds	r7, #20
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr
 8009c48:	40007000 	.word	0x40007000

08009c4c <HAL_PWREx_DisableGPIOPullDown>:
  *         I/O pins are available) or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	73fb      	strb	r3, [r7, #15]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b07      	cmp	r3, #7
 8009c5e:	d859      	bhi.n	8009d14 <HAL_PWREx_DisableGPIOPullDown+0xc8>
 8009c60:	a201      	add	r2, pc, #4	; (adr r2, 8009c68 <HAL_PWREx_DisableGPIOPullDown+0x1c>)
 8009c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c66:	bf00      	nop
 8009c68:	08009c89 	.word	0x08009c89
 8009c6c:	08009c9d 	.word	0x08009c9d
 8009c70:	08009cb1 	.word	0x08009cb1
 8009c74:	08009cc1 	.word	0x08009cc1
 8009c78:	08009cd1 	.word	0x08009cd1
 8009c7c:	08009ce1 	.word	0x08009ce1
 8009c80:	08009cf1 	.word	0x08009cf1
 8009c84:	08009d01 	.word	0x08009d01
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
  {
    case PWR_GPIO_A:
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 8009c88:	4b27      	ldr	r3, [pc, #156]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009c92:	43db      	mvns	r3, r3
 8009c94:	4924      	ldr	r1, [pc, #144]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009c96:	4013      	ands	r3, r2
 8009c98:	624b      	str	r3, [r1, #36]	; 0x24
       break;
 8009c9a:	e03e      	b.n	8009d1a <HAL_PWREx_DisableGPIOPullDown+0xce>
    case PWR_GPIO_B:
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 8009c9c:	4b22      	ldr	r3, [pc, #136]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	f023 0310 	bic.w	r3, r3, #16
 8009ca6:	43db      	mvns	r3, r3
 8009ca8:	491f      	ldr	r1, [pc, #124]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009caa:	4013      	ands	r3, r2
 8009cac:	62cb      	str	r3, [r1, #44]	; 0x2c
       break;
 8009cae:	e034      	b.n	8009d1a <HAL_PWREx_DisableGPIOPullDown+0xce>
    case PWR_GPIO_C:
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 8009cb0:	4b1d      	ldr	r3, [pc, #116]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	43db      	mvns	r3, r3
 8009cb8:	491b      	ldr	r1, [pc, #108]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009cba:	4013      	ands	r3, r2
 8009cbc:	634b      	str	r3, [r1, #52]	; 0x34
       break;
 8009cbe:	e02c      	b.n	8009d1a <HAL_PWREx_DisableGPIOPullDown+0xce>
#if defined(GPIOD)
    case PWR_GPIO_D:
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 8009cc0:	4b19      	ldr	r3, [pc, #100]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	43db      	mvns	r3, r3
 8009cc8:	4917      	ldr	r1, [pc, #92]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009cca:	4013      	ands	r3, r2
 8009ccc:	63cb      	str	r3, [r1, #60]	; 0x3c
       break;
 8009cce:	e024      	b.n	8009d1a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 8009cd0:	4b15      	ldr	r3, [pc, #84]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009cd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	43db      	mvns	r3, r3
 8009cd8:	4913      	ldr	r1, [pc, #76]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009cda:	4013      	ands	r3, r2
 8009cdc:	644b      	str	r3, [r1, #68]	; 0x44
       break;
 8009cde:	e01c      	b.n	8009d1a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 8009ce0:	4b11      	ldr	r3, [pc, #68]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009ce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	43db      	mvns	r3, r3
 8009ce8:	490f      	ldr	r1, [pc, #60]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009cea:	4013      	ands	r3, r2
 8009cec:	64cb      	str	r3, [r1, #76]	; 0x4c
       break;
 8009cee:	e014      	b.n	8009d1a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 8009cf0:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009cf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	43db      	mvns	r3, r3
 8009cf8:	490b      	ldr	r1, [pc, #44]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	654b      	str	r3, [r1, #84]	; 0x54
       break;
 8009cfe:	e00c      	b.n	8009d1a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8009d00:	4b09      	ldr	r3, [pc, #36]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009d02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	f003 0303 	and.w	r3, r3, #3
 8009d0a:	43db      	mvns	r3, r3
 8009d0c:	4906      	ldr	r1, [pc, #24]	; (8009d28 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8009d0e:	4013      	ands	r3, r2
 8009d10:	65cb      	str	r3, [r1, #92]	; 0x5c
#endif
       break;
 8009d12:	e002      	b.n	8009d1a <HAL_PWREx_DisableGPIOPullDown+0xce>
    case PWR_GPIO_I:
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	73fb      	strb	r3, [r7, #15]
      break;
 8009d18:	bf00      	nop
  }

  return status;
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	40007000 	.word	0x40007000

08009d2c <HAL_PWREx_EnablePullUpPullDownConfig>:
  *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() API's ensure there
  *        is no conflict when setting PUy or PDy bit.
  * @retval None
  */
void HAL_PWREx_EnablePullUpPullDownConfig(void)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 8009d30:	4b05      	ldr	r3, [pc, #20]	; (8009d48 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	4a04      	ldr	r2, [pc, #16]	; (8009d48 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 8009d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d3a:	6093      	str	r3, [r2, #8]
}
 8009d3c:	bf00      	nop
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	40007000 	.word	0x40007000

08009d4c <HAL_PWREx_DisablePullUpPullDownConfig>:
  * @note  When APC bit is cleared, the I/O pull-up and pull-down configurations defined in
  *        PWR_PUCRx and PWR_PDCRx registers are not applied in Standby and Shutdown modes.
  * @retval None
  */
void HAL_PWREx_DisablePullUpPullDownConfig(void)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 8009d50:	4b05      	ldr	r3, [pc, #20]	; (8009d68 <HAL_PWREx_DisablePullUpPullDownConfig+0x1c>)
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	4a04      	ldr	r2, [pc, #16]	; (8009d68 <HAL_PWREx_DisablePullUpPullDownConfig+0x1c>)
 8009d56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d5a:	6093      	str	r3, [r2, #8]
}
 8009d5c:	bf00      	nop
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	40007000 	.word	0x40007000

08009d6c <HAL_PWREx_EnableSRAM2ContentRetention>:
/**
  * @brief Enable Full SRAM2 content retention in Standby mode.
  * @retval None
  */
void HAL_PWREx_EnableSRAM2ContentRetention(void)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	af00      	add	r7, sp, #0
  (void) HAL_PWREx_SetSRAM2ContentRetention(PWR_FULL_SRAM2_RETENTION);
 8009d70:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009d74:	f000 f80a 	bl	8009d8c <HAL_PWREx_SetSRAM2ContentRetention>
}
 8009d78:	bf00      	nop
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <HAL_PWREx_DisableSRAM2ContentRetention>:
/**
  * @brief Disable SRAM2 content retention in Standby mode.
  * @retval None
  */
void HAL_PWREx_DisableSRAM2ContentRetention(void)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	af00      	add	r7, sp, #0
  (void) HAL_PWREx_SetSRAM2ContentRetention(PWR_NO_SRAM2_RETENTION);
 8009d80:	2000      	movs	r0, #0
 8009d82:	f000 f803 	bl	8009d8c <HAL_PWREx_SetSRAM2ContentRetention>
}
 8009d86:	bf00      	nop
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <HAL_PWREx_SetSRAM2ContentRetention>:
  *            @arg @ref PWR_4KBYTES_SRAM2_RETENTION   Only 4 Kbytes of SRAM2 is powered by the low-power regulator in Standby mode
  * @note  PWR_4KBYTES_SRAM2_RETENTION parameter is not available on all devices
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_SetSRAM2ContentRetention(uint32_t SRAM2Size)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_SRAM2_RETENTION(SRAM2Size));

  if (SRAM2Size == PWR_NO_SRAM2_RETENTION)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d106      	bne.n	8009da8 <HAL_PWREx_SetSRAM2ContentRetention+0x1c>
  {
    CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 8009d9a:	4b0d      	ldr	r3, [pc, #52]	; (8009dd0 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	4a0c      	ldr	r2, [pc, #48]	; (8009dd0 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 8009da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009da4:	6093      	str	r3, [r2, #8]
 8009da6:	e00c      	b.n	8009dc2 <HAL_PWREx_SetSRAM2ContentRetention+0x36>
  }
  else if (SRAM2Size == PWR_FULL_SRAM2_RETENTION)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dae:	d106      	bne.n	8009dbe <HAL_PWREx_SetSRAM2ContentRetention+0x32>
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_FULL_SRAM2_RETENTION);
 8009db0:	4b07      	ldr	r3, [pc, #28]	; (8009dd0 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	4a06      	ldr	r2, [pc, #24]	; (8009dd0 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 8009db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dba:	6093      	str	r3, [r2, #8]
 8009dbc:	e001      	b.n	8009dc2 <HAL_PWREx_SetSRAM2ContentRetention+0x36>
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_4KBYTES_SRAM2_RETENTION);
  }
#endif /* PWR_CR3_RRS_1 */
  else {
    return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e000      	b.n	8009dc4 <HAL_PWREx_SetSRAM2ContentRetention+0x38>
  }

  return HAL_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr
 8009dd0:	40007000 	.word	0x40007000

08009dd4 <HAL_PWREx_EnablePVM1>:
/**
  * @brief Enable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
  * @retval None
  */
void HAL_PWREx_EnablePVM1(void)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_1);
 8009dd8:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <HAL_PWREx_EnablePVM1+0x1c>)
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	4a04      	ldr	r2, [pc, #16]	; (8009df0 <HAL_PWREx_EnablePVM1+0x1c>)
 8009dde:	f043 0310 	orr.w	r3, r3, #16
 8009de2:	6053      	str	r3, [r2, #4]
}
 8009de4:	bf00      	nop
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	40007000 	.word	0x40007000

08009df4 <HAL_PWREx_DisablePVM1>:
/**
  * @brief Disable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
  * @retval None
  */
void HAL_PWREx_DisablePVM1(void)
{
 8009df4:	b480      	push	{r7}
 8009df6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_1);
 8009df8:	4b05      	ldr	r3, [pc, #20]	; (8009e10 <HAL_PWREx_DisablePVM1+0x1c>)
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	4a04      	ldr	r2, [pc, #16]	; (8009e10 <HAL_PWREx_DisablePVM1+0x1c>)
 8009dfe:	f023 0310 	bic.w	r3, r3, #16
 8009e02:	6053      	str	r3, [r2, #4]
}
 8009e04:	bf00      	nop
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	40007000 	.word	0x40007000

08009e14 <HAL_PWREx_EnablePVM2>:
/**
  * @brief Enable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
  * @retval None
  */
void HAL_PWREx_EnablePVM2(void)
{
 8009e14:	b480      	push	{r7}
 8009e16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_2);
 8009e18:	4b05      	ldr	r3, [pc, #20]	; (8009e30 <HAL_PWREx_EnablePVM2+0x1c>)
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	4a04      	ldr	r2, [pc, #16]	; (8009e30 <HAL_PWREx_EnablePVM2+0x1c>)
 8009e1e:	f043 0320 	orr.w	r3, r3, #32
 8009e22:	6053      	str	r3, [r2, #4]
}
 8009e24:	bf00      	nop
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	40007000 	.word	0x40007000

08009e34 <HAL_PWREx_DisablePVM2>:
/**
  * @brief Disable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
  * @retval None
  */
void HAL_PWREx_DisablePVM2(void)
{
 8009e34:	b480      	push	{r7}
 8009e36:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_2);
 8009e38:	4b05      	ldr	r3, [pc, #20]	; (8009e50 <HAL_PWREx_DisablePVM2+0x1c>)
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	4a04      	ldr	r2, [pc, #16]	; (8009e50 <HAL_PWREx_DisablePVM2+0x1c>)
 8009e3e:	f023 0320 	bic.w	r3, r3, #32
 8009e42:	6053      	str	r3, [r2, #4]
}
 8009e44:	bf00      	nop
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	40007000 	.word	0x40007000

08009e54 <HAL_PWREx_EnablePVM3>:
/**
  * @brief Enable the Power Voltage Monitoring 3: VDDA versus 1.62V.
  * @retval None
  */
void HAL_PWREx_EnablePVM3(void)
{
 8009e54:	b480      	push	{r7}
 8009e56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_3);
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <HAL_PWREx_EnablePVM3+0x1c>)
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	4a04      	ldr	r2, [pc, #16]	; (8009e70 <HAL_PWREx_EnablePVM3+0x1c>)
 8009e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e62:	6053      	str	r3, [r2, #4]
}
 8009e64:	bf00      	nop
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	40007000 	.word	0x40007000

08009e74 <HAL_PWREx_DisablePVM3>:
/**
  * @brief Disable the Power Voltage Monitoring 3: VDDA versus 1.62V.
  * @retval None
  */
void HAL_PWREx_DisablePVM3(void)
{
 8009e74:	b480      	push	{r7}
 8009e76:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_3);
 8009e78:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <HAL_PWREx_DisablePVM3+0x1c>)
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	4a04      	ldr	r2, [pc, #16]	; (8009e90 <HAL_PWREx_DisablePVM3+0x1c>)
 8009e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e82:	6053      	str	r3, [r2, #4]
}
 8009e84:	bf00      	nop
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	40007000 	.word	0x40007000

08009e94 <HAL_PWREx_EnablePVM4>:
/**
  * @brief Enable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
  * @retval None
  */
void HAL_PWREx_EnablePVM4(void)
{
 8009e94:	b480      	push	{r7}
 8009e96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_4);
 8009e98:	4b05      	ldr	r3, [pc, #20]	; (8009eb0 <HAL_PWREx_EnablePVM4+0x1c>)
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	4a04      	ldr	r2, [pc, #16]	; (8009eb0 <HAL_PWREx_EnablePVM4+0x1c>)
 8009e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ea2:	6053      	str	r3, [r2, #4]
}
 8009ea4:	bf00      	nop
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	40007000 	.word	0x40007000

08009eb4 <HAL_PWREx_DisablePVM4>:
/**
  * @brief Disable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
  * @retval None
  */
void HAL_PWREx_DisablePVM4(void)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_4);
 8009eb8:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <HAL_PWREx_DisablePVM4+0x1c>)
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	4a04      	ldr	r2, [pc, #16]	; (8009ed0 <HAL_PWREx_DisablePVM4+0x1c>)
 8009ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ec2:	6053      	str	r3, [r2, #4]
}
 8009ec4:	bf00      	nop
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	40007000 	.word	0x40007000

08009ed4 <HAL_PWREx_ConfigPVM>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level and to each monitored supply.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_ConfigPVM(PWR_PVMTypeDef *sConfigPVM)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	73fb      	strb	r3, [r7, #15]


  /* Configure EXTI 35 to 38 interrupts if so required:
     scan thru PVMType to detect which PVMx is set and
     configure the corresponding EXTI line accordingly. */
  switch (sConfigPVM->PVMType)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b80      	cmp	r3, #128	; 0x80
 8009ee6:	f000 80eb 	beq.w	800a0c0 <HAL_PWREx_ConfigPVM+0x1ec>
 8009eea:	2b80      	cmp	r3, #128	; 0x80
 8009eec:	f200 8131 	bhi.w	800a152 <HAL_PWREx_ConfigPVM+0x27e>
 8009ef0:	2b40      	cmp	r3, #64	; 0x40
 8009ef2:	f000 809c 	beq.w	800a02e <HAL_PWREx_ConfigPVM+0x15a>
 8009ef6:	2b40      	cmp	r3, #64	; 0x40
 8009ef8:	f200 812b 	bhi.w	800a152 <HAL_PWREx_ConfigPVM+0x27e>
 8009efc:	2b10      	cmp	r3, #16
 8009efe:	d002      	beq.n	8009f06 <HAL_PWREx_ConfigPVM+0x32>
 8009f00:	2b20      	cmp	r3, #32
 8009f02:	d04a      	beq.n	8009f9a <HAL_PWREx_ConfigPVM+0xc6>
 8009f04:	e125      	b.n	800a152 <HAL_PWREx_ConfigPVM+0x27e>
  {
#if defined(PWR_CR2_PVME1)
    case PWR_PVM_1:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM1_EXTI_DISABLE_EVENT();
 8009f06:	4b9b      	ldr	r3, [pc, #620]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0a:	4a9a      	ldr	r2, [pc, #616]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f0c:	f023 0308 	bic.w	r3, r3, #8
 8009f10:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM1_EXTI_DISABLE_IT();
 8009f12:	4b98      	ldr	r3, [pc, #608]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	4a97      	ldr	r2, [pc, #604]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f18:	f023 0308 	bic.w	r3, r3, #8
 8009f1c:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM1_EXTI_DISABLE_FALLING_EDGE();
 8009f1e:	4b95      	ldr	r3, [pc, #596]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f22:	4a94      	ldr	r2, [pc, #592]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f24:	f023 0308 	bic.w	r3, r3, #8
 8009f28:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM1_EXTI_DISABLE_RISING_EDGE();
 8009f2a:	4b92      	ldr	r3, [pc, #584]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2e:	4a91      	ldr	r2, [pc, #580]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f30:	f023 0308 	bic.w	r3, r3, #8
 8009f34:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d005      	beq.n	8009f4e <HAL_PWREx_ConfigPVM+0x7a>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_IT();
 8009f42:	4b8c      	ldr	r3, [pc, #560]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f44:	6a1b      	ldr	r3, [r3, #32]
 8009f46:	4a8b      	ldr	r2, [pc, #556]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f48:	f043 0308 	orr.w	r3, r3, #8
 8009f4c:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d005      	beq.n	8009f66 <HAL_PWREx_ConfigPVM+0x92>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_EVENT();
 8009f5a:	4b86      	ldr	r3, [pc, #536]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	4a85      	ldr	r2, [pc, #532]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f60:	f043 0308 	orr.w	r3, r3, #8
 8009f64:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d005      	beq.n	8009f7e <HAL_PWREx_ConfigPVM+0xaa>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_RISING_EDGE();
 8009f72:	4b80      	ldr	r3, [pc, #512]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f76:	4a7f      	ldr	r2, [pc, #508]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f78:	f043 0308 	orr.w	r3, r3, #8
 8009f7c:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f003 0302 	and.w	r3, r3, #2
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f000 80e6 	beq.w	800a158 <HAL_PWREx_ConfigPVM+0x284>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_FALLING_EDGE();
 8009f8c:	4b79      	ldr	r3, [pc, #484]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f90:	4a78      	ldr	r2, [pc, #480]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f92:	f043 0308 	orr.w	r3, r3, #8
 8009f96:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 8009f98:	e0de      	b.n	800a158 <HAL_PWREx_ConfigPVM+0x284>
#endif /* PWR_CR2_PVME1 */

#if defined(PWR_CR2_PVME2)
    case PWR_PVM_2:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM2_EXTI_DISABLE_EVENT();
 8009f9a:	4b76      	ldr	r3, [pc, #472]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9e:	4a75      	ldr	r2, [pc, #468]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009fa0:	f023 0310 	bic.w	r3, r3, #16
 8009fa4:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM2_EXTI_DISABLE_IT();
 8009fa6:	4b73      	ldr	r3, [pc, #460]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	4a72      	ldr	r2, [pc, #456]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009fac:	f023 0310 	bic.w	r3, r3, #16
 8009fb0:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM2_EXTI_DISABLE_FALLING_EDGE();
 8009fb2:	4b70      	ldr	r3, [pc, #448]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb6:	4a6f      	ldr	r2, [pc, #444]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009fb8:	f023 0310 	bic.w	r3, r3, #16
 8009fbc:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM2_EXTI_DISABLE_RISING_EDGE();
 8009fbe:	4b6d      	ldr	r3, [pc, #436]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc2:	4a6c      	ldr	r2, [pc, #432]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009fc4:	f023 0310 	bic.w	r3, r3, #16
 8009fc8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d005      	beq.n	8009fe2 <HAL_PWREx_ConfigPVM+0x10e>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_IT();
 8009fd6:	4b67      	ldr	r3, [pc, #412]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009fd8:	6a1b      	ldr	r3, [r3, #32]
 8009fda:	4a66      	ldr	r2, [pc, #408]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009fdc:	f043 0310 	orr.w	r3, r3, #16
 8009fe0:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d005      	beq.n	8009ffa <HAL_PWREx_ConfigPVM+0x126>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_EVENT();
 8009fee:	4b61      	ldr	r3, [pc, #388]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	4a60      	ldr	r2, [pc, #384]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 8009ff4:	f043 0310 	orr.w	r3, r3, #16
 8009ff8:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d005      	beq.n	800a012 <HAL_PWREx_ConfigPVM+0x13e>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_RISING_EDGE();
 800a006:	4b5b      	ldr	r3, [pc, #364]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00a:	4a5a      	ldr	r2, [pc, #360]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a00c:	f043 0310 	orr.w	r3, r3, #16
 800a010:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 809e 	beq.w	800a15c <HAL_PWREx_ConfigPVM+0x288>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_FALLING_EDGE();
 800a020:	4b54      	ldr	r3, [pc, #336]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a024:	4a53      	ldr	r2, [pc, #332]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a026:	f043 0310 	orr.w	r3, r3, #16
 800a02a:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 800a02c:	e096      	b.n	800a15c <HAL_PWREx_ConfigPVM+0x288>
#endif /* PWR_CR2_PVME2 */

    case PWR_PVM_3:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM3_EXTI_DISABLE_EVENT();
 800a02e:	4b51      	ldr	r3, [pc, #324]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a032:	4a50      	ldr	r2, [pc, #320]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a034:	f023 0320 	bic.w	r3, r3, #32
 800a038:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM3_EXTI_DISABLE_IT();
 800a03a:	4b4e      	ldr	r3, [pc, #312]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a03c:	6a1b      	ldr	r3, [r3, #32]
 800a03e:	4a4d      	ldr	r2, [pc, #308]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a040:	f023 0320 	bic.w	r3, r3, #32
 800a044:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM3_EXTI_DISABLE_FALLING_EDGE();
 800a046:	4b4b      	ldr	r3, [pc, #300]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04a:	4a4a      	ldr	r2, [pc, #296]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a04c:	f023 0320 	bic.w	r3, r3, #32
 800a050:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM3_EXTI_DISABLE_RISING_EDGE();
 800a052:	4b48      	ldr	r3, [pc, #288]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a056:	4a47      	ldr	r2, [pc, #284]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a058:	f023 0320 	bic.w	r3, r3, #32
 800a05c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a066:	2b00      	cmp	r3, #0
 800a068:	d005      	beq.n	800a076 <HAL_PWREx_ConfigPVM+0x1a2>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_IT();
 800a06a:	4b42      	ldr	r3, [pc, #264]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	4a41      	ldr	r2, [pc, #260]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a070:	f043 0320 	orr.w	r3, r3, #32
 800a074:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d005      	beq.n	800a08e <HAL_PWREx_ConfigPVM+0x1ba>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_EVENT();
 800a082:	4b3c      	ldr	r3, [pc, #240]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a086:	4a3b      	ldr	r2, [pc, #236]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a088:	f043 0320 	orr.w	r3, r3, #32
 800a08c:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	2b00      	cmp	r3, #0
 800a098:	d005      	beq.n	800a0a6 <HAL_PWREx_ConfigPVM+0x1d2>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_RISING_EDGE();
 800a09a:	4b36      	ldr	r3, [pc, #216]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09e:	4a35      	ldr	r2, [pc, #212]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a0a0:	f043 0320 	orr.w	r3, r3, #32
 800a0a4:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	f003 0302 	and.w	r3, r3, #2
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d056      	beq.n	800a160 <HAL_PWREx_ConfigPVM+0x28c>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_FALLING_EDGE();
 800a0b2:	4b30      	ldr	r3, [pc, #192]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b6:	4a2f      	ldr	r2, [pc, #188]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a0b8:	f043 0320 	orr.w	r3, r3, #32
 800a0bc:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 800a0be:	e04f      	b.n	800a160 <HAL_PWREx_ConfigPVM+0x28c>

    case PWR_PVM_4:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM4_EXTI_DISABLE_EVENT();
 800a0c0:	4b2c      	ldr	r3, [pc, #176]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	4a2b      	ldr	r2, [pc, #172]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a0c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ca:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM4_EXTI_DISABLE_IT();
 800a0cc:	4b29      	ldr	r3, [pc, #164]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a0ce:	6a1b      	ldr	r3, [r3, #32]
 800a0d0:	4a28      	ldr	r2, [pc, #160]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a0d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0d6:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM4_EXTI_DISABLE_FALLING_EDGE();
 800a0d8:	4b26      	ldr	r3, [pc, #152]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0dc:	4a25      	ldr	r2, [pc, #148]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a0de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0e2:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM4_EXTI_DISABLE_RISING_EDGE();
 800a0e4:	4b23      	ldr	r3, [pc, #140]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e8:	4a22      	ldr	r2, [pc, #136]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a0ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ee:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d005      	beq.n	800a108 <HAL_PWREx_ConfigPVM+0x234>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_IT();
 800a0fc:	4b1d      	ldr	r3, [pc, #116]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a0fe:	6a1b      	ldr	r3, [r3, #32]
 800a100:	4a1c      	ldr	r2, [pc, #112]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a106:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d005      	beq.n	800a120 <HAL_PWREx_ConfigPVM+0x24c>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_EVENT();
 800a114:	4b17      	ldr	r3, [pc, #92]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	4a16      	ldr	r2, [pc, #88]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a11a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a11e:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d005      	beq.n	800a138 <HAL_PWREx_ConfigPVM+0x264>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_RISING_EDGE();
 800a12c:	4b11      	ldr	r3, [pc, #68]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a130:	4a10      	ldr	r2, [pc, #64]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a136:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	f003 0302 	and.w	r3, r3, #2
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00f      	beq.n	800a164 <HAL_PWREx_ConfigPVM+0x290>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_FALLING_EDGE();
 800a144:	4b0b      	ldr	r3, [pc, #44]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a148:	4a0a      	ldr	r2, [pc, #40]	; (800a174 <HAL_PWREx_ConfigPVM+0x2a0>)
 800a14a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a14e:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 800a150:	e008      	b.n	800a164 <HAL_PWREx_ConfigPVM+0x290>

    default:
      status = HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	73fb      	strb	r3, [r7, #15]
      break;
 800a156:	e006      	b.n	800a166 <HAL_PWREx_ConfigPVM+0x292>
      break;
 800a158:	bf00      	nop
 800a15a:	e004      	b.n	800a166 <HAL_PWREx_ConfigPVM+0x292>
      break;
 800a15c:	bf00      	nop
 800a15e:	e002      	b.n	800a166 <HAL_PWREx_ConfigPVM+0x292>
      break;
 800a160:	bf00      	nop
 800a162:	e000      	b.n	800a166 <HAL_PWREx_ConfigPVM+0x292>
      break;
 800a164:	bf00      	nop
  }

  return status;
 800a166:	7bfb      	ldrb	r3, [r7, #15]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	40010400 	.word	0x40010400

0800a178 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800a178:	b480      	push	{r7}
 800a17a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800a17c:	4b05      	ldr	r3, [pc, #20]	; (800a194 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a04      	ldr	r2, [pc, #16]	; (800a194 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a186:	6013      	str	r3, [r2, #0]
}
 800a188:	bf00      	nop
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	40007000 	.word	0x40007000

0800a198 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800a19e:	4b17      	ldr	r3, [pc, #92]	; (800a1fc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a16      	ldr	r2, [pc, #88]	; (800a1fc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a1a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1a8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a1aa:	4b15      	ldr	r3, [pc, #84]	; (800a200 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2232      	movs	r2, #50	; 0x32
 800a1b0:	fb02 f303 	mul.w	r3, r2, r3
 800a1b4:	4a13      	ldr	r2, [pc, #76]	; (800a204 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800a1b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ba:	0c9b      	lsrs	r3, r3, #18
 800a1bc:	3301      	adds	r3, #1
 800a1be:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a1c0:	e002      	b.n	800a1c8 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a1c8:	4b0c      	ldr	r3, [pc, #48]	; (800a1fc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1d4:	d102      	bne.n	800a1dc <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1f2      	bne.n	800a1c2 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a1dc:	4b07      	ldr	r3, [pc, #28]	; (800a1fc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a1de:	695b      	ldr	r3, [r3, #20]
 800a1e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1e8:	d101      	bne.n	800a1ee <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e000      	b.n	800a1f0 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	40007000 	.word	0x40007000
 800a200:	20000008 	.word	0x20000008
 800a204:	431bde83 	.word	0x431bde83

0800a208 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	4603      	mov	r3, r0
 800a210:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 800a212:	4b10      	ldr	r3, [pc, #64]	; (800a254 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a0f      	ldr	r2, [pc, #60]	; (800a254 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800a218:	f023 0307 	bic.w	r3, r3, #7
 800a21c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a21e:	4b0e      	ldr	r3, [pc, #56]	; (800a258 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	4a0d      	ldr	r2, [pc, #52]	; (800a258 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800a224:	f043 0304 	orr.w	r3, r3, #4
 800a228:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800a22a:	79fb      	ldrb	r3, [r7, #7]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d101      	bne.n	800a234 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800a230:	bf30      	wfi
 800a232:	e002      	b.n	800a23a <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800a234:	bf40      	sev
    __WFE();
 800a236:	bf20      	wfe
    __WFE();
 800a238:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a23a:	4b07      	ldr	r3, [pc, #28]	; (800a258 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	4a06      	ldr	r2, [pc, #24]	; (800a258 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800a240:	f023 0304 	bic.w	r3, r3, #4
 800a244:	6113      	str	r3, [r2, #16]
}
 800a246:	bf00      	nop
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	40007000 	.word	0x40007000
 800a258:	e000ed00 	.word	0xe000ed00

0800a25c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	4603      	mov	r3, r0
 800a264:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 800a266:	4b11      	ldr	r3, [pc, #68]	; (800a2ac <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f023 0307 	bic.w	r3, r3, #7
 800a26e:	4a0f      	ldr	r2, [pc, #60]	; (800a2ac <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800a270:	f043 0301 	orr.w	r3, r3, #1
 800a274:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a276:	4b0e      	ldr	r3, [pc, #56]	; (800a2b0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	4a0d      	ldr	r2, [pc, #52]	; (800a2b0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800a27c:	f043 0304 	orr.w	r3, r3, #4
 800a280:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800a282:	79fb      	ldrb	r3, [r7, #7]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d101      	bne.n	800a28c <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800a288:	bf30      	wfi
 800a28a:	e002      	b.n	800a292 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800a28c:	bf40      	sev
    __WFE();
 800a28e:	bf20      	wfe
    __WFE();
 800a290:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a292:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	4a06      	ldr	r2, [pc, #24]	; (800a2b0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800a298:	f023 0304 	bic.w	r3, r3, #4
 800a29c:	6113      	str	r3, [r2, #16]
}
 800a29e:	bf00      	nop
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	40007000 	.word	0x40007000
 800a2b0:	e000ed00 	.word	0xe000ed00

0800a2b4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 800a2be:	4b11      	ldr	r3, [pc, #68]	; (800a304 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f023 0307 	bic.w	r3, r3, #7
 800a2c6:	4a0f      	ldr	r2, [pc, #60]	; (800a304 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800a2c8:	f043 0302 	orr.w	r3, r3, #2
 800a2cc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a2ce:	4b0e      	ldr	r3, [pc, #56]	; (800a308 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	4a0d      	ldr	r2, [pc, #52]	; (800a308 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800a2d4:	f043 0304 	orr.w	r3, r3, #4
 800a2d8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800a2da:	79fb      	ldrb	r3, [r7, #7]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d101      	bne.n	800a2e4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800a2e0:	bf30      	wfi
 800a2e2:	e002      	b.n	800a2ea <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800a2e4:	bf40      	sev
    __WFE();
 800a2e6:	bf20      	wfe
    __WFE();
 800a2e8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a2ea:	4b07      	ldr	r3, [pc, #28]	; (800a308 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	4a06      	ldr	r2, [pc, #24]	; (800a308 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800a2f0:	f023 0304 	bic.w	r3, r3, #4
 800a2f4:	6113      	str	r3, [r2, #16]
}
 800a2f6:	bf00      	nop
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	40007000 	.word	0x40007000
 800a308:	e000ed00 	.word	0xe000ed00

0800a30c <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 800a30c:	b480      	push	{r7}
 800a30e:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 800a310:	4b09      	ldr	r3, [pc, #36]	; (800a338 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f023 0307 	bic.w	r3, r3, #7
 800a318:	4a07      	ldr	r2, [pc, #28]	; (800a338 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800a31a:	f043 0304 	orr.w	r3, r3, #4
 800a31e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a320:	4b06      	ldr	r3, [pc, #24]	; (800a33c <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	4a05      	ldr	r2, [pc, #20]	; (800a33c <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800a326:	f043 0304 	orr.w	r3, r3, #4
 800a32a:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800a32c:	bf30      	wfi
}
 800a32e:	bf00      	nop
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	40007000 	.word	0x40007000
 800a33c:	e000ed00 	.word	0xe000ed00

0800a340 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 800a344:	4b1c      	ldr	r3, [pc, #112]	; (800a3b8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a346:	695b      	ldr	r3, [r3, #20]
 800a348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d005      	beq.n	800a35c <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800a350:	f7ff f9d0 	bl	80096f4 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800a354:	4b18      	ldr	r3, [pc, #96]	; (800a3b8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a356:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a35a:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 800a35c:	4b16      	ldr	r3, [pc, #88]	; (800a3b8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a360:	f003 0308 	and.w	r3, r3, #8
 800a364:	2b00      	cmp	r3, #0
 800a366:	d004      	beq.n	800a372 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800a368:	f000 f828 	bl	800a3bc <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800a36c:	4b12      	ldr	r3, [pc, #72]	; (800a3b8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a36e:	2208      	movs	r2, #8
 800a370:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 800a372:	4b11      	ldr	r3, [pc, #68]	; (800a3b8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a376:	f003 0310 	and.w	r3, r3, #16
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d004      	beq.n	800a388 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 800a37e:	f000 f824 	bl	800a3ca <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 800a382:	4b0d      	ldr	r3, [pc, #52]	; (800a3b8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a384:	2210      	movs	r2, #16
 800a386:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 800a388:	4b0b      	ldr	r3, [pc, #44]	; (800a3b8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38c:	f003 0320 	and.w	r3, r3, #32
 800a390:	2b00      	cmp	r3, #0
 800a392:	d004      	beq.n	800a39e <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800a394:	f000 f820 	bl	800a3d8 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800a398:	4b07      	ldr	r3, [pc, #28]	; (800a3b8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a39a:	2220      	movs	r2, #32
 800a39c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 800a39e:	4b06      	ldr	r3, [pc, #24]	; (800a3b8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d004      	beq.n	800a3b4 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 800a3aa:	f000 f81c 	bl	800a3e6 <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 800a3ae:	4b02      	ldr	r3, [pc, #8]	; (800a3b8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a3b0:	2240      	movs	r2, #64	; 0x40
 800a3b2:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800a3b4:	bf00      	nop
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	40010400 	.word	0x40010400

0800a3bc <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800a3c0:	bf00      	nop
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 800a3ce:	bf00      	nop
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800a3dc:	bf00      	nop
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 800a3ea:	bf00      	nop
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800a3fa:	4b4a      	ldr	r3, [pc, #296]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a49      	ldr	r2, [pc, #292]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a400:	f043 0301 	orr.w	r3, r3, #1
 800a404:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800a406:	f7f7 f923 	bl	8001650 <HAL_GetTick>
 800a40a:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a40c:	e008      	b.n	800a420 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a40e:	f7f7 f91f 	bl	8001650 <HAL_GetTick>
 800a412:	4602      	mov	r2, r0
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d901      	bls.n	800a420 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e07c      	b.n	800a51a <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a420:	4b40      	ldr	r3, [pc, #256]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 0302 	and.w	r3, r3, #2
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d0f0      	beq.n	800a40e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 800a42c:	4b3d      	ldr	r3, [pc, #244]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a434:	4a3b      	ldr	r2, [pc, #236]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a436:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a43a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 800a43c:	4b39      	ldr	r3, [pc, #228]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a43e:	2200      	movs	r2, #0
 800a440:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 800a442:	4b39      	ldr	r3, [pc, #228]	; (800a528 <HAL_RCC_DeInit+0x134>)
 800a444:	4a39      	ldr	r2, [pc, #228]	; (800a52c <HAL_RCC_DeInit+0x138>)
 800a446:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800a448:	4b39      	ldr	r3, [pc, #228]	; (800a530 <HAL_RCC_DeInit+0x13c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7f7 f8af 	bl	80015b0 <HAL_InitTick>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e05e      	b.n	800a51a <HAL_RCC_DeInit+0x126>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800a45c:	f7f7 f8f8 	bl	8001650 <HAL_GetTick>
 800a460:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800a462:	e00a      	b.n	800a47a <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a464:	f7f7 f8f4 	bl	8001650 <HAL_GetTick>
 800a468:	4602      	mov	r2, r0
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a472:	4293      	cmp	r3, r2
 800a474:	d901      	bls.n	800a47a <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 800a476:	2303      	movs	r3, #3
 800a478:	e04f      	b.n	800a51a <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800a47a:	4b2a      	ldr	r3, [pc, #168]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	f003 030c 	and.w	r3, r3, #12
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1ee      	bne.n	800a464 <HAL_RCC_DeInit+0x70>
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, HSECSSON, PLLON, PLLSAIxON bits */
#if defined(RCC_PLLSAI2_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 800a486:	4b27      	ldr	r3, [pc, #156]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	4926      	ldr	r1, [pc, #152]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a48c:	4b29      	ldr	r3, [pc, #164]	; (800a534 <HAL_RCC_DeInit+0x140>)
 800a48e:	4013      	ands	r3, r2
 800a490:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800a492:	f7f7 f8dd 	bl	8001650 <HAL_GetTick>
 800a496:	6078      	str	r0, [r7, #4]

#if defined(RCC_PLLSAI2_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 800a498:	e008      	b.n	800a4ac <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a49a:	f7f7 f8d9 	bl	8001650 <HAL_GetTick>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d901      	bls.n	800a4ac <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e036      	b.n	800a51a <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 800a4ac:	4b1d      	ldr	r3, [pc, #116]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 5328 	and.w	r3, r3, #704643072	; 0x2a000000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1f0      	bne.n	800a49a <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 800a4b8:	4b1a      	ldr	r3, [pc, #104]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 800a4be:	4b19      	ldr	r3, [pc, #100]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	4a18      	ldr	r2, [pc, #96]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a4c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4c8:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 800a4ca:	4b16      	ldr	r3, [pc, #88]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 800a4d0:	4b14      	ldr	r3, [pc, #80]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	4a13      	ldr	r2, [pc, #76]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a4d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4da:	6113      	str	r3, [r2, #16]
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Reset PLLSAI2CFGR register */
  CLEAR_REG(RCC->PLLSAI2CFGR);
 800a4dc:	4b11      	ldr	r3, [pc, #68]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 800a4e2:	4b10      	ldr	r3, [pc, #64]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	4a0f      	ldr	r2, [pc, #60]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a4e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4ec:	6153      	str	r3, [r2, #20]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800a4ee:	4b0d      	ldr	r3, [pc, #52]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a0c      	ldr	r2, [pc, #48]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a4f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800a4fa:	4b0a      	ldr	r3, [pc, #40]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800a500:	4b08      	ldr	r3, [pc, #32]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a502:	f04f 32ff 	mov.w	r2, #4294967295
 800a506:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800a508:	4b06      	ldr	r3, [pc, #24]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a50a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a50e:	4a05      	ldr	r2, [pc, #20]	; (800a524 <HAL_RCC_DeInit+0x130>)
 800a510:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a514:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	40021000 	.word	0x40021000
 800a528:	20000008 	.word	0x20000008
 800a52c:	003d0900 	.word	0x003d0900
 800a530:	2000000c 	.word	0x2000000c
 800a534:	eafef4ff 	.word	0xeafef4ff

0800a538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b088      	sub	sp, #32
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d101      	bne.n	800a54a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e3d4      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a54a:	4ba1      	ldr	r3, [pc, #644]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	f003 030c 	and.w	r3, r3, #12
 800a552:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a554:	4b9e      	ldr	r3, [pc, #632]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	f003 0303 	and.w	r3, r3, #3
 800a55c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 0310 	and.w	r3, r3, #16
 800a566:	2b00      	cmp	r3, #0
 800a568:	f000 80e4 	beq.w	800a734 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d007      	beq.n	800a582 <HAL_RCC_OscConfig+0x4a>
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	2b0c      	cmp	r3, #12
 800a576:	f040 808b 	bne.w	800a690 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	f040 8087 	bne.w	800a690 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a582:	4b93      	ldr	r3, [pc, #588]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0302 	and.w	r3, r3, #2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d005      	beq.n	800a59a <HAL_RCC_OscConfig+0x62>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d101      	bne.n	800a59a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e3ac      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a1a      	ldr	r2, [r3, #32]
 800a59e:	4b8c      	ldr	r3, [pc, #560]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 0308 	and.w	r3, r3, #8
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d004      	beq.n	800a5b4 <HAL_RCC_OscConfig+0x7c>
 800a5aa:	4b89      	ldr	r3, [pc, #548]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5b2:	e005      	b.n	800a5c0 <HAL_RCC_OscConfig+0x88>
 800a5b4:	4b86      	ldr	r3, [pc, #536]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a5b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5ba:	091b      	lsrs	r3, r3, #4
 800a5bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d223      	bcs.n	800a60c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a1b      	ldr	r3, [r3, #32]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 fe99 	bl	800b300 <RCC_SetFlashLatencyFromMSIRange>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e38d      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a5d8:	4b7d      	ldr	r3, [pc, #500]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a7c      	ldr	r2, [pc, #496]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a5de:	f043 0308 	orr.w	r3, r3, #8
 800a5e2:	6013      	str	r3, [r2, #0]
 800a5e4:	4b7a      	ldr	r3, [pc, #488]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	4977      	ldr	r1, [pc, #476]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a5f6:	4b76      	ldr	r3, [pc, #472]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	021b      	lsls	r3, r3, #8
 800a604:	4972      	ldr	r1, [pc, #456]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a606:	4313      	orrs	r3, r2
 800a608:	604b      	str	r3, [r1, #4]
 800a60a:	e025      	b.n	800a658 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a60c:	4b70      	ldr	r3, [pc, #448]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a6f      	ldr	r2, [pc, #444]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a612:	f043 0308 	orr.w	r3, r3, #8
 800a616:	6013      	str	r3, [r2, #0]
 800a618:	4b6d      	ldr	r3, [pc, #436]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a1b      	ldr	r3, [r3, #32]
 800a624:	496a      	ldr	r1, [pc, #424]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a626:	4313      	orrs	r3, r2
 800a628:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a62a:	4b69      	ldr	r3, [pc, #420]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	69db      	ldr	r3, [r3, #28]
 800a636:	021b      	lsls	r3, r3, #8
 800a638:	4965      	ldr	r1, [pc, #404]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a63a:	4313      	orrs	r3, r2
 800a63c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d109      	bne.n	800a658 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a1b      	ldr	r3, [r3, #32]
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 fe59 	bl	800b300 <RCC_SetFlashLatencyFromMSIRange>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d001      	beq.n	800a658 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e34d      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a658:	f000 fc6a 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 800a65c:	4602      	mov	r2, r0
 800a65e:	4b5c      	ldr	r3, [pc, #368]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	091b      	lsrs	r3, r3, #4
 800a664:	f003 030f 	and.w	r3, r3, #15
 800a668:	495a      	ldr	r1, [pc, #360]	; (800a7d4 <HAL_RCC_OscConfig+0x29c>)
 800a66a:	5ccb      	ldrb	r3, [r1, r3]
 800a66c:	f003 031f 	and.w	r3, r3, #31
 800a670:	fa22 f303 	lsr.w	r3, r2, r3
 800a674:	4a58      	ldr	r2, [pc, #352]	; (800a7d8 <HAL_RCC_OscConfig+0x2a0>)
 800a676:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a678:	4b58      	ldr	r3, [pc, #352]	; (800a7dc <HAL_RCC_OscConfig+0x2a4>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7f6 ff97 	bl	80015b0 <HAL_InitTick>
 800a682:	4603      	mov	r3, r0
 800a684:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a686:	7bfb      	ldrb	r3, [r7, #15]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d052      	beq.n	800a732 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800a68c:	7bfb      	ldrb	r3, [r7, #15]
 800a68e:	e331      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d032      	beq.n	800a6fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a698:	4b4d      	ldr	r3, [pc, #308]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a4c      	ldr	r2, [pc, #304]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a69e:	f043 0301 	orr.w	r3, r3, #1
 800a6a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a6a4:	f7f6 ffd4 	bl	8001650 <HAL_GetTick>
 800a6a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a6aa:	e008      	b.n	800a6be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a6ac:	f7f6 ffd0 	bl	8001650 <HAL_GetTick>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	1ad3      	subs	r3, r2, r3
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d901      	bls.n	800a6be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	e31a      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a6be:	4b44      	ldr	r3, [pc, #272]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 0302 	and.w	r3, r3, #2
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d0f0      	beq.n	800a6ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a6ca:	4b41      	ldr	r3, [pc, #260]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a40      	ldr	r2, [pc, #256]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a6d0:	f043 0308 	orr.w	r3, r3, #8
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	4b3e      	ldr	r3, [pc, #248]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a1b      	ldr	r3, [r3, #32]
 800a6e2:	493b      	ldr	r1, [pc, #236]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a6e8:	4b39      	ldr	r3, [pc, #228]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	69db      	ldr	r3, [r3, #28]
 800a6f4:	021b      	lsls	r3, r3, #8
 800a6f6:	4936      	ldr	r1, [pc, #216]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	604b      	str	r3, [r1, #4]
 800a6fc:	e01a      	b.n	800a734 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a6fe:	4b34      	ldr	r3, [pc, #208]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a33      	ldr	r2, [pc, #204]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a704:	f023 0301 	bic.w	r3, r3, #1
 800a708:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a70a:	f7f6 ffa1 	bl	8001650 <HAL_GetTick>
 800a70e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a710:	e008      	b.n	800a724 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a712:	f7f6 ff9d 	bl	8001650 <HAL_GetTick>
 800a716:	4602      	mov	r2, r0
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d901      	bls.n	800a724 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800a720:	2303      	movs	r3, #3
 800a722:	e2e7      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a724:	4b2a      	ldr	r3, [pc, #168]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 0302 	and.w	r3, r3, #2
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d1f0      	bne.n	800a712 <HAL_RCC_OscConfig+0x1da>
 800a730:	e000      	b.n	800a734 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a732:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0301 	and.w	r3, r3, #1
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d074      	beq.n	800a82a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	2b08      	cmp	r3, #8
 800a744:	d005      	beq.n	800a752 <HAL_RCC_OscConfig+0x21a>
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	2b0c      	cmp	r3, #12
 800a74a:	d10e      	bne.n	800a76a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d10b      	bne.n	800a76a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a752:	4b1f      	ldr	r3, [pc, #124]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d064      	beq.n	800a828 <HAL_RCC_OscConfig+0x2f0>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d160      	bne.n	800a828 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e2c4      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a772:	d106      	bne.n	800a782 <HAL_RCC_OscConfig+0x24a>
 800a774:	4b16      	ldr	r3, [pc, #88]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a15      	ldr	r2, [pc, #84]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a77a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	e01d      	b.n	800a7be <HAL_RCC_OscConfig+0x286>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a78a:	d10c      	bne.n	800a7a6 <HAL_RCC_OscConfig+0x26e>
 800a78c:	4b10      	ldr	r3, [pc, #64]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a0f      	ldr	r2, [pc, #60]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	4b0d      	ldr	r3, [pc, #52]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a0c      	ldr	r2, [pc, #48]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a79e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	e00b      	b.n	800a7be <HAL_RCC_OscConfig+0x286>
 800a7a6:	4b0a      	ldr	r3, [pc, #40]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a09      	ldr	r2, [pc, #36]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a7ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	4b07      	ldr	r3, [pc, #28]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a06      	ldr	r2, [pc, #24]	; (800a7d0 <HAL_RCC_OscConfig+0x298>)
 800a7b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d01c      	beq.n	800a800 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7c6:	f7f6 ff43 	bl	8001650 <HAL_GetTick>
 800a7ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a7cc:	e011      	b.n	800a7f2 <HAL_RCC_OscConfig+0x2ba>
 800a7ce:	bf00      	nop
 800a7d0:	40021000 	.word	0x40021000
 800a7d4:	08012f60 	.word	0x08012f60
 800a7d8:	20000008 	.word	0x20000008
 800a7dc:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7e0:	f7f6 ff36 	bl	8001650 <HAL_GetTick>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	2b64      	cmp	r3, #100	; 0x64
 800a7ec:	d901      	bls.n	800a7f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e280      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a7f2:	4baf      	ldr	r3, [pc, #700]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0f0      	beq.n	800a7e0 <HAL_RCC_OscConfig+0x2a8>
 800a7fe:	e014      	b.n	800a82a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a800:	f7f6 ff26 	bl	8001650 <HAL_GetTick>
 800a804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a806:	e008      	b.n	800a81a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a808:	f7f6 ff22 	bl	8001650 <HAL_GetTick>
 800a80c:	4602      	mov	r2, r0
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	2b64      	cmp	r3, #100	; 0x64
 800a814:	d901      	bls.n	800a81a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e26c      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a81a:	4ba5      	ldr	r3, [pc, #660]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1f0      	bne.n	800a808 <HAL_RCC_OscConfig+0x2d0>
 800a826:	e000      	b.n	800a82a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 0302 	and.w	r3, r3, #2
 800a832:	2b00      	cmp	r3, #0
 800a834:	d060      	beq.n	800a8f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	2b04      	cmp	r3, #4
 800a83a:	d005      	beq.n	800a848 <HAL_RCC_OscConfig+0x310>
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	2b0c      	cmp	r3, #12
 800a840:	d119      	bne.n	800a876 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2b02      	cmp	r3, #2
 800a846:	d116      	bne.n	800a876 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a848:	4b99      	ldr	r3, [pc, #612]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a850:	2b00      	cmp	r3, #0
 800a852:	d005      	beq.n	800a860 <HAL_RCC_OscConfig+0x328>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e249      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a860:	4b93      	ldr	r3, [pc, #588]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	061b      	lsls	r3, r3, #24
 800a86e:	4990      	ldr	r1, [pc, #576]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a870:	4313      	orrs	r3, r2
 800a872:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a874:	e040      	b.n	800a8f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d023      	beq.n	800a8c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a87e:	4b8c      	ldr	r3, [pc, #560]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a8b      	ldr	r2, [pc, #556]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a88a:	f7f6 fee1 	bl	8001650 <HAL_GetTick>
 800a88e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a890:	e008      	b.n	800a8a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a892:	f7f6 fedd 	bl	8001650 <HAL_GetTick>
 800a896:	4602      	mov	r2, r0
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d901      	bls.n	800a8a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	e227      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a8a4:	4b82      	ldr	r3, [pc, #520]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d0f0      	beq.n	800a892 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8b0:	4b7f      	ldr	r3, [pc, #508]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	061b      	lsls	r3, r3, #24
 800a8be:	497c      	ldr	r1, [pc, #496]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	604b      	str	r3, [r1, #4]
 800a8c4:	e018      	b.n	800a8f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8c6:	4b7a      	ldr	r3, [pc, #488]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a79      	ldr	r2, [pc, #484]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a8cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8d2:	f7f6 febd 	bl	8001650 <HAL_GetTick>
 800a8d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a8d8:	e008      	b.n	800a8ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8da:	f7f6 feb9 	bl	8001650 <HAL_GetTick>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d901      	bls.n	800a8ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e203      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a8ec:	4b70      	ldr	r3, [pc, #448]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1f0      	bne.n	800a8da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0308 	and.w	r3, r3, #8
 800a900:	2b00      	cmp	r3, #0
 800a902:	d03c      	beq.n	800a97e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	695b      	ldr	r3, [r3, #20]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d01c      	beq.n	800a946 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a90c:	4b68      	ldr	r3, [pc, #416]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a90e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a912:	4a67      	ldr	r2, [pc, #412]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a914:	f043 0301 	orr.w	r3, r3, #1
 800a918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a91c:	f7f6 fe98 	bl	8001650 <HAL_GetTick>
 800a920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a922:	e008      	b.n	800a936 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a924:	f7f6 fe94 	bl	8001650 <HAL_GetTick>
 800a928:	4602      	mov	r2, r0
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d901      	bls.n	800a936 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a932:	2303      	movs	r3, #3
 800a934:	e1de      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a936:	4b5e      	ldr	r3, [pc, #376]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a93c:	f003 0302 	and.w	r3, r3, #2
 800a940:	2b00      	cmp	r3, #0
 800a942:	d0ef      	beq.n	800a924 <HAL_RCC_OscConfig+0x3ec>
 800a944:	e01b      	b.n	800a97e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a946:	4b5a      	ldr	r3, [pc, #360]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a94c:	4a58      	ldr	r2, [pc, #352]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a94e:	f023 0301 	bic.w	r3, r3, #1
 800a952:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a956:	f7f6 fe7b 	bl	8001650 <HAL_GetTick>
 800a95a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a95c:	e008      	b.n	800a970 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a95e:	f7f6 fe77 	bl	8001650 <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d901      	bls.n	800a970 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a96c:	2303      	movs	r3, #3
 800a96e:	e1c1      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a970:	4b4f      	ldr	r3, [pc, #316]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a976:	f003 0302 	and.w	r3, r3, #2
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1ef      	bne.n	800a95e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 0304 	and.w	r3, r3, #4
 800a986:	2b00      	cmp	r3, #0
 800a988:	f000 80a6 	beq.w	800aad8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a98c:	2300      	movs	r3, #0
 800a98e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a990:	4b47      	ldr	r3, [pc, #284]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10d      	bne.n	800a9b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a99c:	4b44      	ldr	r3, [pc, #272]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a99e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a0:	4a43      	ldr	r2, [pc, #268]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a9a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9a6:	6593      	str	r3, [r2, #88]	; 0x58
 800a9a8:	4b41      	ldr	r3, [pc, #260]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800a9aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9b0:	60bb      	str	r3, [r7, #8]
 800a9b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a9b8:	4b3e      	ldr	r3, [pc, #248]	; (800aab4 <HAL_RCC_OscConfig+0x57c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d118      	bne.n	800a9f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9c4:	4b3b      	ldr	r3, [pc, #236]	; (800aab4 <HAL_RCC_OscConfig+0x57c>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a3a      	ldr	r2, [pc, #232]	; (800aab4 <HAL_RCC_OscConfig+0x57c>)
 800a9ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9d0:	f7f6 fe3e 	bl	8001650 <HAL_GetTick>
 800a9d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a9d6:	e008      	b.n	800a9ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9d8:	f7f6 fe3a 	bl	8001650 <HAL_GetTick>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d901      	bls.n	800a9ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e184      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a9ea:	4b32      	ldr	r3, [pc, #200]	; (800aab4 <HAL_RCC_OscConfig+0x57c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d0f0      	beq.n	800a9d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d108      	bne.n	800aa10 <HAL_RCC_OscConfig+0x4d8>
 800a9fe:	4b2c      	ldr	r3, [pc, #176]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800aa00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa04:	4a2a      	ldr	r2, [pc, #168]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800aa06:	f043 0301 	orr.w	r3, r3, #1
 800aa0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aa0e:	e024      	b.n	800aa5a <HAL_RCC_OscConfig+0x522>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	2b05      	cmp	r3, #5
 800aa16:	d110      	bne.n	800aa3a <HAL_RCC_OscConfig+0x502>
 800aa18:	4b25      	ldr	r3, [pc, #148]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800aa1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa1e:	4a24      	ldr	r2, [pc, #144]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800aa20:	f043 0304 	orr.w	r3, r3, #4
 800aa24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aa28:	4b21      	ldr	r3, [pc, #132]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800aa2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa2e:	4a20      	ldr	r2, [pc, #128]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800aa30:	f043 0301 	orr.w	r3, r3, #1
 800aa34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aa38:	e00f      	b.n	800aa5a <HAL_RCC_OscConfig+0x522>
 800aa3a:	4b1d      	ldr	r3, [pc, #116]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800aa3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa40:	4a1b      	ldr	r2, [pc, #108]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800aa42:	f023 0301 	bic.w	r3, r3, #1
 800aa46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aa4a:	4b19      	ldr	r3, [pc, #100]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800aa4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa50:	4a17      	ldr	r2, [pc, #92]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800aa52:	f023 0304 	bic.w	r3, r3, #4
 800aa56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d016      	beq.n	800aa90 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa62:	f7f6 fdf5 	bl	8001650 <HAL_GetTick>
 800aa66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa68:	e00a      	b.n	800aa80 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa6a:	f7f6 fdf1 	bl	8001650 <HAL_GetTick>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d901      	bls.n	800aa80 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	e139      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa80:	4b0b      	ldr	r3, [pc, #44]	; (800aab0 <HAL_RCC_OscConfig+0x578>)
 800aa82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa86:	f003 0302 	and.w	r3, r3, #2
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0ed      	beq.n	800aa6a <HAL_RCC_OscConfig+0x532>
 800aa8e:	e01a      	b.n	800aac6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa90:	f7f6 fdde 	bl	8001650 <HAL_GetTick>
 800aa94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa96:	e00f      	b.n	800aab8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa98:	f7f6 fdda 	bl	8001650 <HAL_GetTick>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d906      	bls.n	800aab8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e122      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
 800aaae:	bf00      	nop
 800aab0:	40021000 	.word	0x40021000
 800aab4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aab8:	4b90      	ldr	r3, [pc, #576]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800aaba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aabe:	f003 0302 	and.w	r3, r3, #2
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1e8      	bne.n	800aa98 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aac6:	7ffb      	ldrb	r3, [r7, #31]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d105      	bne.n	800aad8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aacc:	4b8b      	ldr	r3, [pc, #556]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800aace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad0:	4a8a      	ldr	r2, [pc, #552]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800aad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aad6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f000 8108 	beq.w	800acf2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	f040 80d0 	bne.w	800ac8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800aaec:	4b83      	ldr	r3, [pc, #524]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	f003 0203 	and.w	r2, r3, #3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d130      	bne.n	800ab62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d127      	bne.n	800ab62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d11f      	bne.n	800ab62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ab2c:	2a07      	cmp	r2, #7
 800ab2e:	bf14      	ite	ne
 800ab30:	2201      	movne	r2, #1
 800ab32:	2200      	moveq	r2, #0
 800ab34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d113      	bne.n	800ab62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab44:	085b      	lsrs	r3, r3, #1
 800ab46:	3b01      	subs	r3, #1
 800ab48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d109      	bne.n	800ab62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab58:	085b      	lsrs	r3, r3, #1
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d06e      	beq.n	800ac40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	2b0c      	cmp	r3, #12
 800ab66:	d069      	beq.n	800ac3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ab68:	4b64      	ldr	r3, [pc, #400]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d105      	bne.n	800ab80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800ab74:	4b61      	ldr	r3, [pc, #388]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d001      	beq.n	800ab84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	e0b7      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ab84:	4b5d      	ldr	r3, [pc, #372]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a5c      	ldr	r2, [pc, #368]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ab8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ab90:	f7f6 fd5e 	bl	8001650 <HAL_GetTick>
 800ab94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab96:	e008      	b.n	800abaa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab98:	f7f6 fd5a 	bl	8001650 <HAL_GetTick>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d901      	bls.n	800abaa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800aba6:	2303      	movs	r3, #3
 800aba8:	e0a4      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800abaa:	4b54      	ldr	r3, [pc, #336]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1f0      	bne.n	800ab98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abb6:	4b51      	ldr	r3, [pc, #324]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800abb8:	68da      	ldr	r2, [r3, #12]
 800abba:	4b51      	ldr	r3, [pc, #324]	; (800ad00 <HAL_RCC_OscConfig+0x7c8>)
 800abbc:	4013      	ands	r3, r2
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800abc6:	3a01      	subs	r2, #1
 800abc8:	0112      	lsls	r2, r2, #4
 800abca:	4311      	orrs	r1, r2
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800abd0:	0212      	lsls	r2, r2, #8
 800abd2:	4311      	orrs	r1, r2
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800abd8:	0852      	lsrs	r2, r2, #1
 800abda:	3a01      	subs	r2, #1
 800abdc:	0552      	lsls	r2, r2, #21
 800abde:	4311      	orrs	r1, r2
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800abe4:	0852      	lsrs	r2, r2, #1
 800abe6:	3a01      	subs	r2, #1
 800abe8:	0652      	lsls	r2, r2, #25
 800abea:	4311      	orrs	r1, r2
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800abf0:	0912      	lsrs	r2, r2, #4
 800abf2:	0452      	lsls	r2, r2, #17
 800abf4:	430a      	orrs	r2, r1
 800abf6:	4941      	ldr	r1, [pc, #260]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800abf8:	4313      	orrs	r3, r2
 800abfa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800abfc:	4b3f      	ldr	r3, [pc, #252]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a3e      	ldr	r2, [pc, #248]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ac02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ac08:	4b3c      	ldr	r3, [pc, #240]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	4a3b      	ldr	r2, [pc, #236]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ac0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ac14:	f7f6 fd1c 	bl	8001650 <HAL_GetTick>
 800ac18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac1a:	e008      	b.n	800ac2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac1c:	f7f6 fd18 	bl	8001650 <HAL_GetTick>
 800ac20:	4602      	mov	r2, r0
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d901      	bls.n	800ac2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	e062      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac2e:	4b33      	ldr	r3, [pc, #204]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d0f0      	beq.n	800ac1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ac3a:	e05a      	b.n	800acf2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e059      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac40:	4b2e      	ldr	r3, [pc, #184]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d152      	bne.n	800acf2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ac4c:	4b2b      	ldr	r3, [pc, #172]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a2a      	ldr	r2, [pc, #168]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ac52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ac58:	4b28      	ldr	r3, [pc, #160]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	4a27      	ldr	r2, [pc, #156]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ac5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ac64:	f7f6 fcf4 	bl	8001650 <HAL_GetTick>
 800ac68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac6a:	e008      	b.n	800ac7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac6c:	f7f6 fcf0 	bl	8001650 <HAL_GetTick>
 800ac70:	4602      	mov	r2, r0
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d901      	bls.n	800ac7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	e03a      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac7e:	4b1f      	ldr	r3, [pc, #124]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d0f0      	beq.n	800ac6c <HAL_RCC_OscConfig+0x734>
 800ac8a:	e032      	b.n	800acf2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	2b0c      	cmp	r3, #12
 800ac90:	d02d      	beq.n	800acee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac92:	4b1a      	ldr	r3, [pc, #104]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a19      	ldr	r2, [pc, #100]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ac98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800ac9e:	4b17      	ldr	r3, [pc, #92]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d105      	bne.n	800acb6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800acaa:	4b14      	ldr	r3, [pc, #80]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	4a13      	ldr	r2, [pc, #76]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800acb0:	f023 0303 	bic.w	r3, r3, #3
 800acb4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800acb6:	4b11      	ldr	r3, [pc, #68]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	4a10      	ldr	r2, [pc, #64]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800acbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800acc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acc6:	f7f6 fcc3 	bl	8001650 <HAL_GetTick>
 800acca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800accc:	e008      	b.n	800ace0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acce:	f7f6 fcbf 	bl	8001650 <HAL_GetTick>
 800acd2:	4602      	mov	r2, r0
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d901      	bls.n	800ace0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800acdc:	2303      	movs	r3, #3
 800acde:	e009      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ace0:	4b06      	ldr	r3, [pc, #24]	; (800acfc <HAL_RCC_OscConfig+0x7c4>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d1f0      	bne.n	800acce <HAL_RCC_OscConfig+0x796>
 800acec:	e001      	b.n	800acf2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	e000      	b.n	800acf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3720      	adds	r7, #32
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	40021000 	.word	0x40021000
 800ad00:	f99d808c 	.word	0xf99d808c

0800ad04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e0c8      	b.n	800aeaa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ad18:	4b66      	ldr	r3, [pc, #408]	; (800aeb4 <HAL_RCC_ClockConfig+0x1b0>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0307 	and.w	r3, r3, #7
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d910      	bls.n	800ad48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad26:	4b63      	ldr	r3, [pc, #396]	; (800aeb4 <HAL_RCC_ClockConfig+0x1b0>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f023 0207 	bic.w	r2, r3, #7
 800ad2e:	4961      	ldr	r1, [pc, #388]	; (800aeb4 <HAL_RCC_ClockConfig+0x1b0>)
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad36:	4b5f      	ldr	r3, [pc, #380]	; (800aeb4 <HAL_RCC_ClockConfig+0x1b0>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f003 0307 	and.w	r3, r3, #7
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d001      	beq.n	800ad48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e0b0      	b.n	800aeaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d04c      	beq.n	800adee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	2b03      	cmp	r3, #3
 800ad5a:	d107      	bne.n	800ad6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad5c:	4b56      	ldr	r3, [pc, #344]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b4>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d121      	bne.n	800adac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e09e      	b.n	800aeaa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	d107      	bne.n	800ad84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ad74:	4b50      	ldr	r3, [pc, #320]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b4>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d115      	bne.n	800adac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
 800ad82:	e092      	b.n	800aeaa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d107      	bne.n	800ad9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ad8c:	4b4a      	ldr	r3, [pc, #296]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b4>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d109      	bne.n	800adac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e086      	b.n	800aeaa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad9c:	4b46      	ldr	r3, [pc, #280]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b4>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	e07e      	b.n	800aeaa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800adac:	4b42      	ldr	r3, [pc, #264]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b4>)
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	f023 0203 	bic.w	r2, r3, #3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	493f      	ldr	r1, [pc, #252]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b4>)
 800adba:	4313      	orrs	r3, r2
 800adbc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adbe:	f7f6 fc47 	bl	8001650 <HAL_GetTick>
 800adc2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adc4:	e00a      	b.n	800addc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adc6:	f7f6 fc43 	bl	8001650 <HAL_GetTick>
 800adca:	4602      	mov	r2, r0
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	1ad3      	subs	r3, r2, r3
 800add0:	f241 3288 	movw	r2, #5000	; 0x1388
 800add4:	4293      	cmp	r3, r2
 800add6:	d901      	bls.n	800addc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800add8:	2303      	movs	r3, #3
 800adda:	e066      	b.n	800aeaa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800addc:	4b36      	ldr	r3, [pc, #216]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b4>)
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	f003 020c 	and.w	r2, r3, #12
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	429a      	cmp	r2, r3
 800adec:	d1eb      	bne.n	800adc6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 0302 	and.w	r3, r3, #2
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d008      	beq.n	800ae0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adfa:	4b2f      	ldr	r3, [pc, #188]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b4>)
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	492c      	ldr	r1, [pc, #176]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b4>)
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae0c:	4b29      	ldr	r3, [pc, #164]	; (800aeb4 <HAL_RCC_ClockConfig+0x1b0>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0307 	and.w	r3, r3, #7
 800ae14:	683a      	ldr	r2, [r7, #0]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d210      	bcs.n	800ae3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae1a:	4b26      	ldr	r3, [pc, #152]	; (800aeb4 <HAL_RCC_ClockConfig+0x1b0>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f023 0207 	bic.w	r2, r3, #7
 800ae22:	4924      	ldr	r1, [pc, #144]	; (800aeb4 <HAL_RCC_ClockConfig+0x1b0>)
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae2a:	4b22      	ldr	r3, [pc, #136]	; (800aeb4 <HAL_RCC_ClockConfig+0x1b0>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 0307 	and.w	r3, r3, #7
 800ae32:	683a      	ldr	r2, [r7, #0]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d001      	beq.n	800ae3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e036      	b.n	800aeaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 0304 	and.w	r3, r3, #4
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d008      	beq.n	800ae5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae48:	4b1b      	ldr	r3, [pc, #108]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b4>)
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	4918      	ldr	r1, [pc, #96]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b4>)
 800ae56:	4313      	orrs	r3, r2
 800ae58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 0308 	and.w	r3, r3, #8
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d009      	beq.n	800ae7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae66:	4b14      	ldr	r3, [pc, #80]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b4>)
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	691b      	ldr	r3, [r3, #16]
 800ae72:	00db      	lsls	r3, r3, #3
 800ae74:	4910      	ldr	r1, [pc, #64]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b4>)
 800ae76:	4313      	orrs	r3, r2
 800ae78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ae7a:	f000 f859 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	4b0d      	ldr	r3, [pc, #52]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b4>)
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	091b      	lsrs	r3, r3, #4
 800ae86:	f003 030f 	and.w	r3, r3, #15
 800ae8a:	490c      	ldr	r1, [pc, #48]	; (800aebc <HAL_RCC_ClockConfig+0x1b8>)
 800ae8c:	5ccb      	ldrb	r3, [r1, r3]
 800ae8e:	f003 031f 	and.w	r3, r3, #31
 800ae92:	fa22 f303 	lsr.w	r3, r2, r3
 800ae96:	4a0a      	ldr	r2, [pc, #40]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ae9a:	4b0a      	ldr	r3, [pc, #40]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7f6 fb86 	bl	80015b0 <HAL_InitTick>
 800aea4:	4603      	mov	r3, r0
 800aea6:	72fb      	strb	r3, [r7, #11]

  return status;
 800aea8:	7afb      	ldrb	r3, [r7, #11]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	40022000 	.word	0x40022000
 800aeb8:	40021000 	.word	0x40021000
 800aebc:	08012f60 	.word	0x08012f60
 800aec0:	20000008 	.word	0x20000008
 800aec4:	2000000c 	.word	0x2000000c

0800aec8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b08a      	sub	sp, #40	; 0x28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 800aed4:	4b15      	ldr	r3, [pc, #84]	; (800af2c <HAL_RCC_MCOConfig+0x64>)
 800aed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aed8:	4a14      	ldr	r2, [pc, #80]	; (800af2c <HAL_RCC_MCOConfig+0x64>)
 800aeda:	f043 0301 	orr.w	r3, r3, #1
 800aede:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aee0:	4b12      	ldr	r3, [pc, #72]	; (800af2c <HAL_RCC_MCOConfig+0x64>)
 800aee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aee4:	f003 0301 	and.w	r3, r3, #1
 800aee8:	613b      	str	r3, [r7, #16]
 800aeea:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 800aeec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aef2:	2302      	movs	r3, #2
 800aef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800aef6:	2302      	movs	r3, #2
 800aef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aefa:	2300      	movs	r3, #0
 800aefc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800aefe:	2300      	movs	r3, #0
 800af00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800af02:	f107 0314 	add.w	r3, r7, #20
 800af06:	4619      	mov	r1, r3
 800af08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af0c:	f7f9 f8c8 	bl	80040a0 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 800af10:	4b06      	ldr	r3, [pc, #24]	; (800af2c <HAL_RCC_MCOConfig+0x64>)
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 800af18:	68b9      	ldr	r1, [r7, #8]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	430b      	orrs	r3, r1
 800af1e:	4903      	ldr	r1, [pc, #12]	; (800af2c <HAL_RCC_MCOConfig+0x64>)
 800af20:	4313      	orrs	r3, r2
 800af22:	608b      	str	r3, [r1, #8]
}
 800af24:	bf00      	nop
 800af26:	3728      	adds	r7, #40	; 0x28
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	40021000 	.word	0x40021000

0800af30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af30:	b480      	push	{r7}
 800af32:	b089      	sub	sp, #36	; 0x24
 800af34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800af36:	2300      	movs	r3, #0
 800af38:	61fb      	str	r3, [r7, #28]
 800af3a:	2300      	movs	r3, #0
 800af3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af3e:	4b3e      	ldr	r3, [pc, #248]	; (800b038 <HAL_RCC_GetSysClockFreq+0x108>)
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	f003 030c 	and.w	r3, r3, #12
 800af46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800af48:	4b3b      	ldr	r3, [pc, #236]	; (800b038 <HAL_RCC_GetSysClockFreq+0x108>)
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	f003 0303 	and.w	r3, r3, #3
 800af50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d005      	beq.n	800af64 <HAL_RCC_GetSysClockFreq+0x34>
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	2b0c      	cmp	r3, #12
 800af5c:	d121      	bne.n	800afa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d11e      	bne.n	800afa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800af64:	4b34      	ldr	r3, [pc, #208]	; (800b038 <HAL_RCC_GetSysClockFreq+0x108>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f003 0308 	and.w	r3, r3, #8
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d107      	bne.n	800af80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800af70:	4b31      	ldr	r3, [pc, #196]	; (800b038 <HAL_RCC_GetSysClockFreq+0x108>)
 800af72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af76:	0a1b      	lsrs	r3, r3, #8
 800af78:	f003 030f 	and.w	r3, r3, #15
 800af7c:	61fb      	str	r3, [r7, #28]
 800af7e:	e005      	b.n	800af8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800af80:	4b2d      	ldr	r3, [pc, #180]	; (800b038 <HAL_RCC_GetSysClockFreq+0x108>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	091b      	lsrs	r3, r3, #4
 800af86:	f003 030f 	and.w	r3, r3, #15
 800af8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800af8c:	4a2b      	ldr	r2, [pc, #172]	; (800b03c <HAL_RCC_GetSysClockFreq+0x10c>)
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10d      	bne.n	800afb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800afa0:	e00a      	b.n	800afb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	2b04      	cmp	r3, #4
 800afa6:	d102      	bne.n	800afae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800afa8:	4b25      	ldr	r3, [pc, #148]	; (800b040 <HAL_RCC_GetSysClockFreq+0x110>)
 800afaa:	61bb      	str	r3, [r7, #24]
 800afac:	e004      	b.n	800afb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	2b08      	cmp	r3, #8
 800afb2:	d101      	bne.n	800afb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800afb4:	4b23      	ldr	r3, [pc, #140]	; (800b044 <HAL_RCC_GetSysClockFreq+0x114>)
 800afb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	2b0c      	cmp	r3, #12
 800afbc:	d134      	bne.n	800b028 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800afbe:	4b1e      	ldr	r3, [pc, #120]	; (800b038 <HAL_RCC_GetSysClockFreq+0x108>)
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	f003 0303 	and.w	r3, r3, #3
 800afc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	2b02      	cmp	r3, #2
 800afcc:	d003      	beq.n	800afd6 <HAL_RCC_GetSysClockFreq+0xa6>
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d003      	beq.n	800afdc <HAL_RCC_GetSysClockFreq+0xac>
 800afd4:	e005      	b.n	800afe2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800afd6:	4b1a      	ldr	r3, [pc, #104]	; (800b040 <HAL_RCC_GetSysClockFreq+0x110>)
 800afd8:	617b      	str	r3, [r7, #20]
      break;
 800afda:	e005      	b.n	800afe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800afdc:	4b19      	ldr	r3, [pc, #100]	; (800b044 <HAL_RCC_GetSysClockFreq+0x114>)
 800afde:	617b      	str	r3, [r7, #20]
      break;
 800afe0:	e002      	b.n	800afe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	617b      	str	r3, [r7, #20]
      break;
 800afe6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800afe8:	4b13      	ldr	r3, [pc, #76]	; (800b038 <HAL_RCC_GetSysClockFreq+0x108>)
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	091b      	lsrs	r3, r3, #4
 800afee:	f003 0307 	and.w	r3, r3, #7
 800aff2:	3301      	adds	r3, #1
 800aff4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800aff6:	4b10      	ldr	r3, [pc, #64]	; (800b038 <HAL_RCC_GetSysClockFreq+0x108>)
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	0a1b      	lsrs	r3, r3, #8
 800affc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b000:	697a      	ldr	r2, [r7, #20]
 800b002:	fb02 f203 	mul.w	r2, r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	fbb2 f3f3 	udiv	r3, r2, r3
 800b00c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b00e:	4b0a      	ldr	r3, [pc, #40]	; (800b038 <HAL_RCC_GetSysClockFreq+0x108>)
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	0e5b      	lsrs	r3, r3, #25
 800b014:	f003 0303 	and.w	r3, r3, #3
 800b018:	3301      	adds	r3, #1
 800b01a:	005b      	lsls	r3, r3, #1
 800b01c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	fbb2 f3f3 	udiv	r3, r2, r3
 800b026:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b028:	69bb      	ldr	r3, [r7, #24]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3724      	adds	r7, #36	; 0x24
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	40021000 	.word	0x40021000
 800b03c:	08012f78 	.word	0x08012f78
 800b040:	00f42400 	.word	0x00f42400
 800b044:	007a1200 	.word	0x007a1200

0800b048 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b048:	b480      	push	{r7}
 800b04a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b04c:	4b03      	ldr	r3, [pc, #12]	; (800b05c <HAL_RCC_GetHCLKFreq+0x14>)
 800b04e:	681b      	ldr	r3, [r3, #0]
}
 800b050:	4618      	mov	r0, r3
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	20000008 	.word	0x20000008

0800b060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b064:	f7ff fff0 	bl	800b048 <HAL_RCC_GetHCLKFreq>
 800b068:	4602      	mov	r2, r0
 800b06a:	4b06      	ldr	r3, [pc, #24]	; (800b084 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	0a1b      	lsrs	r3, r3, #8
 800b070:	f003 0307 	and.w	r3, r3, #7
 800b074:	4904      	ldr	r1, [pc, #16]	; (800b088 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b076:	5ccb      	ldrb	r3, [r1, r3]
 800b078:	f003 031f 	and.w	r3, r3, #31
 800b07c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b080:	4618      	mov	r0, r3
 800b082:	bd80      	pop	{r7, pc}
 800b084:	40021000 	.word	0x40021000
 800b088:	08012f70 	.word	0x08012f70

0800b08c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b090:	f7ff ffda 	bl	800b048 <HAL_RCC_GetHCLKFreq>
 800b094:	4602      	mov	r2, r0
 800b096:	4b06      	ldr	r3, [pc, #24]	; (800b0b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	0adb      	lsrs	r3, r3, #11
 800b09c:	f003 0307 	and.w	r3, r3, #7
 800b0a0:	4904      	ldr	r1, [pc, #16]	; (800b0b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b0a2:	5ccb      	ldrb	r3, [r1, r3]
 800b0a4:	f003 031f 	and.w	r3, r3, #31
 800b0a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	40021000 	.word	0x40021000
 800b0b4:	08012f70 	.word	0x08012f70

0800b0b8 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct  pointer to an RCC_OscInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
#if defined(RCC_HSI48_SUPPORT)
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSI48;
#else
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	221f      	movs	r2, #31
 800b0c4:	601a      	str	r2, [r3, #0]
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
#endif /* RCC_HSI48_SUPPORT */

  /* Get the HSE configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800b0c6:	4b5e      	ldr	r3, [pc, #376]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0d2:	d104      	bne.n	800b0de <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800b0da:	605a      	str	r2, [r3, #4]
 800b0dc:	e00e      	b.n	800b0fc <HAL_RCC_GetOscConfig+0x44>
  }
  else if(READ_BIT(RCC->CR, RCC_CR_HSEON) == RCC_CR_HSEON)
 800b0de:	4b58      	ldr	r3, [pc, #352]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0ea:	d104      	bne.n	800b0f6 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b0f2:	605a      	str	r2, [r3, #4]
 800b0f4:	e002      	b.n	800b0fc <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	605a      	str	r2, [r3, #4]
  }

   /* Get the MSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_MSION) == RCC_CR_MSION)
 800b0fc:	4b50      	ldr	r3, [pc, #320]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 0301 	and.w	r3, r3, #1
 800b104:	2b01      	cmp	r3, #1
 800b106:	d103      	bne.n	800b110 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	619a      	str	r2, [r3, #24]
 800b10e:	e002      	b.n	800b116 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	619a      	str	r2, [r3, #24]
  }

  RCC_OscInitStruct->MSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos;
 800b116:	4b4a      	ldr	r3, [pc, #296]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	0a1b      	lsrs	r3, r3, #8
 800b11c:	b2da      	uxtb	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->MSIClockRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800b122:	4b47      	ldr	r3, [pc, #284]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	621a      	str	r2, [r3, #32]

  /* Get the HSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_HSION) == RCC_CR_HSION)
 800b12e:	4b44      	ldr	r3, [pc, #272]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b13a:	d104      	bne.n	800b146 <HAL_RCC_GetOscConfig+0x8e>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b142:	60da      	str	r2, [r3, #12]
 800b144:	e002      	b.n	800b14c <HAL_RCC_GetOscConfig+0x94>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos;
 800b14c:	4b3c      	ldr	r3, [pc, #240]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	0e1b      	lsrs	r3, r3, #24
 800b152:	f003 021f 	and.w	r2, r3, #31
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 800b15a:	4b39      	ldr	r3, [pc, #228]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b15c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b160:	f003 0304 	and.w	r3, r3, #4
 800b164:	2b04      	cmp	r3, #4
 800b166:	d103      	bne.n	800b170 <HAL_RCC_GetOscConfig+0xb8>
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS_RTC_ONLY;
    }
    else
#endif /* RCC_BDCR_LSESYSDIS */
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2205      	movs	r2, #5
 800b16c:	609a      	str	r2, [r3, #8]
 800b16e:	e00d      	b.n	800b18c <HAL_RCC_GetOscConfig+0xd4>
    }
  }
  else if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 800b170:	4b33      	ldr	r3, [pc, #204]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b176:	f003 0301 	and.w	r3, r3, #1
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d103      	bne.n	800b186 <HAL_RCC_GetOscConfig+0xce>
      RCC_OscInitStruct->LSEState = RCC_LSE_ON_RTC_ONLY;
    }
    else
#endif /* RCC_BDCR_LSESYSDIS */
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2201      	movs	r2, #1
 800b182:	609a      	str	r2, [r3, #8]
 800b184:	e002      	b.n	800b18c <HAL_RCC_GetOscConfig+0xd4>
    }
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CSR, RCC_CSR_LSION) == RCC_CSR_LSION)
 800b18c:	4b2c      	ldr	r3, [pc, #176]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b18e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b192:	f003 0301 	and.w	r3, r3, #1
 800b196:	2b01      	cmp	r3, #1
 800b198:	d103      	bne.n	800b1a2 <HAL_RCC_GetOscConfig+0xea>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2201      	movs	r2, #1
 800b19e:	615a      	str	r2, [r3, #20]
 800b1a0:	e002      	b.n	800b1a8 <HAL_RCC_GetOscConfig+0xf0>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	615a      	str	r2, [r3, #20]
  else
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
  }
#else
  RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_HSI48_SUPPORT */

  /* Get the PLL configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_PLLON) == RCC_CR_PLLON)
 800b1ae:	4b24      	ldr	r3, [pc, #144]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b1ba:	d103      	bne.n	800b1c4 <HAL_RCC_GetOscConfig+0x10c>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2202      	movs	r2, #2
 800b1c0:	629a      	str	r2, [r3, #40]	; 0x28
 800b1c2:	e002      	b.n	800b1ca <HAL_RCC_GetOscConfig+0x112>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  RCC_OscInitStruct->PLL.PLLSource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b1ca:	4b1d      	ldr	r3, [pc, #116]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	f003 0203 	and.w	r2, r3, #3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLM = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800b1d6:	4b1a      	ldr	r3, [pc, #104]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	091b      	lsrs	r3, r3, #4
 800b1dc:	f003 0307 	and.w	r3, r3, #7
 800b1e0:	1c5a      	adds	r2, r3, #1
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLN = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b1e6:	4b16      	ldr	r3, [pc, #88]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b1e8:	68db      	ldr	r3, [r3, #12]
 800b1ea:	0a1b      	lsrs	r3, r3, #8
 800b1ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800b1f4:	4b12      	ldr	r3, [pc, #72]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	0d5b      	lsrs	r3, r3, #21
 800b1fa:	f003 0303 	and.w	r3, r3, #3
 800b1fe:	3301      	adds	r3, #1
 800b200:	005a      	lsls	r2, r3, #1
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLR = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) << 1U);
 800b206:	4b0e      	ldr	r3, [pc, #56]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	0e5b      	lsrs	r3, r3, #25
 800b20c:	f003 0303 	and.w	r3, r3, #3
 800b210:	3301      	adds	r3, #1
 800b212:	005a      	lsls	r2, r3, #1
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
  RCC_OscInitStruct->PLL.PLLP = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#else
  if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800b218:	4b09      	ldr	r3, [pc, #36]	; (800b240 <HAL_RCC_GetOscConfig+0x188>)
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b220:	2b00      	cmp	r3, #0
 800b222:	d003      	beq.n	800b22c <HAL_RCC_GetOscConfig+0x174>
  {
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV17;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2211      	movs	r2, #17
 800b228:	639a      	str	r2, [r3, #56]	; 0x38
  {
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
  }
#endif /* RCC_PLLP_DIV_2_31_SUPPORT */
#endif /* RCC_PLLP_SUPPORT */
}
 800b22a:	e002      	b.n	800b232 <HAL_RCC_GetOscConfig+0x17a>
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2207      	movs	r2, #7
 800b230:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b232:	bf00      	nop
 800b234:	370c      	adds	r7, #12
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	40021000 	.word	0x40021000

0800b244 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	220f      	movs	r2, #15
 800b252:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800b254:	4b12      	ldr	r3, [pc, #72]	; (800b2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	f003 0203 	and.w	r2, r3, #3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800b260:	4b0f      	ldr	r3, [pc, #60]	; (800b2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800b26c:	4b0c      	ldr	r3, [pc, #48]	; (800b2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800b278:	4b09      	ldr	r3, [pc, #36]	; (800b2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	08db      	lsrs	r3, r3, #3
 800b27e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b286:	4b07      	ldr	r3, [pc, #28]	; (800b2a4 <HAL_RCC_GetClockConfig+0x60>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0207 	and.w	r2, r3, #7
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	601a      	str	r2, [r3, #0]
}
 800b292:	bf00      	nop
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	40021000 	.word	0x40021000
 800b2a4:	40022000 	.word	0x40022000

0800b2a8 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800b2ac:	4b05      	ldr	r3, [pc, #20]	; (800b2c4 <HAL_RCC_EnableCSS+0x1c>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a04      	ldr	r2, [pc, #16]	; (800b2c4 <HAL_RCC_EnableCSS+0x1c>)
 800b2b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2b6:	6013      	str	r3, [r2, #0]
}
 800b2b8:	bf00      	nop
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	40021000 	.word	0x40021000

0800b2c8 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800b2cc:	4b07      	ldr	r3, [pc, #28]	; (800b2ec <HAL_RCC_NMI_IRQHandler+0x24>)
 800b2ce:	69db      	ldr	r3, [r3, #28]
 800b2d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2d8:	d105      	bne.n	800b2e6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800b2da:	f000 f809 	bl	800b2f0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800b2de:	4b03      	ldr	r3, [pc, #12]	; (800b2ec <HAL_RCC_NMI_IRQHandler+0x24>)
 800b2e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2e4:	621a      	str	r2, [r3, #32]
  }
}
 800b2e6:	bf00      	nop
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	40021000 	.word	0x40021000

0800b2f0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800b2f4:	bf00      	nop
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
	...

0800b300 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b308:	2300      	movs	r3, #0
 800b30a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b30c:	4b2a      	ldr	r3, [pc, #168]	; (800b3b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b30e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d003      	beq.n	800b320 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b318:	f7fe f9f4 	bl	8009704 <HAL_PWREx_GetVoltageRange>
 800b31c:	6178      	str	r0, [r7, #20]
 800b31e:	e014      	b.n	800b34a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b320:	4b25      	ldr	r3, [pc, #148]	; (800b3b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b324:	4a24      	ldr	r2, [pc, #144]	; (800b3b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b32a:	6593      	str	r3, [r2, #88]	; 0x58
 800b32c:	4b22      	ldr	r3, [pc, #136]	; (800b3b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b32e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b334:	60fb      	str	r3, [r7, #12]
 800b336:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b338:	f7fe f9e4 	bl	8009704 <HAL_PWREx_GetVoltageRange>
 800b33c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b33e:	4b1e      	ldr	r3, [pc, #120]	; (800b3b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b342:	4a1d      	ldr	r2, [pc, #116]	; (800b3b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b348:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b350:	d10b      	bne.n	800b36a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b80      	cmp	r3, #128	; 0x80
 800b356:	d919      	bls.n	800b38c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2ba0      	cmp	r3, #160	; 0xa0
 800b35c:	d902      	bls.n	800b364 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b35e:	2302      	movs	r3, #2
 800b360:	613b      	str	r3, [r7, #16]
 800b362:	e013      	b.n	800b38c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b364:	2301      	movs	r3, #1
 800b366:	613b      	str	r3, [r7, #16]
 800b368:	e010      	b.n	800b38c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2b80      	cmp	r3, #128	; 0x80
 800b36e:	d902      	bls.n	800b376 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b370:	2303      	movs	r3, #3
 800b372:	613b      	str	r3, [r7, #16]
 800b374:	e00a      	b.n	800b38c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2b80      	cmp	r3, #128	; 0x80
 800b37a:	d102      	bne.n	800b382 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b37c:	2302      	movs	r3, #2
 800b37e:	613b      	str	r3, [r7, #16]
 800b380:	e004      	b.n	800b38c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b70      	cmp	r3, #112	; 0x70
 800b386:	d101      	bne.n	800b38c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b388:	2301      	movs	r3, #1
 800b38a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b38c:	4b0b      	ldr	r3, [pc, #44]	; (800b3bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f023 0207 	bic.w	r2, r3, #7
 800b394:	4909      	ldr	r1, [pc, #36]	; (800b3bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	4313      	orrs	r3, r2
 800b39a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b39c:	4b07      	ldr	r3, [pc, #28]	; (800b3bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 0307 	and.w	r3, r3, #7
 800b3a4:	693a      	ldr	r2, [r7, #16]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d001      	beq.n	800b3ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e000      	b.n	800b3b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3718      	adds	r7, #24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	40021000 	.word	0x40021000
 800b3bc:	40022000 	.word	0x40022000

0800b3c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d041      	beq.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b3e4:	d02a      	beq.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b3e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b3ea:	d824      	bhi.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b3ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b3f0:	d008      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b3f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b3f6:	d81e      	bhi.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d00a      	beq.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b3fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b400:	d010      	beq.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b402:	e018      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b404:	4b86      	ldr	r3, [pc, #536]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	4a85      	ldr	r2, [pc, #532]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b40a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b40e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b410:	e015      	b.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	3304      	adds	r3, #4
 800b416:	2100      	movs	r1, #0
 800b418:	4618      	mov	r0, r3
 800b41a:	f001 fbb9 	bl	800cb90 <RCCEx_PLLSAI1_Config>
 800b41e:	4603      	mov	r3, r0
 800b420:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b422:	e00c      	b.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	3320      	adds	r3, #32
 800b428:	2100      	movs	r1, #0
 800b42a:	4618      	mov	r0, r3
 800b42c:	f001 fca4 	bl	800cd78 <RCCEx_PLLSAI2_Config>
 800b430:	4603      	mov	r3, r0
 800b432:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b434:	e003      	b.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	74fb      	strb	r3, [r7, #19]
      break;
 800b43a:	e000      	b.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b43c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b43e:	7cfb      	ldrb	r3, [r7, #19]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10b      	bne.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b444:	4b76      	ldr	r3, [pc, #472]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b44a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b452:	4973      	ldr	r1, [pc, #460]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b454:	4313      	orrs	r3, r2
 800b456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b45a:	e001      	b.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b45c:	7cfb      	ldrb	r3, [r7, #19]
 800b45e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d041      	beq.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b470:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b474:	d02a      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800b476:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b47a:	d824      	bhi.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b47c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b480:	d008      	beq.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b486:	d81e      	bhi.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00a      	beq.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800b48c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b490:	d010      	beq.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b492:	e018      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b494:	4b62      	ldr	r3, [pc, #392]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	4a61      	ldr	r2, [pc, #388]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b49a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b49e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b4a0:	e015      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f001 fb71 	bl	800cb90 <RCCEx_PLLSAI1_Config>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b4b2:	e00c      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	3320      	adds	r3, #32
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f001 fc5c 	bl	800cd78 <RCCEx_PLLSAI2_Config>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b4c4:	e003      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	74fb      	strb	r3, [r7, #19]
      break;
 800b4ca:	e000      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800b4cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4ce:	7cfb      	ldrb	r3, [r7, #19]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10b      	bne.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b4d4:	4b52      	ldr	r3, [pc, #328]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4e2:	494f      	ldr	r1, [pc, #316]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b4ea:	e001      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ec:	7cfb      	ldrb	r3, [r7, #19]
 800b4ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f000 80a0 	beq.w	800b63e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b4fe:	2300      	movs	r3, #0
 800b500:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b502:	4b47      	ldr	r3, [pc, #284]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d101      	bne.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800b50e:	2301      	movs	r3, #1
 800b510:	e000      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800b512:	2300      	movs	r3, #0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00d      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b518:	4b41      	ldr	r3, [pc, #260]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b51a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b51c:	4a40      	ldr	r2, [pc, #256]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b51e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b522:	6593      	str	r3, [r2, #88]	; 0x58
 800b524:	4b3e      	ldr	r3, [pc, #248]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b52c:	60bb      	str	r3, [r7, #8]
 800b52e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b530:	2301      	movs	r3, #1
 800b532:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b534:	4b3b      	ldr	r3, [pc, #236]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a3a      	ldr	r2, [pc, #232]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b53a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b53e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b540:	f7f6 f886 	bl	8001650 <HAL_GetTick>
 800b544:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b546:	e009      	b.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b548:	f7f6 f882 	bl	8001650 <HAL_GetTick>
 800b54c:	4602      	mov	r2, r0
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	2b02      	cmp	r3, #2
 800b554:	d902      	bls.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	74fb      	strb	r3, [r7, #19]
        break;
 800b55a:	e005      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b55c:	4b31      	ldr	r3, [pc, #196]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b564:	2b00      	cmp	r3, #0
 800b566:	d0ef      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800b568:	7cfb      	ldrb	r3, [r7, #19]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d15c      	bne.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b56e:	4b2c      	ldr	r3, [pc, #176]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b578:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d01f      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d019      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b58c:	4b24      	ldr	r3, [pc, #144]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b596:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b598:	4b21      	ldr	r3, [pc, #132]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b59a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b59e:	4a20      	ldr	r2, [pc, #128]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b5a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b5a8:	4b1d      	ldr	r3, [pc, #116]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ae:	4a1c      	ldr	r2, [pc, #112]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b5b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b5b8:	4a19      	ldr	r2, [pc, #100]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d016      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5ca:	f7f6 f841 	bl	8001650 <HAL_GetTick>
 800b5ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b5d0:	e00b      	b.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5d2:	f7f6 f83d 	bl	8001650 <HAL_GetTick>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d902      	bls.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800b5e4:	2303      	movs	r3, #3
 800b5e6:	74fb      	strb	r3, [r7, #19]
            break;
 800b5e8:	e006      	b.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b5ea:	4b0d      	ldr	r3, [pc, #52]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5f0:	f003 0302 	and.w	r3, r3, #2
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d0ec      	beq.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800b5f8:	7cfb      	ldrb	r3, [r7, #19]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d10c      	bne.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b5fe:	4b08      	ldr	r3, [pc, #32]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b60e:	4904      	ldr	r1, [pc, #16]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b610:	4313      	orrs	r3, r2
 800b612:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b616:	e009      	b.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b618:	7cfb      	ldrb	r3, [r7, #19]
 800b61a:	74bb      	strb	r3, [r7, #18]
 800b61c:	e006      	b.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800b61e:	bf00      	nop
 800b620:	40021000 	.word	0x40021000
 800b624:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b628:	7cfb      	ldrb	r3, [r7, #19]
 800b62a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b62c:	7c7b      	ldrb	r3, [r7, #17]
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d105      	bne.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b632:	4b9e      	ldr	r3, [pc, #632]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b636:	4a9d      	ldr	r2, [pc, #628]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b63c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f003 0301 	and.w	r3, r3, #1
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b64a:	4b98      	ldr	r3, [pc, #608]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b64c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b650:	f023 0203 	bic.w	r2, r3, #3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b658:	4994      	ldr	r1, [pc, #592]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b65a:	4313      	orrs	r3, r2
 800b65c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 0302 	and.w	r3, r3, #2
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00a      	beq.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b66c:	4b8f      	ldr	r3, [pc, #572]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b66e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b672:	f023 020c 	bic.w	r2, r3, #12
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b67a:	498c      	ldr	r1, [pc, #560]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b67c:	4313      	orrs	r3, r2
 800b67e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f003 0304 	and.w	r3, r3, #4
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00a      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b68e:	4b87      	ldr	r3, [pc, #540]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b694:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69c:	4983      	ldr	r1, [pc, #524]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 0308 	and.w	r3, r3, #8
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00a      	beq.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b6b0:	4b7e      	ldr	r3, [pc, #504]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6be:	497b      	ldr	r1, [pc, #492]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f003 0310 	and.w	r3, r3, #16
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00a      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b6d2:	4b76      	ldr	r3, [pc, #472]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b6d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6e0:	4972      	ldr	r1, [pc, #456]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f003 0320 	and.w	r3, r3, #32
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00a      	beq.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b6f4:	4b6d      	ldr	r3, [pc, #436]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b702:	496a      	ldr	r1, [pc, #424]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b704:	4313      	orrs	r3, r2
 800b706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00a      	beq.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b716:	4b65      	ldr	r3, [pc, #404]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b71c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b724:	4961      	ldr	r1, [pc, #388]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b726:	4313      	orrs	r3, r2
 800b728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b734:	2b00      	cmp	r3, #0
 800b736:	d00a      	beq.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b738:	4b5c      	ldr	r3, [pc, #368]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b73a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b73e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b746:	4959      	ldr	r1, [pc, #356]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b748:	4313      	orrs	r3, r2
 800b74a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00a      	beq.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b75a:	4b54      	ldr	r3, [pc, #336]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b760:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b768:	4950      	ldr	r1, [pc, #320]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b76a:	4313      	orrs	r3, r2
 800b76c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00a      	beq.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b77c:	4b4b      	ldr	r3, [pc, #300]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b77e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b782:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b78a:	4948      	ldr	r1, [pc, #288]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b78c:	4313      	orrs	r3, r2
 800b78e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00a      	beq.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b79e:	4b43      	ldr	r3, [pc, #268]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b7a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ac:	493f      	ldr	r1, [pc, #252]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d028      	beq.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b7c0:	4b3a      	ldr	r3, [pc, #232]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b7c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ce:	4937      	ldr	r1, [pc, #220]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7de:	d106      	bne.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b7e0:	4b32      	ldr	r3, [pc, #200]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	4a31      	ldr	r2, [pc, #196]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b7e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7ea:	60d3      	str	r3, [r2, #12]
 800b7ec:	e011      	b.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b7f6:	d10c      	bne.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	3304      	adds	r3, #4
 800b7fc:	2101      	movs	r1, #1
 800b7fe:	4618      	mov	r0, r3
 800b800:	f001 f9c6 	bl	800cb90 <RCCEx_PLLSAI1_Config>
 800b804:	4603      	mov	r3, r0
 800b806:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b808:	7cfb      	ldrb	r3, [r7, #19]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d001      	beq.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800b80e:	7cfb      	ldrb	r3, [r7, #19]
 800b810:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d028      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b81e:	4b23      	ldr	r3, [pc, #140]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b824:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b82c:	491f      	ldr	r1, [pc, #124]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b82e:	4313      	orrs	r3, r2
 800b830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b83c:	d106      	bne.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b83e:	4b1b      	ldr	r3, [pc, #108]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	4a1a      	ldr	r2, [pc, #104]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b844:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b848:	60d3      	str	r3, [r2, #12]
 800b84a:	e011      	b.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b850:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b854:	d10c      	bne.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	3304      	adds	r3, #4
 800b85a:	2101      	movs	r1, #1
 800b85c:	4618      	mov	r0, r3
 800b85e:	f001 f997 	bl	800cb90 <RCCEx_PLLSAI1_Config>
 800b862:	4603      	mov	r3, r0
 800b864:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b866:	7cfb      	ldrb	r3, [r7, #19]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800b86c:	7cfb      	ldrb	r3, [r7, #19]
 800b86e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d02b      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b87c:	4b0b      	ldr	r3, [pc, #44]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b87e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b882:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b88a:	4908      	ldr	r1, [pc, #32]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b88c:	4313      	orrs	r3, r2
 800b88e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b896:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b89a:	d109      	bne.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b89c:	4b03      	ldr	r3, [pc, #12]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	4a02      	ldr	r2, [pc, #8]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b8a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8a6:	60d3      	str	r3, [r2, #12]
 800b8a8:	e014      	b.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800b8aa:	bf00      	nop
 800b8ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b8b8:	d10c      	bne.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	3304      	adds	r3, #4
 800b8be:	2101      	movs	r1, #1
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f001 f965 	bl	800cb90 <RCCEx_PLLSAI1_Config>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b8ca:	7cfb      	ldrb	r3, [r7, #19]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d001      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800b8d0:	7cfb      	ldrb	r3, [r7, #19]
 800b8d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d02f      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b8e0:	4b2b      	ldr	r3, [pc, #172]	; (800b990 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b8e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8ee:	4928      	ldr	r1, [pc, #160]	; (800b990 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8fe:	d10d      	bne.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	3304      	adds	r3, #4
 800b904:	2102      	movs	r1, #2
 800b906:	4618      	mov	r0, r3
 800b908:	f001 f942 	bl	800cb90 <RCCEx_PLLSAI1_Config>
 800b90c:	4603      	mov	r3, r0
 800b90e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b910:	7cfb      	ldrb	r3, [r7, #19]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d014      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b916:	7cfb      	ldrb	r3, [r7, #19]
 800b918:	74bb      	strb	r3, [r7, #18]
 800b91a:	e011      	b.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b924:	d10c      	bne.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	3320      	adds	r3, #32
 800b92a:	2102      	movs	r1, #2
 800b92c:	4618      	mov	r0, r3
 800b92e:	f001 fa23 	bl	800cd78 <RCCEx_PLLSAI2_Config>
 800b932:	4603      	mov	r3, r0
 800b934:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b936:	7cfb      	ldrb	r3, [r7, #19]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d001      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b93c:	7cfb      	ldrb	r3, [r7, #19]
 800b93e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00a      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b94c:	4b10      	ldr	r3, [pc, #64]	; (800b990 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b94e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b952:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b95a:	490d      	ldr	r1, [pc, #52]	; (800b990 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b95c:	4313      	orrs	r3, r2
 800b95e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00b      	beq.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b96e:	4b08      	ldr	r3, [pc, #32]	; (800b990 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b974:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b97e:	4904      	ldr	r1, [pc, #16]	; (800b990 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b980:	4313      	orrs	r3, r2
 800b982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b986:	7cbb      	ldrb	r3, [r7, #18]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3718      	adds	r7, #24
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	40021000 	.word	0x40021000

0800b994 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a73      	ldr	r2, [pc, #460]	; (800bb6c <HAL_RCCEx_GetPeriphCLKConfig+0x1d8>)
 800b9a0:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 800b9a2:	4b73      	ldr	r3, [pc, #460]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	f003 0203 	and.w	r2, r3, #3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800b9ae:	4b70      	ldr	r3, [pc, #448]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	091b      	lsrs	r3, r3, #4
 800b9b4:	f003 0307 	and.w	r3, r3, #7
 800b9b8:	1c5a      	adds	r2, r3, #1
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b9be:	4b6c      	ldr	r3, [pc, #432]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800b9c0:	691b      	ldr	r3, [r3, #16]
 800b9c2:	0a1b      	lsrs	r3, r3, #8
 800b9c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 800b9cc:	4b68      	ldr	r3, [pc, #416]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800b9ce:	691b      	ldr	r3, [r3, #16]
 800b9d0:	0c5b      	lsrs	r3, r3, #17
 800b9d2:	011b      	lsls	r3, r3, #4
 800b9d4:	f003 0310 	and.w	r3, r3, #16
 800b9d8:	1dda      	adds	r2, r3, #7
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 800b9de:	4b64      	ldr	r3, [pc, #400]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	0d5b      	lsrs	r3, r3, #21
 800b9e4:	f003 0303 	and.w	r3, r3, #3
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	005a      	lsls	r2, r3, #1
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 800b9f0:	4b5f      	ldr	r3, [pc, #380]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800b9f2:	691b      	ldr	r3, [r3, #16]
 800b9f4:	0e5b      	lsrs	r3, r3, #25
 800b9f6:	f003 0303 	and.w	r3, r3, #3
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	005a      	lsls	r2, r3, #1
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	685a      	ldr	r2, [r3, #4]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	689a      	ldr	r2, [r3, #8]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800ba12:	4b57      	ldr	r3, [pc, #348]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800ba14:	695b      	ldr	r3, [r3, #20]
 800ba16:	0a1b      	lsrs	r3, r3, #8
 800ba18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 800ba20:	4b53      	ldr	r3, [pc, #332]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800ba22:	695b      	ldr	r3, [r3, #20]
 800ba24:	0c5b      	lsrs	r3, r3, #17
 800ba26:	011b      	lsls	r3, r3, #4
 800ba28:	f003 0310 	and.w	r3, r3, #16
 800ba2c:	1dda      	adds	r2, r3, #7
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 800ba32:	4b4f      	ldr	r3, [pc, #316]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800ba34:	695b      	ldr	r3, [r3, #20]
 800ba36:	0e5b      	lsrs	r3, r3, #25
 800ba38:	f003 0303 	and.w	r3, r3, #3
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	005a      	lsls	r2, r3, #1
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 800ba44:	4b4a      	ldr	r3, [pc, #296]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800ba46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba4a:	f003 0203 	and.w	r2, r3, #3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 800ba52:	4b47      	ldr	r3, [pc, #284]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800ba54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba58:	f003 020c 	and.w	r2, r3, #12
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 800ba60:	4b43      	ldr	r3, [pc, #268]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800ba62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba66:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 800ba6e:	4b40      	ldr	r3, [pc, #256]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800ba70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba74:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 800ba7c:	4b3c      	ldr	r3, [pc, #240]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800ba7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba82:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 800ba8a:	4b39      	ldr	r3, [pc, #228]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800ba8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba90:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 800ba98:	4b35      	ldr	r3, [pc, #212]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800ba9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba9e:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 800baa6:	4b32      	ldr	r3, [pc, #200]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800baa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baac:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 800bab4:	4b2e      	ldr	r3, [pc, #184]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800bab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 800bac2:	4b2b      	ldr	r3, [pc, #172]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800bac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bac8:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 800bad0:	4b27      	ldr	r3, [pc, #156]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800bad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bad6:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 800bade:	4b24      	ldr	r3, [pc, #144]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800bae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bae4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	665a      	str	r2, [r3, #100]	; 0x64
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 800baec:	4b20      	ldr	r3, [pc, #128]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800baee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baf2:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 800bafa:	4b1d      	ldr	r3, [pc, #116]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800bafc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb00:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 800bb0a:	4b19      	ldr	r3, [pc, #100]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800bb0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb10:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 800bb18:	4b15      	ldr	r3, [pc, #84]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800bb1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb1e:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 800bb26:	4b12      	ldr	r3, [pc, #72]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800bb28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb2c:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	675a      	str	r2, [r3, #116]	; 0x74

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 800bb34:	4b0e      	ldr	r3, [pc, #56]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800bb36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb3a:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 800bb42:	4b0b      	ldr	r3, [pc, #44]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800bb44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb48:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 800bb50:	4b07      	ldr	r3, [pc, #28]	; (800bb70 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800bb52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb56:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr
 800bb6c:	000fffff 	.word	0x000fffff
 800bb70:	40021000 	.word	0x40021000

0800bb74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b088      	sub	sp, #32
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb86:	d13e      	bne.n	800bc06 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800bb88:	4bbe      	ldr	r3, [pc, #760]	; (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800bb8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb92:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb9a:	d028      	beq.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bba2:	f200 853e 	bhi.w	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbac:	d005      	beq.n	800bbba <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbb4:	d00e      	beq.n	800bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800bbb6:	f000 bd34 	b.w	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bbba:	4bb2      	ldr	r3, [pc, #712]	; (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800bbbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbc0:	f003 0302 	and.w	r3, r3, #2
 800bbc4:	2b02      	cmp	r3, #2
 800bbc6:	f040 852e 	bne.w	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
        frequency = LSE_VALUE;
 800bbca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbce:	61fb      	str	r3, [r7, #28]
      break;
 800bbd0:	f000 bd29 	b.w	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800bbd4:	4bab      	ldr	r3, [pc, #684]	; (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800bbd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbda:	f003 0302 	and.w	r3, r3, #2
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	f040 8523 	bne.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = LSI_VALUE;
 800bbe4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bbe8:	61fb      	str	r3, [r7, #28]
      break;
 800bbea:	f000 bd1e 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bbee:	4ba5      	ldr	r3, [pc, #660]	; (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbfa:	f040 8518 	bne.w	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = HSE_VALUE / 32U;
 800bbfe:	4ba2      	ldr	r3, [pc, #648]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 800bc00:	61fb      	str	r3, [r7, #28]
      break;
 800bc02:	f000 bd14 	b.w	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bc06:	4b9f      	ldr	r3, [pc, #636]	; (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	f003 0303 	and.w	r3, r3, #3
 800bc0e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	2b03      	cmp	r3, #3
 800bc14:	d036      	beq.n	800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	2b03      	cmp	r3, #3
 800bc1a:	d840      	bhi.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d003      	beq.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	d020      	beq.n	800bc6a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800bc28:	e039      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800bc2a:	4b96      	ldr	r3, [pc, #600]	; (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 0302 	and.w	r3, r3, #2
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	d116      	bne.n	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800bc36:	4b93      	ldr	r3, [pc, #588]	; (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f003 0308 	and.w	r3, r3, #8
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d005      	beq.n	800bc4e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800bc42:	4b90      	ldr	r3, [pc, #576]	; (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	091b      	lsrs	r3, r3, #4
 800bc48:	f003 030f 	and.w	r3, r3, #15
 800bc4c:	e005      	b.n	800bc5a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800bc4e:	4b8d      	ldr	r3, [pc, #564]	; (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800bc50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc54:	0a1b      	lsrs	r3, r3, #8
 800bc56:	f003 030f 	and.w	r3, r3, #15
 800bc5a:	4a8c      	ldr	r2, [pc, #560]	; (800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 800bc5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc60:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800bc62:	e01f      	b.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800bc64:	2300      	movs	r3, #0
 800bc66:	61bb      	str	r3, [r7, #24]
      break;
 800bc68:	e01c      	b.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc6a:	4b86      	ldr	r3, [pc, #536]	; (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc76:	d102      	bne.n	800bc7e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800bc78:	4b85      	ldr	r3, [pc, #532]	; (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 800bc7a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800bc7c:	e012      	b.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	61bb      	str	r3, [r7, #24]
      break;
 800bc82:	e00f      	b.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc84:	4b7f      	ldr	r3, [pc, #508]	; (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc90:	d102      	bne.n	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800bc92:	4b80      	ldr	r3, [pc, #512]	; (800be94 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 800bc94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800bc96:	e005      	b.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	61bb      	str	r3, [r7, #24]
      break;
 800bc9c:	e002      	b.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	61bb      	str	r3, [r7, #24]
      break;
 800bca2:	bf00      	nop
    }

    switch(PeriphClk)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bcaa:	f000 80d2 	beq.w	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bcb4:	f200 84bd 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bcbe:	f000 80c8 	beq.w	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bcc8:	f200 84b3 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcd2:	f000 835b 	beq.w	800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcdc:	f200 84a9 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bce6:	f000 847f 	beq.w	800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcf0:	f200 849f 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcfa:	f000 82ce 	beq.w	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd04:	f200 8495 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd0e:	f000 80a0 	beq.w	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd18:	f200 848b 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd22:	f000 808f 	beq.w	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd2c:	f200 8481 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd36:	d07e      	beq.n	800be36 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd3e:	f200 8478 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd48:	f000 8404 	beq.w	800c554 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd52:	f200 846e 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd5c:	f000 83b0 	beq.w	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd66:	f200 8464 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd70:	f000 837a 	beq.w	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd7a:	f200 845a 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2b80      	cmp	r3, #128	; 0x80
 800bd82:	f000 8345 	beq.w	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2b80      	cmp	r3, #128	; 0x80
 800bd8a:	f200 8452 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2b20      	cmp	r3, #32
 800bd92:	d84b      	bhi.n	800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f000 844b 	beq.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	2b1f      	cmp	r3, #31
 800bda2:	f200 8446 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800bda6:	a201      	add	r2, pc, #4	; (adr r2, 800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 800bda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdac:	0800bf97 	.word	0x0800bf97
 800bdb0:	0800c007 	.word	0x0800c007
 800bdb4:	0800c633 	.word	0x0800c633
 800bdb8:	0800c09b 	.word	0x0800c09b
 800bdbc:	0800c633 	.word	0x0800c633
 800bdc0:	0800c633 	.word	0x0800c633
 800bdc4:	0800c633 	.word	0x0800c633
 800bdc8:	0800c113 	.word	0x0800c113
 800bdcc:	0800c633 	.word	0x0800c633
 800bdd0:	0800c633 	.word	0x0800c633
 800bdd4:	0800c633 	.word	0x0800c633
 800bdd8:	0800c633 	.word	0x0800c633
 800bddc:	0800c633 	.word	0x0800c633
 800bde0:	0800c633 	.word	0x0800c633
 800bde4:	0800c633 	.word	0x0800c633
 800bde8:	0800c197 	.word	0x0800c197
 800bdec:	0800c633 	.word	0x0800c633
 800bdf0:	0800c633 	.word	0x0800c633
 800bdf4:	0800c633 	.word	0x0800c633
 800bdf8:	0800c633 	.word	0x0800c633
 800bdfc:	0800c633 	.word	0x0800c633
 800be00:	0800c633 	.word	0x0800c633
 800be04:	0800c633 	.word	0x0800c633
 800be08:	0800c633 	.word	0x0800c633
 800be0c:	0800c633 	.word	0x0800c633
 800be10:	0800c633 	.word	0x0800c633
 800be14:	0800c633 	.word	0x0800c633
 800be18:	0800c633 	.word	0x0800c633
 800be1c:	0800c633 	.word	0x0800c633
 800be20:	0800c633 	.word	0x0800c633
 800be24:	0800c633 	.word	0x0800c633
 800be28:	0800c219 	.word	0x0800c219
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b40      	cmp	r3, #64	; 0x40
 800be30:	f000 82bd 	beq.w	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800be34:	e3fd      	b.n	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800be36:	69b9      	ldr	r1, [r7, #24]
 800be38:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800be3c:	f001 f87a 	bl	800cf34 <RCCEx_GetSAIxPeriphCLKFreq>
 800be40:	61f8      	str	r0, [r7, #28]
      break;
 800be42:	e3f7      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800be44:	69b9      	ldr	r1, [r7, #24]
 800be46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800be4a:	f001 f873 	bl	800cf34 <RCCEx_GetSAIxPeriphCLKFreq>
 800be4e:	61f8      	str	r0, [r7, #28]
      break;
 800be50:	e3f0      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800be52:	4b0c      	ldr	r3, [pc, #48]	; (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800be54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be58:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800be5c:	613b      	str	r3, [r7, #16]
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800be64:	d018      	beq.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800be6c:	f200 808b 	bhi.w	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be76:	d059      	beq.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be7e:	d028      	beq.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 800be80:	e081      	b.n	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 800be82:	bf00      	nop
 800be84:	40021000 	.word	0x40021000
 800be88:	0003d090 	.word	0x0003d090
 800be8c:	08012f78 	.word	0x08012f78
 800be90:	00f42400 	.word	0x00f42400
 800be94:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800be98:	4bae      	ldr	r3, [pc, #696]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0302 	and.w	r3, r3, #2
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d172      	bne.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800bea4:	4bab      	ldr	r3, [pc, #684]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f003 0308 	and.w	r3, r3, #8
 800beac:	2b00      	cmp	r3, #0
 800beae:	d005      	beq.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 800beb0:	4ba8      	ldr	r3, [pc, #672]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	091b      	lsrs	r3, r3, #4
 800beb6:	f003 030f 	and.w	r3, r3, #15
 800beba:	e005      	b.n	800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800bebc:	4ba5      	ldr	r3, [pc, #660]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800bebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bec2:	0a1b      	lsrs	r3, r3, #8
 800bec4:	f003 030f 	and.w	r3, r3, #15
 800bec8:	4aa3      	ldr	r2, [pc, #652]	; (800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800beca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bece:	61fb      	str	r3, [r7, #28]
          break;
 800bed0:	e05b      	b.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800bed2:	4ba0      	ldr	r3, [pc, #640]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800beda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bede:	d156      	bne.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800bee0:	4b9c      	ldr	r3, [pc, #624]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800beec:	d14f      	bne.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800beee:	4b99      	ldr	r3, [pc, #612]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	0a1b      	lsrs	r3, r3, #8
 800bef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bef8:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	fb02 f203 	mul.w	r2, r2, r3
 800bf02:	4b94      	ldr	r3, [pc, #592]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	091b      	lsrs	r3, r3, #4
 800bf08:	f003 0307 	and.w	r3, r3, #7
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf12:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800bf14:	4b8f      	ldr	r3, [pc, #572]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	0d5b      	lsrs	r3, r3, #21
 800bf1a:	f003 0303 	and.w	r3, r3, #3
 800bf1e:	3301      	adds	r3, #1
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	69ba      	ldr	r2, [r7, #24]
 800bf24:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf28:	61fb      	str	r3, [r7, #28]
          break;
 800bf2a:	e030      	b.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800bf2c:	4b89      	ldr	r3, [pc, #548]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf38:	d12b      	bne.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800bf3a:	4b86      	ldr	r3, [pc, #536]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf46:	d124      	bne.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800bf48:	4b82      	ldr	r3, [pc, #520]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800bf4a:	691b      	ldr	r3, [r3, #16]
 800bf4c:	0a1b      	lsrs	r3, r3, #8
 800bf4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf52:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	fb02 f203 	mul.w	r2, r2, r3
 800bf5c:	4b7d      	ldr	r3, [pc, #500]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	091b      	lsrs	r3, r3, #4
 800bf62:	f003 0307 	and.w	r3, r3, #7
 800bf66:	3301      	adds	r3, #1
 800bf68:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf6c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800bf6e:	4b79      	ldr	r3, [pc, #484]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	0d5b      	lsrs	r3, r3, #21
 800bf74:	f003 0303 	and.w	r3, r3, #3
 800bf78:	3301      	adds	r3, #1
 800bf7a:	005b      	lsls	r3, r3, #1
 800bf7c:	69ba      	ldr	r2, [r7, #24]
 800bf7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf82:	61fb      	str	r3, [r7, #28]
          break;
 800bf84:	e005      	b.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
          break;
 800bf86:	bf00      	nop
 800bf88:	e354      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800bf8a:	bf00      	nop
 800bf8c:	e352      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800bf8e:	bf00      	nop
 800bf90:	e350      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800bf92:	bf00      	nop
        break;
 800bf94:	e34e      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800bf96:	4b6f      	ldr	r3, [pc, #444]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800bf98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf9c:	f003 0303 	and.w	r3, r3, #3
 800bfa0:	613b      	str	r3, [r7, #16]
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	2b03      	cmp	r3, #3
 800bfa6:	d828      	bhi.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800bfa8:	a201      	add	r2, pc, #4	; (adr r2, 800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 800bfaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfae:	bf00      	nop
 800bfb0:	0800bfc1 	.word	0x0800bfc1
 800bfb4:	0800bfc9 	.word	0x0800bfc9
 800bfb8:	0800bfd1 	.word	0x0800bfd1
 800bfbc:	0800bfe5 	.word	0x0800bfe5
          frequency = HAL_RCC_GetPCLK2Freq();
 800bfc0:	f7ff f864 	bl	800b08c <HAL_RCC_GetPCLK2Freq>
 800bfc4:	61f8      	str	r0, [r7, #28]
          break;
 800bfc6:	e01d      	b.n	800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          frequency = HAL_RCC_GetSysClockFreq();
 800bfc8:	f7fe ffb2 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 800bfcc:	61f8      	str	r0, [r7, #28]
          break;
 800bfce:	e019      	b.n	800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bfd0:	4b60      	ldr	r3, [pc, #384]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfdc:	d10f      	bne.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = HSI_VALUE;
 800bfde:	4b5f      	ldr	r3, [pc, #380]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800bfe0:	61fb      	str	r3, [r7, #28]
          break;
 800bfe2:	e00c      	b.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bfe4:	4b5b      	ldr	r3, [pc, #364]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800bfe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfea:	f003 0302 	and.w	r3, r3, #2
 800bfee:	2b02      	cmp	r3, #2
 800bff0:	d107      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            frequency = LSE_VALUE;
 800bff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bff6:	61fb      	str	r3, [r7, #28]
          break;
 800bff8:	e003      	b.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          break;
 800bffa:	bf00      	nop
 800bffc:	e31a      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800bffe:	bf00      	nop
 800c000:	e318      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c002:	bf00      	nop
        break;
 800c004:	e316      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c006:	4b53      	ldr	r3, [pc, #332]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800c008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c00c:	f003 030c 	and.w	r3, r3, #12
 800c010:	613b      	str	r3, [r7, #16]
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	2b0c      	cmp	r3, #12
 800c016:	d83a      	bhi.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 800c018:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 800c01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c01e:	bf00      	nop
 800c020:	0800c055 	.word	0x0800c055
 800c024:	0800c08f 	.word	0x0800c08f
 800c028:	0800c08f 	.word	0x0800c08f
 800c02c:	0800c08f 	.word	0x0800c08f
 800c030:	0800c05d 	.word	0x0800c05d
 800c034:	0800c08f 	.word	0x0800c08f
 800c038:	0800c08f 	.word	0x0800c08f
 800c03c:	0800c08f 	.word	0x0800c08f
 800c040:	0800c065 	.word	0x0800c065
 800c044:	0800c08f 	.word	0x0800c08f
 800c048:	0800c08f 	.word	0x0800c08f
 800c04c:	0800c08f 	.word	0x0800c08f
 800c050:	0800c079 	.word	0x0800c079
          frequency = HAL_RCC_GetPCLK1Freq();
 800c054:	f7ff f804 	bl	800b060 <HAL_RCC_GetPCLK1Freq>
 800c058:	61f8      	str	r0, [r7, #28]
          break;
 800c05a:	e01d      	b.n	800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = HAL_RCC_GetSysClockFreq();
 800c05c:	f7fe ff68 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 800c060:	61f8      	str	r0, [r7, #28]
          break;
 800c062:	e019      	b.n	800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c064:	4b3b      	ldr	r3, [pc, #236]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c06c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c070:	d10f      	bne.n	800c092 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = HSI_VALUE;
 800c072:	4b3a      	ldr	r3, [pc, #232]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800c074:	61fb      	str	r3, [r7, #28]
          break;
 800c076:	e00c      	b.n	800c092 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c078:	4b36      	ldr	r3, [pc, #216]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800c07a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c07e:	f003 0302 	and.w	r3, r3, #2
 800c082:	2b02      	cmp	r3, #2
 800c084:	d107      	bne.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
            frequency = LSE_VALUE;
 800c086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c08a:	61fb      	str	r3, [r7, #28]
          break;
 800c08c:	e003      	b.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
          break;
 800c08e:	bf00      	nop
 800c090:	e2d0      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c092:	bf00      	nop
 800c094:	e2ce      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c096:	bf00      	nop
        break;
 800c098:	e2cc      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c09a:	4b2e      	ldr	r3, [pc, #184]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800c09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c0a4:	613b      	str	r3, [r7, #16]
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	2b30      	cmp	r3, #48	; 0x30
 800c0aa:	d021      	beq.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	2b30      	cmp	r3, #48	; 0x30
 800c0b0:	d829      	bhi.n	800c106 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	2b20      	cmp	r3, #32
 800c0b6:	d011      	beq.n	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	2b20      	cmp	r3, #32
 800c0bc:	d823      	bhi.n	800c106 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d003      	beq.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	2b10      	cmp	r3, #16
 800c0c8:	d004      	beq.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
          break;
 800c0ca:	e01c      	b.n	800c106 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c0cc:	f7fe ffc8 	bl	800b060 <HAL_RCC_GetPCLK1Freq>
 800c0d0:	61f8      	str	r0, [r7, #28]
          break;
 800c0d2:	e01d      	b.n	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          frequency = HAL_RCC_GetSysClockFreq();
 800c0d4:	f7fe ff2c 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 800c0d8:	61f8      	str	r0, [r7, #28]
          break;
 800c0da:	e019      	b.n	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c0dc:	4b1d      	ldr	r3, [pc, #116]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0e8:	d10f      	bne.n	800c10a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = HSI_VALUE;
 800c0ea:	4b1c      	ldr	r3, [pc, #112]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800c0ec:	61fb      	str	r3, [r7, #28]
          break;
 800c0ee:	e00c      	b.n	800c10a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c0f0:	4b18      	ldr	r3, [pc, #96]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800c0f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0f6:	f003 0302 	and.w	r3, r3, #2
 800c0fa:	2b02      	cmp	r3, #2
 800c0fc:	d107      	bne.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
            frequency = LSE_VALUE;
 800c0fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c102:	61fb      	str	r3, [r7, #28]
          break;
 800c104:	e003      	b.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          break;
 800c106:	bf00      	nop
 800c108:	e294      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c10a:	bf00      	nop
 800c10c:	e292      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c10e:	bf00      	nop
        break;
 800c110:	e290      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c112:	4b10      	ldr	r3, [pc, #64]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800c114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c118:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c11c:	613b      	str	r3, [r7, #16]
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	2bc0      	cmp	r3, #192	; 0xc0
 800c122:	d027      	beq.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	2bc0      	cmp	r3, #192	; 0xc0
 800c128:	d82f      	bhi.n	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	2b80      	cmp	r3, #128	; 0x80
 800c12e:	d017      	beq.n	800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	2b80      	cmp	r3, #128	; 0x80
 800c134:	d829      	bhi.n	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d003      	beq.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	2b40      	cmp	r3, #64	; 0x40
 800c140:	d004      	beq.n	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 800c142:	e022      	b.n	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c144:	f7fe ff8c 	bl	800b060 <HAL_RCC_GetPCLK1Freq>
 800c148:	61f8      	str	r0, [r7, #28]
          break;
 800c14a:	e023      	b.n	800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          frequency = HAL_RCC_GetSysClockFreq();
 800c14c:	f7fe fef0 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 800c150:	61f8      	str	r0, [r7, #28]
          break;
 800c152:	e01f      	b.n	800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 800c154:	40021000 	.word	0x40021000
 800c158:	08012f78 	.word	0x08012f78
 800c15c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c160:	4ba9      	ldr	r3, [pc, #676]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c16c:	d10f      	bne.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
            frequency = HSI_VALUE;
 800c16e:	4ba7      	ldr	r3, [pc, #668]	; (800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800c170:	61fb      	str	r3, [r7, #28]
          break;
 800c172:	e00c      	b.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c174:	4ba4      	ldr	r3, [pc, #656]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c17a:	f003 0302 	and.w	r3, r3, #2
 800c17e:	2b02      	cmp	r3, #2
 800c180:	d107      	bne.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
            frequency = LSE_VALUE;
 800c182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c186:	61fb      	str	r3, [r7, #28]
          break;
 800c188:	e003      	b.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 800c18a:	bf00      	nop
 800c18c:	e252      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c18e:	bf00      	nop
 800c190:	e250      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c192:	bf00      	nop
        break;
 800c194:	e24e      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c196:	4b9c      	ldr	r3, [pc, #624]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c19c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1a0:	613b      	str	r3, [r7, #16]
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1a8:	d025      	beq.n	800c1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1b0:	d82c      	bhi.n	800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1b8:	d013      	beq.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1c0:	d824      	bhi.n	800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d004      	beq.n	800c1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ce:	d004      	beq.n	800c1da <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          break;
 800c1d0:	e01c      	b.n	800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c1d2:	f7fe ff45 	bl	800b060 <HAL_RCC_GetPCLK1Freq>
 800c1d6:	61f8      	str	r0, [r7, #28]
          break;
 800c1d8:	e01d      	b.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          frequency = HAL_RCC_GetSysClockFreq();
 800c1da:	f7fe fea9 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 800c1de:	61f8      	str	r0, [r7, #28]
          break;
 800c1e0:	e019      	b.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c1e2:	4b89      	ldr	r3, [pc, #548]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1ee:	d10f      	bne.n	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI_VALUE;
 800c1f0:	4b86      	ldr	r3, [pc, #536]	; (800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800c1f2:	61fb      	str	r3, [r7, #28]
          break;
 800c1f4:	e00c      	b.n	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c1f6:	4b84      	ldr	r3, [pc, #528]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1fc:	f003 0302 	and.w	r3, r3, #2
 800c200:	2b02      	cmp	r3, #2
 800c202:	d107      	bne.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
            frequency = LSE_VALUE;
 800c204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c208:	61fb      	str	r3, [r7, #28]
          break;
 800c20a:	e003      	b.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 800c20c:	bf00      	nop
 800c20e:	e211      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c210:	bf00      	nop
 800c212:	e20f      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c214:	bf00      	nop
        break;
 800c216:	e20d      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c218:	4b7b      	ldr	r3, [pc, #492]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c21a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c21e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c222:	613b      	str	r3, [r7, #16]
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c22a:	d025      	beq.n	800c278 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c232:	d82c      	bhi.n	800c28e <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c23a:	d013      	beq.n	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c242:	d824      	bhi.n	800c28e <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d004      	beq.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c250:	d004      	beq.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          break;
 800c252:	e01c      	b.n	800c28e <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c254:	f7fe ff04 	bl	800b060 <HAL_RCC_GetPCLK1Freq>
 800c258:	61f8      	str	r0, [r7, #28]
          break;
 800c25a:	e01d      	b.n	800c298 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 800c25c:	f7fe fe68 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 800c260:	61f8      	str	r0, [r7, #28]
          break;
 800c262:	e019      	b.n	800c298 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c264:	4b68      	ldr	r3, [pc, #416]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c26c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c270:	d10f      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 800c272:	4b66      	ldr	r3, [pc, #408]	; (800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800c274:	61fb      	str	r3, [r7, #28]
          break;
 800c276:	e00c      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c278:	4b63      	ldr	r3, [pc, #396]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c27e:	f003 0302 	and.w	r3, r3, #2
 800c282:	2b02      	cmp	r3, #2
 800c284:	d107      	bne.n	800c296 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 800c286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c28a:	61fb      	str	r3, [r7, #28]
          break;
 800c28c:	e003      	b.n	800c296 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 800c28e:	bf00      	nop
 800c290:	e1d0      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c292:	bf00      	nop
 800c294:	e1ce      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c296:	bf00      	nop
        break;
 800c298:	e1cc      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c29a:	4b5b      	ldr	r3, [pc, #364]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2a4:	613b      	str	r3, [r7, #16]
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2ac:	d00c      	beq.n	800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2b4:	d864      	bhi.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2bc:	d008      	beq.n	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2c4:	d030      	beq.n	800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800c2c6:	e05b      	b.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          frequency = HAL_RCC_GetSysClockFreq();
 800c2c8:	f7fe fe32 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 800c2cc:	61f8      	str	r0, [r7, #28]
          break;
 800c2ce:	e05c      	b.n	800c38a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800c2d0:	4b4d      	ldr	r3, [pc, #308]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2dc:	d152      	bne.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 800c2de:	4b4a      	ldr	r3, [pc, #296]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d04c      	beq.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c2ea:	4b47      	ldr	r3, [pc, #284]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c2ec:	691b      	ldr	r3, [r3, #16]
 800c2ee:	0a1b      	lsrs	r3, r3, #8
 800c2f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2f4:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	fb02 f203 	mul.w	r2, r2, r3
 800c2fe:	4b42      	ldr	r3, [pc, #264]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	091b      	lsrs	r3, r3, #4
 800c304:	f003 0307 	and.w	r3, r3, #7
 800c308:	3301      	adds	r3, #1
 800c30a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c30e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800c310:	4b3d      	ldr	r3, [pc, #244]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c312:	691b      	ldr	r3, [r3, #16]
 800c314:	0e5b      	lsrs	r3, r3, #25
 800c316:	f003 0303 	and.w	r3, r3, #3
 800c31a:	3301      	adds	r3, #1
 800c31c:	005b      	lsls	r3, r3, #1
 800c31e:	69ba      	ldr	r2, [r7, #24]
 800c320:	fbb2 f3f3 	udiv	r3, r2, r3
 800c324:	61fb      	str	r3, [r7, #28]
          break;
 800c326:	e02d      	b.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800c328:	4b37      	ldr	r3, [pc, #220]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c334:	d128      	bne.n	800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800c336:	4b34      	ldr	r3, [pc, #208]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c338:	695b      	ldr	r3, [r3, #20]
 800c33a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d022      	beq.n	800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800c342:	4b31      	ldr	r3, [pc, #196]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c344:	695b      	ldr	r3, [r3, #20]
 800c346:	0a1b      	lsrs	r3, r3, #8
 800c348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c34c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	68fa      	ldr	r2, [r7, #12]
 800c352:	fb02 f203 	mul.w	r2, r2, r3
 800c356:	4b2c      	ldr	r3, [pc, #176]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	091b      	lsrs	r3, r3, #4
 800c35c:	f003 0307 	and.w	r3, r3, #7
 800c360:	3301      	adds	r3, #1
 800c362:	fbb2 f3f3 	udiv	r3, r2, r3
 800c366:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800c368:	4b27      	ldr	r3, [pc, #156]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c36a:	695b      	ldr	r3, [r3, #20]
 800c36c:	0e5b      	lsrs	r3, r3, #25
 800c36e:	f003 0303 	and.w	r3, r3, #3
 800c372:	3301      	adds	r3, #1
 800c374:	005b      	lsls	r3, r3, #1
 800c376:	69ba      	ldr	r2, [r7, #24]
 800c378:	fbb2 f3f3 	udiv	r3, r2, r3
 800c37c:	61fb      	str	r3, [r7, #28]
          break;
 800c37e:	e003      	b.n	800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          break;
 800c380:	bf00      	nop
 800c382:	e157      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c384:	bf00      	nop
 800c386:	e155      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c388:	bf00      	nop
        break;
 800c38a:	e153      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800c38c:	4b1e      	ldr	r3, [pc, #120]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c396:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d103      	bne.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          frequency = HAL_RCC_GetPCLK2Freq();
 800c39e:	f7fe fe75 	bl	800b08c <HAL_RCC_GetPCLK2Freq>
 800c3a2:	61f8      	str	r0, [r7, #28]
        break;
 800c3a4:	e146      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          frequency = HAL_RCC_GetSysClockFreq();
 800c3a6:	f7fe fdc3 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 800c3aa:	61f8      	str	r0, [r7, #28]
        break;
 800c3ac:	e142      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c3ae:	4b16      	ldr	r3, [pc, #88]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c3b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c3b8:	613b      	str	r3, [r7, #16]
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3c0:	d013      	beq.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3c8:	d819      	bhi.n	800c3fe <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d004      	beq.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3d6:	d004      	beq.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800c3d8:	e011      	b.n	800c3fe <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c3da:	f7fe fe41 	bl	800b060 <HAL_RCC_GetPCLK1Freq>
 800c3de:	61f8      	str	r0, [r7, #28]
          break;
 800c3e0:	e010      	b.n	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = HAL_RCC_GetSysClockFreq();
 800c3e2:	f7fe fda5 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 800c3e6:	61f8      	str	r0, [r7, #28]
          break;
 800c3e8:	e00c      	b.n	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c3ea:	4b07      	ldr	r3, [pc, #28]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3f6:	d104      	bne.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            frequency = HSI_VALUE;
 800c3f8:	4b04      	ldr	r3, [pc, #16]	; (800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800c3fa:	61fb      	str	r3, [r7, #28]
          break;
 800c3fc:	e001      	b.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          break;
 800c3fe:	bf00      	nop
 800c400:	e118      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c402:	bf00      	nop
        break;
 800c404:	e116      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c406:	bf00      	nop
 800c408:	40021000 	.word	0x40021000
 800c40c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800c410:	4b8b      	ldr	r3, [pc, #556]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c416:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c41a:	613b      	str	r3, [r7, #16]
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c422:	d013      	beq.n	800c44c <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c42a:	d819      	bhi.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d004      	beq.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c438:	d004      	beq.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
          break;
 800c43a:	e011      	b.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c43c:	f7fe fe10 	bl	800b060 <HAL_RCC_GetPCLK1Freq>
 800c440:	61f8      	str	r0, [r7, #28]
          break;
 800c442:	e010      	b.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800c444:	f7fe fd74 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 800c448:	61f8      	str	r0, [r7, #28]
          break;
 800c44a:	e00c      	b.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c44c:	4b7c      	ldr	r3, [pc, #496]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c458:	d104      	bne.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800c45a:	4b7a      	ldr	r3, [pc, #488]	; (800c644 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800c45c:	61fb      	str	r3, [r7, #28]
          break;
 800c45e:	e001      	b.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 800c460:	bf00      	nop
 800c462:	e0e7      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c464:	bf00      	nop
        break;
 800c466:	e0e5      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800c468:	4b75      	ldr	r3, [pc, #468]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c46e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c472:	613b      	str	r3, [r7, #16]
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c47a:	d013      	beq.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c482:	d819      	bhi.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d004      	beq.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c490:	d004      	beq.n	800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x928>
          break;
 800c492:	e011      	b.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c494:	f7fe fde4 	bl	800b060 <HAL_RCC_GetPCLK1Freq>
 800c498:	61f8      	str	r0, [r7, #28]
          break;
 800c49a:	e010      	b.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          frequency = HAL_RCC_GetSysClockFreq();
 800c49c:	f7fe fd48 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 800c4a0:	61f8      	str	r0, [r7, #28]
          break;
 800c4a2:	e00c      	b.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c4a4:	4b66      	ldr	r3, [pc, #408]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4b0:	d104      	bne.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            frequency = HSI_VALUE;
 800c4b2:	4b64      	ldr	r3, [pc, #400]	; (800c644 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800c4b4:	61fb      	str	r3, [r7, #28]
          break;
 800c4b6:	e001      	b.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          break;
 800c4b8:	bf00      	nop
 800c4ba:	e0bb      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c4bc:	bf00      	nop
        break;
 800c4be:	e0b9      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c4c0:	4b5f      	ldr	r3, [pc, #380]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c4c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4c6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c4ca:	613b      	str	r3, [r7, #16]
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c4d2:	d02c      	beq.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c4da:	d833      	bhi.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c4e2:	d01a      	beq.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c4ea:	d82b      	bhi.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d004      	beq.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c4f8:	d004      	beq.n	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          break;
 800c4fa:	e023      	b.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c4fc:	f7fe fdb0 	bl	800b060 <HAL_RCC_GetPCLK1Freq>
 800c500:	61f8      	str	r0, [r7, #28]
          break;
 800c502:	e026      	b.n	800c552 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c504:	4b4e      	ldr	r3, [pc, #312]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c50a:	f003 0302 	and.w	r3, r3, #2
 800c50e:	2b02      	cmp	r3, #2
 800c510:	d11a      	bne.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
              frequency = LSI_VALUE;
 800c512:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c516:	61fb      	str	r3, [r7, #28]
          break;
 800c518:	e016      	b.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c51a:	4b49      	ldr	r3, [pc, #292]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c526:	d111      	bne.n	800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
            frequency = HSI_VALUE;
 800c528:	4b46      	ldr	r3, [pc, #280]	; (800c644 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800c52a:	61fb      	str	r3, [r7, #28]
          break;
 800c52c:	e00e      	b.n	800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c52e:	4b44      	ldr	r3, [pc, #272]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c534:	f003 0302 	and.w	r3, r3, #2
 800c538:	2b02      	cmp	r3, #2
 800c53a:	d109      	bne.n	800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = LSE_VALUE;
 800c53c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c540:	61fb      	str	r3, [r7, #28]
          break;
 800c542:	e005      	b.n	800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 800c544:	bf00      	nop
 800c546:	e075      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c548:	bf00      	nop
 800c54a:	e073      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c54c:	bf00      	nop
 800c54e:	e071      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c550:	bf00      	nop
        break;
 800c552:	e06f      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c554:	4b3a      	ldr	r3, [pc, #232]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c55a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c55e:	613b      	str	r3, [r7, #16]
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c566:	d02c      	beq.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c56e:	d833      	bhi.n	800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c576:	d01a      	beq.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c57e:	d82b      	bhi.n	800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d004      	beq.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c58c:	d004      	beq.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 800c58e:	e023      	b.n	800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c590:	f7fe fd66 	bl	800b060 <HAL_RCC_GetPCLK1Freq>
 800c594:	61f8      	str	r0, [r7, #28]
          break;
 800c596:	e026      	b.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c598:	4b29      	ldr	r3, [pc, #164]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c59a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c59e:	f003 0302 	and.w	r3, r3, #2
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	d11a      	bne.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 800c5a6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c5aa:	61fb      	str	r3, [r7, #28]
          break;
 800c5ac:	e016      	b.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c5ae:	4b24      	ldr	r3, [pc, #144]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5ba:	d111      	bne.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 800c5bc:	4b21      	ldr	r3, [pc, #132]	; (800c644 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800c5be:	61fb      	str	r3, [r7, #28]
          break;
 800c5c0:	e00e      	b.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c5c2:	4b1f      	ldr	r3, [pc, #124]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c5c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5c8:	f003 0302 	and.w	r3, r3, #2
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d109      	bne.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 800c5d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5d4:	61fb      	str	r3, [r7, #28]
          break;
 800c5d6:	e005      	b.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 800c5d8:	bf00      	nop
 800c5da:	e02b      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c5dc:	bf00      	nop
 800c5de:	e029      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c5e0:	bf00      	nop
 800c5e2:	e027      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800c5e4:	bf00      	nop
        break;
 800c5e6:	e025      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800c5e8:	4b15      	ldr	r3, [pc, #84]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c5f2:	613b      	str	r3, [r7, #16]
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d004      	beq.n	800c604 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c600:	d004      	beq.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          break;
 800c602:	e00d      	b.n	800c620 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c604:	f7fe fd2c 	bl	800b060 <HAL_RCC_GetPCLK1Freq>
 800c608:	61f8      	str	r0, [r7, #28]
          break;
 800c60a:	e009      	b.n	800c620 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c60c:	4b0c      	ldr	r3, [pc, #48]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c618:	d101      	bne.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800c61a:	4b0a      	ldr	r3, [pc, #40]	; (800c644 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800c61c:	61fb      	str	r3, [r7, #28]
          break;
 800c61e:	bf00      	nop
        break;
 800c620:	e008      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800c622:	bf00      	nop
 800c624:	e006      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800c626:	bf00      	nop
 800c628:	e004      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800c62a:	bf00      	nop
 800c62c:	e002      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800c62e:	bf00      	nop
 800c630:	e000      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800c632:	bf00      	nop
    }
  }

  return(frequency);
 800c634:	69fb      	ldr	r3, [r7, #28]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3720      	adds	r7, #32
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	40021000 	.word	0x40021000
 800c644:	00f42400 	.word	0x00f42400

0800c648 <HAL_RCCEx_EnablePLLSAI1>:
  * @param  PLLSAI1Init  pointer to an RCC_PLLSAI1InitTypeDef structure that
  *         contains the configuration information for the PLLSAI1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI1(RCC_PLLSAI1InitTypeDef  *PLLSAI1Init)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c650:	2300      	movs	r3, #0
 800c652:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1Q_VALUE(PLLSAI1Init->PLLSAI1Q));
  assert_param(IS_RCC_PLLSAI1R_VALUE(PLLSAI1Init->PLLSAI1R));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1Init->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c654:	4b2e      	ldr	r3, [pc, #184]	; (800c710 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a2d      	ldr	r2, [pc, #180]	; (800c710 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 800c65a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c65e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c660:	f7f4 fff6 	bl	8001650 <HAL_GetTick>
 800c664:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c666:	e009      	b.n	800c67c <HAL_RCCEx_EnablePLLSAI1+0x34>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c668:	f7f4 fff2 	bl	8001650 <HAL_GetTick>
 800c66c:	4602      	mov	r2, r0
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	2b02      	cmp	r3, #2
 800c674:	d902      	bls.n	800c67c <HAL_RCCEx_EnablePLLSAI1+0x34>
    {
      status = HAL_TIMEOUT;
 800c676:	2303      	movs	r3, #3
 800c678:	73fb      	strb	r3, [r7, #15]
      break;
 800c67a:	e005      	b.n	800c688 <HAL_RCCEx_EnablePLLSAI1+0x40>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c67c:	4b24      	ldr	r3, [pc, #144]	; (800c710 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c684:	2b00      	cmp	r3, #0
 800c686:	d1ef      	bne.n	800c668 <HAL_RCCEx_EnablePLLSAI1+0x20>
    }
  }

  if(status == HAL_OK)
 800c688:	7bfb      	ldrb	r3, [r7, #15]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d13b      	bne.n	800c706 <HAL_RCCEx_EnablePLLSAI1+0xbe>
    /* Configure the PLLSAI1 Division factors M, P, Q and R */
    __HAL_RCC_PLLSAI1_CONFIG(PLLSAI1Init->PLLSAI1M, PLLSAI1Init->PLLSAI1N, PLLSAI1Init->PLLSAI1P, PLLSAI1Init->PLLSAI1Q, PLLSAI1Init->PLLSAI1R);
#else
    /* Configure the PLLSAI1 Multiplication factor N */
    /* Configure the PLLSAI1 Division factors P, Q and R */
    __HAL_RCC_PLLSAI1_CONFIG(PLLSAI1Init->PLLSAI1N, PLLSAI1Init->PLLSAI1P, PLLSAI1Init->PLLSAI1Q, PLLSAI1Init->PLLSAI1R);
 800c68e:	4b20      	ldr	r3, [pc, #128]	; (800c710 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 800c690:	691a      	ldr	r2, [r3, #16]
 800c692:	4b20      	ldr	r3, [pc, #128]	; (800c714 <HAL_RCCEx_EnablePLLSAI1+0xcc>)
 800c694:	4013      	ands	r3, r2
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	6892      	ldr	r2, [r2, #8]
 800c69a:	0211      	lsls	r1, r2, #8
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	6912      	ldr	r2, [r2, #16]
 800c6a0:	0852      	lsrs	r2, r2, #1
 800c6a2:	3a01      	subs	r2, #1
 800c6a4:	0552      	lsls	r2, r2, #21
 800c6a6:	4311      	orrs	r1, r2
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	6952      	ldr	r2, [r2, #20]
 800c6ac:	0852      	lsrs	r2, r2, #1
 800c6ae:	3a01      	subs	r2, #1
 800c6b0:	0652      	lsls	r2, r2, #25
 800c6b2:	4311      	orrs	r1, r2
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	68d2      	ldr	r2, [r2, #12]
 800c6b8:	0912      	lsrs	r2, r2, #4
 800c6ba:	0452      	lsls	r2, r2, #17
 800c6bc:	430a      	orrs	r2, r1
 800c6be:	4914      	ldr	r1, [pc, #80]	; (800c710 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	610b      	str	r3, [r1, #16]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
    /* Configure the PLLSAI1 Clock output(s) */
    __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1Init->PLLSAI1ClockOut);
 800c6c4:	4b12      	ldr	r3, [pc, #72]	; (800c710 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 800c6c6:	691a      	ldr	r2, [r3, #16]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	699b      	ldr	r3, [r3, #24]
 800c6cc:	4910      	ldr	r1, [pc, #64]	; (800c710 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c6d2:	4b0f      	ldr	r3, [pc, #60]	; (800c710 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4a0e      	ldr	r2, [pc, #56]	; (800c710 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 800c6d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c6dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6de:	f7f4 ffb7 	bl	8001650 <HAL_GetTick>
 800c6e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c6e4:	e009      	b.n	800c6fa <HAL_RCCEx_EnablePLLSAI1+0xb2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c6e6:	f7f4 ffb3 	bl	8001650 <HAL_GetTick>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d902      	bls.n	800c6fa <HAL_RCCEx_EnablePLLSAI1+0xb2>
      {
        status = HAL_TIMEOUT;
 800c6f4:	2303      	movs	r3, #3
 800c6f6:	73fb      	strb	r3, [r7, #15]
        break;
 800c6f8:	e005      	b.n	800c706 <HAL_RCCEx_EnablePLLSAI1+0xbe>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c6fa:	4b05      	ldr	r3, [pc, #20]	; (800c710 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c702:	2b00      	cmp	r3, #0
 800c704:	d0ef      	beq.n	800c6e6 <HAL_RCCEx_EnablePLLSAI1+0x9e>
      }
    }
  }

  return status;
 800c706:	7bfb      	ldrb	r3, [r7, #15]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	40021000 	.word	0x40021000
 800c714:	f99d80ff 	.word	0xf99d80ff

0800c718 <HAL_RCCEx_DisablePLLSAI1>:
/**
  * @brief  Disable PLLSAI1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI1(void)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	71fb      	strb	r3, [r7, #7]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c722:	4b19      	ldr	r3, [pc, #100]	; (800c788 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a18      	ldr	r2, [pc, #96]	; (800c788 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 800c728:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c72c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c72e:	f7f4 ff8f 	bl	8001650 <HAL_GetTick>
 800c732:	6038      	str	r0, [r7, #0]

  /* Wait till PLLSAI1 is ready */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c734:	e009      	b.n	800c74a <HAL_RCCEx_DisablePLLSAI1+0x32>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c736:	f7f4 ff8b 	bl	8001650 <HAL_GetTick>
 800c73a:	4602      	mov	r2, r0
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	2b02      	cmp	r3, #2
 800c742:	d902      	bls.n	800c74a <HAL_RCCEx_DisablePLLSAI1+0x32>
    {
      status = HAL_TIMEOUT;
 800c744:	2303      	movs	r3, #3
 800c746:	71fb      	strb	r3, [r7, #7]
      break;
 800c748:	e005      	b.n	800c756 <HAL_RCCEx_DisablePLLSAI1+0x3e>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c74a:	4b0f      	ldr	r3, [pc, #60]	; (800c788 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1ef      	bne.n	800c736 <HAL_RCCEx_DisablePLLSAI1+0x1e>
    }
  }

  /* Disable the PLLSAI1 Clock outputs */
  __HAL_RCC_PLLSAI1CLKOUT_DISABLE(RCC_PLLSAI1CFGR_PLLSAI1PEN|RCC_PLLSAI1CFGR_PLLSAI1QEN|RCC_PLLSAI1CFGR_PLLSAI1REN);
 800c756:	4b0c      	ldr	r3, [pc, #48]	; (800c788 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 800c758:	691b      	ldr	r3, [r3, #16]
 800c75a:	4a0b      	ldr	r2, [pc, #44]	; (800c788 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 800c75c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c764:	6113      	str	r3, [r2, #16]

  /* Reset PLL source to save power if no PLLs on */
#if defined(RCC_PLLSAI2_SUPPORT)
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800c766:	4b08      	ldr	r3, [pc, #32]	; (800c788 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f003 5308 	and.w	r3, r3, #570425344	; 0x22000000
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d105      	bne.n	800c77e <HAL_RCCEx_DisablePLLSAI1+0x66>
  {
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c772:	4b05      	ldr	r3, [pc, #20]	; (800c788 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	4a04      	ldr	r2, [pc, #16]	; (800c788 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 800c778:	f023 0303 	bic.w	r3, r3, #3
 800c77c:	60d3      	str	r3, [r2, #12]
  {
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
  }
#endif /* RCC_PLLSAI2_SUPPORT */

  return status;
 800c77e:	79fb      	ldrb	r3, [r7, #7]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	40021000 	.word	0x40021000

0800c78c <HAL_RCCEx_EnablePLLSAI2>:
  * @param  PLLSAI2Init  pointer to an RCC_PLLSAI2InitTypeDef structure that
  *         contains the configuration information for the PLLSAI2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI2(RCC_PLLSAI2InitTypeDef  *PLLSAI2Init)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c794:	2300      	movs	r3, #0
 800c796:	73fb      	strb	r3, [r7, #15]
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  assert_param(IS_RCC_PLLSAI2R_VALUE(PLLSAI2Init->PLLSAI2R));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PLLSAI2Init->PLLSAI2ClockOut));

  /* Disable the PLLSAI2 */
  __HAL_RCC_PLLSAI2_DISABLE();
 800c798:	4b2b      	ldr	r3, [pc, #172]	; (800c848 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a2a      	ldr	r2, [pc, #168]	; (800c848 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 800c79e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c7a4:	f7f4 ff54 	bl	8001650 <HAL_GetTick>
 800c7a8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI2 is ready to be updated */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c7aa:	e009      	b.n	800c7c0 <HAL_RCCEx_EnablePLLSAI2+0x34>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c7ac:	f7f4 ff50 	bl	8001650 <HAL_GetTick>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	1ad3      	subs	r3, r2, r3
 800c7b6:	2b02      	cmp	r3, #2
 800c7b8:	d902      	bls.n	800c7c0 <HAL_RCCEx_EnablePLLSAI2+0x34>
    {
      status = HAL_TIMEOUT;
 800c7ba:	2303      	movs	r3, #3
 800c7bc:	73fb      	strb	r3, [r7, #15]
      break;
 800c7be:	e005      	b.n	800c7cc <HAL_RCCEx_EnablePLLSAI2+0x40>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c7c0:	4b21      	ldr	r3, [pc, #132]	; (800c848 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d1ef      	bne.n	800c7ac <HAL_RCCEx_EnablePLLSAI2+0x20>
    }
  }

  if(status == HAL_OK)
 800c7cc:	7bfb      	ldrb	r3, [r7, #15]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d135      	bne.n	800c83e <HAL_RCCEx_EnablePLLSAI2+0xb2>
    /* Configure the PLLSAI2 Division factors P, Q and R */
    __HAL_RCC_PLLSAI2_CONFIG(PLLSAI2Init->PLLSAI2N, PLLSAI2Init->PLLSAI2P, PLLSAI2Init->PLLSAI2Q, PLLSAI2Init->PLLSAI2R);
#else
    /* Configure the PLLSAI2 Multiplication factor N */
    /* Configure the PLLSAI2 Division factors P and R */
    __HAL_RCC_PLLSAI2_CONFIG(PLLSAI2Init->PLLSAI2N, PLLSAI2Init->PLLSAI2P, PLLSAI2Init->PLLSAI2R);
 800c7d2:	4b1d      	ldr	r3, [pc, #116]	; (800c848 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 800c7d4:	695a      	ldr	r2, [r3, #20]
 800c7d6:	4b1d      	ldr	r3, [pc, #116]	; (800c84c <HAL_RCCEx_EnablePLLSAI2+0xc0>)
 800c7d8:	4013      	ands	r3, r2
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	6892      	ldr	r2, [r2, #8]
 800c7de:	0211      	lsls	r1, r2, #8
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	6912      	ldr	r2, [r2, #16]
 800c7e4:	0852      	lsrs	r2, r2, #1
 800c7e6:	3a01      	subs	r2, #1
 800c7e8:	0652      	lsls	r2, r2, #25
 800c7ea:	4311      	orrs	r1, r2
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	68d2      	ldr	r2, [r2, #12]
 800c7f0:	0912      	lsrs	r2, r2, #4
 800c7f2:	0452      	lsls	r2, r2, #17
 800c7f4:	430a      	orrs	r2, r1
 800c7f6:	4914      	ldr	r1, [pc, #80]	; (800c848 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	614b      	str	r3, [r1, #20]
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT && RCC_PLLSAI2Q_DIV_SUPPORT */
    /* Configure the PLLSAI2 Clock output(s) */
    __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PLLSAI2Init->PLLSAI2ClockOut);
 800c7fc:	4b12      	ldr	r3, [pc, #72]	; (800c848 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 800c7fe:	695a      	ldr	r2, [r3, #20]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	695b      	ldr	r3, [r3, #20]
 800c804:	4910      	ldr	r1, [pc, #64]	; (800c848 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 800c806:	4313      	orrs	r3, r2
 800c808:	614b      	str	r3, [r1, #20]

    /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
    __HAL_RCC_PLLSAI2_ENABLE();
 800c80a:	4b0f      	ldr	r3, [pc, #60]	; (800c848 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a0e      	ldr	r2, [pc, #56]	; (800c848 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 800c810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c816:	f7f4 ff1b 	bl	8001650 <HAL_GetTick>
 800c81a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c81c:	e009      	b.n	800c832 <HAL_RCCEx_EnablePLLSAI2+0xa6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c81e:	f7f4 ff17 	bl	8001650 <HAL_GetTick>
 800c822:	4602      	mov	r2, r0
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d902      	bls.n	800c832 <HAL_RCCEx_EnablePLLSAI2+0xa6>
      {
        status = HAL_TIMEOUT;
 800c82c:	2303      	movs	r3, #3
 800c82e:	73fb      	strb	r3, [r7, #15]
        break;
 800c830:	e005      	b.n	800c83e <HAL_RCCEx_EnablePLLSAI2+0xb2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c832:	4b05      	ldr	r3, [pc, #20]	; (800c848 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d0ef      	beq.n	800c81e <HAL_RCCEx_EnablePLLSAI2+0x92>
      }
    }
  }

  return status;
 800c83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c840:	4618      	mov	r0, r3
 800c842:	3710      	adds	r7, #16
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}
 800c848:	40021000 	.word	0x40021000
 800c84c:	f9fd80ff 	.word	0xf9fd80ff

0800c850 <HAL_RCCEx_DisablePLLSAI2>:
/**
  * @brief  Disable PLLISAI2.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI2(void)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c856:	2300      	movs	r3, #0
 800c858:	71fb      	strb	r3, [r7, #7]

  /* Disable the PLLSAI2 */
  __HAL_RCC_PLLSAI2_DISABLE();
 800c85a:	4b19      	ldr	r3, [pc, #100]	; (800c8c0 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a18      	ldr	r2, [pc, #96]	; (800c8c0 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 800c860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c864:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c866:	f7f4 fef3 	bl	8001650 <HAL_GetTick>
 800c86a:	6038      	str	r0, [r7, #0]

  /* Wait till PLLSAI2 is ready */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c86c:	e009      	b.n	800c882 <HAL_RCCEx_DisablePLLSAI2+0x32>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c86e:	f7f4 feef 	bl	8001650 <HAL_GetTick>
 800c872:	4602      	mov	r2, r0
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	2b02      	cmp	r3, #2
 800c87a:	d902      	bls.n	800c882 <HAL_RCCEx_DisablePLLSAI2+0x32>
    {
      status = HAL_TIMEOUT;
 800c87c:	2303      	movs	r3, #3
 800c87e:	71fb      	strb	r3, [r7, #7]
      break;
 800c880:	e005      	b.n	800c88e <HAL_RCCEx_DisablePLLSAI2+0x3e>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c882:	4b0f      	ldr	r3, [pc, #60]	; (800c8c0 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1ef      	bne.n	800c86e <HAL_RCCEx_DisablePLLSAI2+0x1e>

  /* Disable the PLLSAI2 Clock outputs */
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  __HAL_RCC_PLLSAI2CLKOUT_DISABLE(RCC_PLLSAI2CFGR_PLLSAI2PEN|RCC_PLLSAI2CFGR_PLLSAI2QEN|RCC_PLLSAI2CFGR_PLLSAI2REN);
#else
  __HAL_RCC_PLLSAI2CLKOUT_DISABLE(RCC_PLLSAI2CFGR_PLLSAI2PEN|RCC_PLLSAI2CFGR_PLLSAI2REN);
 800c88e:	4b0c      	ldr	r3, [pc, #48]	; (800c8c0 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 800c890:	695b      	ldr	r3, [r3, #20]
 800c892:	4a0b      	ldr	r2, [pc, #44]	; (800c8c0 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 800c894:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c89c:	6153      	str	r3, [r2, #20]
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT && RCC_PLLSAI2Q_DIV_SUPPORT */

  /* Reset PLL source to save power if no PLLs on */
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY)) == 0U)
 800c89e:	4b08      	ldr	r3, [pc, #32]	; (800c8c0 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f003 6320 	and.w	r3, r3, #167772160	; 0xa000000
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d105      	bne.n	800c8b6 <HAL_RCCEx_DisablePLLSAI2+0x66>
  {
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c8aa:	4b05      	ldr	r3, [pc, #20]	; (800c8c0 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	4a04      	ldr	r2, [pc, #16]	; (800c8c0 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 800c8b0:	f023 0303 	bic.w	r3, r3, #3
 800c8b4:	60d3      	str	r3, [r2, #12]
  }

  return status;
 800c8b6:	79fb      	ldrb	r3, [r7, #7]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3708      	adds	r7, #8
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	40021000 	.word	0x40021000

0800c8c4 <HAL_RCCEx_WakeUpStopCLKConfig>:
  * @note   This function shall not be called after the Clock Security System on HSE has been
  *         enabled.
  * @retval None
  */
void HAL_RCCEx_WakeUpStopCLKConfig(uint32_t WakeUpClk)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_WAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
 800c8cc:	4b06      	ldr	r3, [pc, #24]	; (800c8e8 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800c8d4:	4904      	ldr	r1, [pc, #16]	; (800c8e8 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	608b      	str	r3, [r1, #8]
}
 800c8dc:	bf00      	nop
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr
 800c8e8:	40021000 	.word	0x40021000

0800c8ec <HAL_RCCEx_StandbyMSIRangeConfig>:
  *            @arg @ref RCC_MSIRANGE_6  Range 6 around 4 MHz (reset value)
  *            @arg @ref RCC_MSIRANGE_7  Range 7 around 8 MHz
  * @retval None
  */
void HAL_RCCEx_StandbyMSIRangeConfig(uint32_t MSIRange)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_MSI_STANDBY_CLOCK_RANGE(MSIRange));

  __HAL_RCC_MSI_STANDBY_RANGE_CONFIG(MSIRange);
 800c8f4:	4b08      	ldr	r3, [pc, #32]	; (800c918 <HAL_RCCEx_StandbyMSIRangeConfig+0x2c>)
 800c8f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	011b      	lsls	r3, r3, #4
 800c902:	4905      	ldr	r1, [pc, #20]	; (800c918 <HAL_RCCEx_StandbyMSIRangeConfig+0x2c>)
 800c904:	4313      	orrs	r3, r2
 800c906:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800c90a:	bf00      	nop
 800c90c:	370c      	adds	r7, #12
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	40021000 	.word	0x40021000

0800c91c <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800c91c:	b480      	push	{r7}
 800c91e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800c920:	4b06      	ldr	r3, [pc, #24]	; (800c93c <HAL_RCCEx_EnableLSECSS+0x20>)
 800c922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c926:	4a05      	ldr	r2, [pc, #20]	; (800c93c <HAL_RCCEx_EnableLSECSS+0x20>)
 800c928:	f043 0320 	orr.w	r3, r3, #32
 800c92c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c930:	bf00      	nop
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	40021000 	.word	0x40021000

0800c940 <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disable the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
 800c940:	b480      	push	{r7}
 800c942:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800c944:	4b09      	ldr	r3, [pc, #36]	; (800c96c <HAL_RCCEx_DisableLSECSS+0x2c>)
 800c946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c94a:	4a08      	ldr	r2, [pc, #32]	; (800c96c <HAL_RCCEx_DisableLSECSS+0x2c>)
 800c94c:	f023 0320 	bic.w	r3, r3, #32
 800c950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 800c954:	4b05      	ldr	r3, [pc, #20]	; (800c96c <HAL_RCCEx_DisableLSECSS+0x2c>)
 800c956:	699b      	ldr	r3, [r3, #24]
 800c958:	4a04      	ldr	r2, [pc, #16]	; (800c96c <HAL_RCCEx_DisableLSECSS+0x2c>)
 800c95a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c95e:	6193      	str	r3, [r2, #24]
}
 800c960:	bf00      	nop
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	40021000 	.word	0x40021000

0800c970 <HAL_RCCEx_EnableLSECSS_IT>:
  * @brief  Enable the LSE Clock Security System Interrupt & corresponding EXTI line.
  * @note   LSE Clock Security System Interrupt is mapped on RTC EXTI line 19
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS_IT(void)
{
 800c970:	b480      	push	{r7}
 800c972:	af00      	add	r7, sp, #0
  /* Enable LSE CSS */
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800c974:	4b0f      	ldr	r3, [pc, #60]	; (800c9b4 <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 800c976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c97a:	4a0e      	ldr	r2, [pc, #56]	; (800c9b4 <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 800c97c:	f043 0320 	orr.w	r3, r3, #32
 800c980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Enable LSE CSS IT */
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
 800c984:	4b0b      	ldr	r3, [pc, #44]	; (800c9b4 <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 800c986:	699b      	ldr	r3, [r3, #24]
 800c988:	4a0a      	ldr	r2, [pc, #40]	; (800c9b4 <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 800c98a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c98e:	6193      	str	r3, [r2, #24]

  /* Enable IT on EXTI Line 19 */
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
 800c990:	4b09      	ldr	r3, [pc, #36]	; (800c9b8 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a08      	ldr	r2, [pc, #32]	; (800c9b8 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 800c996:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c99a:	6013      	str	r3, [r2, #0]
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
 800c99c:	4b06      	ldr	r3, [pc, #24]	; (800c9b8 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	4a05      	ldr	r2, [pc, #20]	; (800c9b8 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 800c9a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9a6:	6093      	str	r3, [r2, #8]
}
 800c9a8:	bf00      	nop
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	40021000 	.word	0x40021000
 800c9b8:	40010400 	.word	0x40010400

0800c9bc <HAL_RCCEx_LSECSS_IRQHandler>:
/**
  * @brief Handle the RCC LSE Clock Security System interrupt request.
  * @retval None
  */
void HAL_RCCEx_LSECSS_IRQHandler(void)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	af00      	add	r7, sp, #0
  /* Check RCC LSE CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_LSECSS))
 800c9c0:	4b07      	ldr	r3, [pc, #28]	; (800c9e0 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
 800c9c2:	69db      	ldr	r3, [r3, #28]
 800c9c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c9c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9cc:	d105      	bne.n	800c9da <HAL_RCCEx_LSECSS_IRQHandler+0x1e>
  {
    /* RCC LSE Clock Security System interrupt user callback */
    HAL_RCCEx_LSECSS_Callback();
 800c9ce:	f000 f809 	bl	800c9e4 <HAL_RCCEx_LSECSS_Callback>

    /* Clear RCC LSE CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
 800c9d2:	4b03      	ldr	r3, [pc, #12]	; (800c9e0 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
 800c9d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9d8:	621a      	str	r2, [r3, #32]
  }
}
 800c9da:	bf00      	nop
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	40021000 	.word	0x40021000

0800c9e4 <HAL_RCCEx_LSECSS_Callback>:
/**
  * @brief  RCCEx LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_LSECSS_Callback(void)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_LSECSS_Callback should be implemented in the user file
   */
}
 800c9e8:	bf00      	nop
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
	...

0800c9f4 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b08a      	sub	sp, #40	; 0x28
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  FlagStatus       backupchanged = RESET;
 800ca02:	2300      	movs	r3, #0
 800ca04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  __LSCO_CLK_ENABLE();
 800ca08:	4b2d      	ldr	r3, [pc, #180]	; (800cac0 <HAL_RCCEx_EnableLSCO+0xcc>)
 800ca0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca0c:	4a2c      	ldr	r2, [pc, #176]	; (800cac0 <HAL_RCCEx_EnableLSCO+0xcc>)
 800ca0e:	f043 0301 	orr.w	r3, r3, #1
 800ca12:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ca14:	4b2a      	ldr	r3, [pc, #168]	; (800cac0 <HAL_RCCEx_EnableLSCO+0xcc>)
 800ca16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	60fb      	str	r3, [r7, #12]
 800ca1e:	68fb      	ldr	r3, [r7, #12]

  /* Configue the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 800ca20:	2304      	movs	r3, #4
 800ca22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ca24:	2303      	movs	r3, #3
 800ca26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ca28:	2302      	movs	r3, #2
 800ca2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 800ca30:	f107 0310 	add.w	r3, r7, #16
 800ca34:	4619      	mov	r1, r3
 800ca36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ca3a:	f7f7 fb31 	bl	80040a0 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ca3e:	4b20      	ldr	r3, [pc, #128]	; (800cac0 <HAL_RCCEx_EnableLSCO+0xcc>)
 800ca40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10e      	bne.n	800ca68 <HAL_RCCEx_EnableLSCO+0x74>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ca4a:	4b1d      	ldr	r3, [pc, #116]	; (800cac0 <HAL_RCCEx_EnableLSCO+0xcc>)
 800ca4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca4e:	4a1c      	ldr	r2, [pc, #112]	; (800cac0 <HAL_RCCEx_EnableLSCO+0xcc>)
 800ca50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca54:	6593      	str	r3, [r2, #88]	; 0x58
 800ca56:	4b1a      	ldr	r3, [pc, #104]	; (800cac0 <HAL_RCCEx_EnableLSCO+0xcc>)
 800ca58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca5e:	60bb      	str	r3, [r7, #8]
 800ca60:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 800ca62:	2301      	movs	r3, #1
 800ca64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ca68:	4b16      	ldr	r3, [pc, #88]	; (800cac4 <HAL_RCCEx_EnableLSCO+0xd0>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d104      	bne.n	800ca7e <HAL_RCCEx_EnableLSCO+0x8a>
  {
    HAL_PWR_EnableBkUpAccess();
 800ca74:	f7fc fcc2 	bl	80093fc <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800ca7e:	4b10      	ldr	r3, [pc, #64]	; (800cac0 <HAL_RCCEx_EnableLSCO+0xcc>)
 800ca80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca84:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	4a0c      	ldr	r2, [pc, #48]	; (800cac0 <HAL_RCCEx_EnableLSCO+0xcc>)
 800ca8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ca92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  if(backupchanged == SET)
 800ca96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d101      	bne.n	800caa2 <HAL_RCCEx_EnableLSCO+0xae>
  {
    HAL_PWR_DisableBkUpAccess();
 800ca9e:	f7fc fcbd 	bl	800941c <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 800caa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d105      	bne.n	800cab6 <HAL_RCCEx_EnableLSCO+0xc2>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 800caaa:	4b05      	ldr	r3, [pc, #20]	; (800cac0 <HAL_RCCEx_EnableLSCO+0xcc>)
 800caac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caae:	4a04      	ldr	r2, [pc, #16]	; (800cac0 <HAL_RCCEx_EnableLSCO+0xcc>)
 800cab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cab4:	6593      	str	r3, [r2, #88]	; 0x58
  }
}
 800cab6:	bf00      	nop
 800cab8:	3728      	adds	r7, #40	; 0x28
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	40021000 	.word	0x40021000
 800cac4:	40007000 	.word	0x40007000

0800cac8 <HAL_RCCEx_DisableLSCO>:
/**
  * @brief  Disable the Low Speed clock output.
  * @retval None
  */
void HAL_RCCEx_DisableLSCO(void)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
  FlagStatus       pwrclkchanged = RESET;
 800cace:	2300      	movs	r3, #0
 800cad0:	71fb      	strb	r3, [r7, #7]
  FlagStatus       backupchanged = RESET;
 800cad2:	2300      	movs	r3, #0
 800cad4:	71bb      	strb	r3, [r7, #6]

  /* Update LSCOEN bit in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cad6:	4b1c      	ldr	r3, [pc, #112]	; (800cb48 <HAL_RCCEx_DisableLSCO+0x80>)
 800cad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d10d      	bne.n	800cafe <HAL_RCCEx_DisableLSCO+0x36>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cae2:	4b19      	ldr	r3, [pc, #100]	; (800cb48 <HAL_RCCEx_DisableLSCO+0x80>)
 800cae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cae6:	4a18      	ldr	r2, [pc, #96]	; (800cb48 <HAL_RCCEx_DisableLSCO+0x80>)
 800cae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800caec:	6593      	str	r3, [r2, #88]	; 0x58
 800caee:	4b16      	ldr	r3, [pc, #88]	; (800cb48 <HAL_RCCEx_DisableLSCO+0x80>)
 800caf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800caf6:	603b      	str	r3, [r7, #0]
 800caf8:	683b      	ldr	r3, [r7, #0]
    pwrclkchanged = SET;
 800cafa:	2301      	movs	r3, #1
 800cafc:	71fb      	strb	r3, [r7, #7]
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cafe:	4b13      	ldr	r3, [pc, #76]	; (800cb4c <HAL_RCCEx_DisableLSCO+0x84>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d103      	bne.n	800cb12 <HAL_RCCEx_DisableLSCO+0x4a>
  {
    /* Enable access to the backup domain */
    HAL_PWR_EnableBkUpAccess();
 800cb0a:	f7fc fc77 	bl	80093fc <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	71bb      	strb	r3, [r7, #6]
  }

  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSCOEN);
 800cb12:	4b0d      	ldr	r3, [pc, #52]	; (800cb48 <HAL_RCCEx_DisableLSCO+0x80>)
 800cb14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb18:	4a0b      	ldr	r2, [pc, #44]	; (800cb48 <HAL_RCCEx_DisableLSCO+0x80>)
 800cb1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Restore previous configuration */
  if(backupchanged == SET)
 800cb22:	79bb      	ldrb	r3, [r7, #6]
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d101      	bne.n	800cb2c <HAL_RCCEx_DisableLSCO+0x64>
  {
    /* Disable access to the backup domain */
    HAL_PWR_DisableBkUpAccess();
 800cb28:	f7fc fc78 	bl	800941c <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 800cb2c:	79fb      	ldrb	r3, [r7, #7]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d105      	bne.n	800cb3e <HAL_RCCEx_DisableLSCO+0x76>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 800cb32:	4b05      	ldr	r3, [pc, #20]	; (800cb48 <HAL_RCCEx_DisableLSCO+0x80>)
 800cb34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb36:	4a04      	ldr	r2, [pc, #16]	; (800cb48 <HAL_RCCEx_DisableLSCO+0x80>)
 800cb38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
}
 800cb3e:	bf00      	nop
 800cb40:	3708      	adds	r7, #8
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	40021000 	.word	0x40021000
 800cb4c:	40007000 	.word	0x40007000

0800cb50 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800cb50:	b480      	push	{r7}
 800cb52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800cb54:	4b05      	ldr	r3, [pc, #20]	; (800cb6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a04      	ldr	r2, [pc, #16]	; (800cb6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800cb5a:	f043 0304 	orr.w	r3, r3, #4
 800cb5e:	6013      	str	r3, [r2, #0]
}
 800cb60:	bf00      	nop
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop
 800cb6c:	40021000 	.word	0x40021000

0800cb70 <HAL_RCCEx_DisableMSIPLLMode>:
  * @brief  Disable the PLL-mode of the MSI.
  * @note   PLL-mode of the MSI is automatically reset when LSE oscillator is disabled.
  * @retval None
  */
void HAL_RCCEx_DisableMSIPLLMode(void)
{
 800cb70:	b480      	push	{r7}
 800cb72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800cb74:	4b05      	ldr	r3, [pc, #20]	; (800cb8c <HAL_RCCEx_DisableMSIPLLMode+0x1c>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a04      	ldr	r2, [pc, #16]	; (800cb8c <HAL_RCCEx_DisableMSIPLLMode+0x1c>)
 800cb7a:	f023 0304 	bic.w	r3, r3, #4
 800cb7e:	6013      	str	r3, [r2, #0]
}
 800cb80:	bf00      	nop
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop
 800cb8c:	40021000 	.word	0x40021000

0800cb90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cb9e:	4b75      	ldr	r3, [pc, #468]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	f003 0303 	and.w	r3, r3, #3
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d018      	beq.n	800cbdc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800cbaa:	4b72      	ldr	r3, [pc, #456]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	f003 0203 	and.w	r2, r3, #3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d10d      	bne.n	800cbd6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
       ||
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d009      	beq.n	800cbd6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800cbc2:	4b6c      	ldr	r3, [pc, #432]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	091b      	lsrs	r3, r3, #4
 800cbc8:	f003 0307 	and.w	r3, r3, #7
 800cbcc:	1c5a      	adds	r2, r3, #1
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	685b      	ldr	r3, [r3, #4]
       ||
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d047      	beq.n	800cc66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	73fb      	strb	r3, [r7, #15]
 800cbda:	e044      	b.n	800cc66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	2b03      	cmp	r3, #3
 800cbe2:	d018      	beq.n	800cc16 <RCCEx_PLLSAI1_Config+0x86>
 800cbe4:	2b03      	cmp	r3, #3
 800cbe6:	d825      	bhi.n	800cc34 <RCCEx_PLLSAI1_Config+0xa4>
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d002      	beq.n	800cbf2 <RCCEx_PLLSAI1_Config+0x62>
 800cbec:	2b02      	cmp	r3, #2
 800cbee:	d009      	beq.n	800cc04 <RCCEx_PLLSAI1_Config+0x74>
 800cbf0:	e020      	b.n	800cc34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cbf2:	4b60      	ldr	r3, [pc, #384]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f003 0302 	and.w	r3, r3, #2
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d11d      	bne.n	800cc3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc02:	e01a      	b.n	800cc3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cc04:	4b5b      	ldr	r3, [pc, #364]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d116      	bne.n	800cc3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800cc10:	2301      	movs	r3, #1
 800cc12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc14:	e013      	b.n	800cc3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cc16:	4b57      	ldr	r3, [pc, #348]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d10f      	bne.n	800cc42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cc22:	4b54      	ldr	r3, [pc, #336]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d109      	bne.n	800cc42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cc32:	e006      	b.n	800cc42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800cc34:	2301      	movs	r3, #1
 800cc36:	73fb      	strb	r3, [r7, #15]
      break;
 800cc38:	e004      	b.n	800cc44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cc3a:	bf00      	nop
 800cc3c:	e002      	b.n	800cc44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cc3e:	bf00      	nop
 800cc40:	e000      	b.n	800cc44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cc42:	bf00      	nop
    }

    if(status == HAL_OK)
 800cc44:	7bfb      	ldrb	r3, [r7, #15]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d10d      	bne.n	800cc66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800cc4a:	4b4a      	ldr	r3, [pc, #296]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6819      	ldr	r1, [r3, #0]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	011b      	lsls	r3, r3, #4
 800cc5e:	430b      	orrs	r3, r1
 800cc60:	4944      	ldr	r1, [pc, #272]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc62:	4313      	orrs	r3, r2
 800cc64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800cc66:	7bfb      	ldrb	r3, [r7, #15]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d17d      	bne.n	800cd68 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800cc6c:	4b41      	ldr	r3, [pc, #260]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a40      	ldr	r2, [pc, #256]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc78:	f7f4 fcea 	bl	8001650 <HAL_GetTick>
 800cc7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cc7e:	e009      	b.n	800cc94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cc80:	f7f4 fce6 	bl	8001650 <HAL_GetTick>
 800cc84:	4602      	mov	r2, r0
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	1ad3      	subs	r3, r2, r3
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d902      	bls.n	800cc94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800cc8e:	2303      	movs	r3, #3
 800cc90:	73fb      	strb	r3, [r7, #15]
        break;
 800cc92:	e005      	b.n	800cca0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cc94:	4b37      	ldr	r3, [pc, #220]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1ef      	bne.n	800cc80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800cca0:	7bfb      	ldrb	r3, [r7, #15]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d160      	bne.n	800cd68 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d111      	bne.n	800ccd0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ccac:	4b31      	ldr	r3, [pc, #196]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ccae:	691b      	ldr	r3, [r3, #16]
 800ccb0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800ccb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccb8:	687a      	ldr	r2, [r7, #4]
 800ccba:	6892      	ldr	r2, [r2, #8]
 800ccbc:	0211      	lsls	r1, r2, #8
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	68d2      	ldr	r2, [r2, #12]
 800ccc2:	0912      	lsrs	r2, r2, #4
 800ccc4:	0452      	lsls	r2, r2, #17
 800ccc6:	430a      	orrs	r2, r1
 800ccc8:	492a      	ldr	r1, [pc, #168]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ccca:	4313      	orrs	r3, r2
 800cccc:	610b      	str	r3, [r1, #16]
 800ccce:	e027      	b.n	800cd20 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d112      	bne.n	800ccfc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ccd6:	4b27      	ldr	r3, [pc, #156]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800ccde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	6892      	ldr	r2, [r2, #8]
 800cce6:	0211      	lsls	r1, r2, #8
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	6912      	ldr	r2, [r2, #16]
 800ccec:	0852      	lsrs	r2, r2, #1
 800ccee:	3a01      	subs	r2, #1
 800ccf0:	0552      	lsls	r2, r2, #21
 800ccf2:	430a      	orrs	r2, r1
 800ccf4:	491f      	ldr	r1, [pc, #124]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	610b      	str	r3, [r1, #16]
 800ccfa:	e011      	b.n	800cd20 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ccfc:	4b1d      	ldr	r3, [pc, #116]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800cd04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	6892      	ldr	r2, [r2, #8]
 800cd0c:	0211      	lsls	r1, r2, #8
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	6952      	ldr	r2, [r2, #20]
 800cd12:	0852      	lsrs	r2, r2, #1
 800cd14:	3a01      	subs	r2, #1
 800cd16:	0652      	lsls	r2, r2, #25
 800cd18:	430a      	orrs	r2, r1
 800cd1a:	4916      	ldr	r1, [pc, #88]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800cd20:	4b14      	ldr	r3, [pc, #80]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a13      	ldr	r2, [pc, #76]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cd26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd2c:	f7f4 fc90 	bl	8001650 <HAL_GetTick>
 800cd30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cd32:	e009      	b.n	800cd48 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cd34:	f7f4 fc8c 	bl	8001650 <HAL_GetTick>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	1ad3      	subs	r3, r2, r3
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d902      	bls.n	800cd48 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800cd42:	2303      	movs	r3, #3
 800cd44:	73fb      	strb	r3, [r7, #15]
          break;
 800cd46:	e005      	b.n	800cd54 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cd48:	4b0a      	ldr	r3, [pc, #40]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d0ef      	beq.n	800cd34 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800cd54:	7bfb      	ldrb	r3, [r7, #15]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d106      	bne.n	800cd68 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cd5a:	4b06      	ldr	r3, [pc, #24]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cd5c:	691a      	ldr	r2, [r3, #16]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	699b      	ldr	r3, [r3, #24]
 800cd62:	4904      	ldr	r1, [pc, #16]	; (800cd74 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cd64:	4313      	orrs	r3, r2
 800cd66:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3710      	adds	r7, #16
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	40021000 	.word	0x40021000

0800cd78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd82:	2300      	movs	r3, #0
 800cd84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cd86:	4b6a      	ldr	r3, [pc, #424]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	f003 0303 	and.w	r3, r3, #3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d018      	beq.n	800cdc4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800cd92:	4b67      	ldr	r3, [pc, #412]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	f003 0203 	and.w	r2, r3, #3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d10d      	bne.n	800cdbe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
       ||
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d009      	beq.n	800cdbe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800cdaa:	4b61      	ldr	r3, [pc, #388]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	091b      	lsrs	r3, r3, #4
 800cdb0:	f003 0307 	and.w	r3, r3, #7
 800cdb4:	1c5a      	adds	r2, r3, #1
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	685b      	ldr	r3, [r3, #4]
       ||
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d047      	beq.n	800ce4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	73fb      	strb	r3, [r7, #15]
 800cdc2:	e044      	b.n	800ce4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b03      	cmp	r3, #3
 800cdca:	d018      	beq.n	800cdfe <RCCEx_PLLSAI2_Config+0x86>
 800cdcc:	2b03      	cmp	r3, #3
 800cdce:	d825      	bhi.n	800ce1c <RCCEx_PLLSAI2_Config+0xa4>
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d002      	beq.n	800cdda <RCCEx_PLLSAI2_Config+0x62>
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	d009      	beq.n	800cdec <RCCEx_PLLSAI2_Config+0x74>
 800cdd8:	e020      	b.n	800ce1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cdda:	4b55      	ldr	r3, [pc, #340]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f003 0302 	and.w	r3, r3, #2
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d11d      	bne.n	800ce22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800cde6:	2301      	movs	r3, #1
 800cde8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cdea:	e01a      	b.n	800ce22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cdec:	4b50      	ldr	r3, [pc, #320]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d116      	bne.n	800ce26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cdfc:	e013      	b.n	800ce26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cdfe:	4b4c      	ldr	r3, [pc, #304]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d10f      	bne.n	800ce2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ce0a:	4b49      	ldr	r3, [pc, #292]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d109      	bne.n	800ce2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800ce16:	2301      	movs	r3, #1
 800ce18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ce1a:	e006      	b.n	800ce2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ce20:	e004      	b.n	800ce2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ce22:	bf00      	nop
 800ce24:	e002      	b.n	800ce2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ce26:	bf00      	nop
 800ce28:	e000      	b.n	800ce2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ce2a:	bf00      	nop
    }

    if(status == HAL_OK)
 800ce2c:	7bfb      	ldrb	r3, [r7, #15]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d10d      	bne.n	800ce4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ce32:	4b3f      	ldr	r3, [pc, #252]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6819      	ldr	r1, [r3, #0]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	3b01      	subs	r3, #1
 800ce44:	011b      	lsls	r3, r3, #4
 800ce46:	430b      	orrs	r3, r1
 800ce48:	4939      	ldr	r1, [pc, #228]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ce4e:	7bfb      	ldrb	r3, [r7, #15]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d167      	bne.n	800cf24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800ce54:	4b36      	ldr	r3, [pc, #216]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a35      	ldr	r2, [pc, #212]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce60:	f7f4 fbf6 	bl	8001650 <HAL_GetTick>
 800ce64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ce66:	e009      	b.n	800ce7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ce68:	f7f4 fbf2 	bl	8001650 <HAL_GetTick>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	2b02      	cmp	r3, #2
 800ce74:	d902      	bls.n	800ce7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ce76:	2303      	movs	r3, #3
 800ce78:	73fb      	strb	r3, [r7, #15]
        break;
 800ce7a:	e005      	b.n	800ce88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ce7c:	4b2c      	ldr	r3, [pc, #176]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d1ef      	bne.n	800ce68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ce88:	7bfb      	ldrb	r3, [r7, #15]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d14a      	bne.n	800cf24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d111      	bne.n	800ceb8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ce94:	4b26      	ldr	r3, [pc, #152]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce96:	695b      	ldr	r3, [r3, #20]
 800ce98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800ce9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	6892      	ldr	r2, [r2, #8]
 800cea4:	0211      	lsls	r1, r2, #8
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	68d2      	ldr	r2, [r2, #12]
 800ceaa:	0912      	lsrs	r2, r2, #4
 800ceac:	0452      	lsls	r2, r2, #17
 800ceae:	430a      	orrs	r2, r1
 800ceb0:	491f      	ldr	r1, [pc, #124]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	614b      	str	r3, [r1, #20]
 800ceb6:	e011      	b.n	800cedc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ceb8:	4b1d      	ldr	r3, [pc, #116]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ceba:	695b      	ldr	r3, [r3, #20]
 800cebc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800cec0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	6892      	ldr	r2, [r2, #8]
 800cec8:	0211      	lsls	r1, r2, #8
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	6912      	ldr	r2, [r2, #16]
 800cece:	0852      	lsrs	r2, r2, #1
 800ced0:	3a01      	subs	r2, #1
 800ced2:	0652      	lsls	r2, r2, #25
 800ced4:	430a      	orrs	r2, r1
 800ced6:	4916      	ldr	r1, [pc, #88]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ced8:	4313      	orrs	r3, r2
 800ceda:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800cedc:	4b14      	ldr	r3, [pc, #80]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4a13      	ldr	r2, [pc, #76]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cee6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cee8:	f7f4 fbb2 	bl	8001650 <HAL_GetTick>
 800ceec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ceee:	e009      	b.n	800cf04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800cef0:	f7f4 fbae 	bl	8001650 <HAL_GetTick>
 800cef4:	4602      	mov	r2, r0
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	2b02      	cmp	r3, #2
 800cefc:	d902      	bls.n	800cf04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800cefe:	2303      	movs	r3, #3
 800cf00:	73fb      	strb	r3, [r7, #15]
          break;
 800cf02:	e005      	b.n	800cf10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800cf04:	4b0a      	ldr	r3, [pc, #40]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d0ef      	beq.n	800cef0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800cf10:	7bfb      	ldrb	r3, [r7, #15]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d106      	bne.n	800cf24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800cf16:	4b06      	ldr	r3, [pc, #24]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cf18:	695a      	ldr	r2, [r3, #20]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	695b      	ldr	r3, [r3, #20]
 800cf1e:	4904      	ldr	r1, [pc, #16]	; (800cf30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cf20:	4313      	orrs	r3, r2
 800cf22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800cf24:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3710      	adds	r7, #16
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	40021000 	.word	0x40021000

0800cf34 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b089      	sub	sp, #36	; 0x24
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800cf42:	2300      	movs	r3, #0
 800cf44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800cf46:	2300      	movs	r3, #0
 800cf48:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf50:	d10c      	bne.n	800cf6c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800cf52:	4b6e      	ldr	r3, [pc, #440]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800cf54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf58:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800cf5c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cf64:	d112      	bne.n	800cf8c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cf66:	4b6a      	ldr	r3, [pc, #424]	; (800d110 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800cf68:	61fb      	str	r3, [r7, #28]
 800cf6a:	e00f      	b.n	800cf8c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf72:	d10b      	bne.n	800cf8c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800cf74:	4b65      	ldr	r3, [pc, #404]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800cf76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf7a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800cf7e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf86:	d101      	bne.n	800cf8c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800cf88:	4b61      	ldr	r3, [pc, #388]	; (800d110 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800cf8a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f040 80b4 	bne.w	800d0fc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cf9e:	d003      	beq.n	800cfa8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cfa6:	d135      	bne.n	800d014 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800cfa8:	4b58      	ldr	r3, [pc, #352]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cfb4:	f040 80a1 	bne.w	800d0fa <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800cfb8:	4b54      	ldr	r3, [pc, #336]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f000 809a 	beq.w	800d0fa <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800cfc6:	4b51      	ldr	r3, [pc, #324]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	091b      	lsrs	r3, r3, #4
 800cfcc:	f003 0307 	and.w	r3, r3, #7
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	693a      	ldr	r2, [r7, #16]
 800cfd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfd8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800cfda:	4b4c      	ldr	r3, [pc, #304]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800cfdc:	68db      	ldr	r3, [r3, #12]
 800cfde:	0a1b      	lsrs	r3, r3, #8
 800cfe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfe4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10a      	bne.n	800d002 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800cfec:	4b47      	ldr	r3, [pc, #284]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d002      	beq.n	800cffe <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800cff8:	2311      	movs	r3, #17
 800cffa:	617b      	str	r3, [r7, #20]
 800cffc:	e001      	b.n	800d002 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800cffe:	2307      	movs	r3, #7
 800d000:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	fb02 f203 	mul.w	r2, r2, r3
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d010:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d012:	e072      	b.n	800d0fa <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d133      	bne.n	800d082 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800d01a:	4b3c      	ldr	r3, [pc, #240]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d026:	d169      	bne.n	800d0fc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800d028:	4b38      	ldr	r3, [pc, #224]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800d02a:	691b      	ldr	r3, [r3, #16]
 800d02c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d030:	2b00      	cmp	r3, #0
 800d032:	d063      	beq.n	800d0fc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d034:	4b35      	ldr	r3, [pc, #212]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	091b      	lsrs	r3, r3, #4
 800d03a:	f003 0307 	and.w	r3, r3, #7
 800d03e:	3301      	adds	r3, #1
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	fbb2 f3f3 	udiv	r3, r2, r3
 800d046:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800d048:	4b30      	ldr	r3, [pc, #192]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800d04a:	691b      	ldr	r3, [r3, #16]
 800d04c:	0a1b      	lsrs	r3, r3, #8
 800d04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d052:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d10a      	bne.n	800d070 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800d05a:	4b2c      	ldr	r3, [pc, #176]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800d05c:	691b      	ldr	r3, [r3, #16]
 800d05e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d062:	2b00      	cmp	r3, #0
 800d064:	d002      	beq.n	800d06c <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800d066:	2311      	movs	r3, #17
 800d068:	617b      	str	r3, [r7, #20]
 800d06a:	e001      	b.n	800d070 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 800d06c:	2307      	movs	r3, #7
 800d06e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	68fa      	ldr	r2, [r7, #12]
 800d074:	fb02 f203 	mul.w	r2, r2, r3
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d07e:	61fb      	str	r3, [r7, #28]
 800d080:	e03c      	b.n	800d0fc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d088:	d003      	beq.n	800d092 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d090:	d134      	bne.n	800d0fc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800d092:	4b1e      	ldr	r3, [pc, #120]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d09a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d09e:	d12d      	bne.n	800d0fc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800d0a0:	4b1a      	ldr	r3, [pc, #104]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800d0a2:	695b      	ldr	r3, [r3, #20]
 800d0a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d027      	beq.n	800d0fc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d0ac:	4b17      	ldr	r3, [pc, #92]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	091b      	lsrs	r3, r3, #4
 800d0b2:	f003 0307 	and.w	r3, r3, #7
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	693a      	ldr	r2, [r7, #16]
 800d0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0be:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800d0c0:	4b12      	ldr	r3, [pc, #72]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800d0c2:	695b      	ldr	r3, [r3, #20]
 800d0c4:	0a1b      	lsrs	r3, r3, #8
 800d0c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0ca:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10a      	bne.n	800d0e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800d0d2:	4b0e      	ldr	r3, [pc, #56]	; (800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800d0d4:	695b      	ldr	r3, [r3, #20]
 800d0d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d002      	beq.n	800d0e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800d0de:	2311      	movs	r3, #17
 800d0e0:	617b      	str	r3, [r7, #20]
 800d0e2:	e001      	b.n	800d0e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800d0e4:	2307      	movs	r3, #7
 800d0e6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	fb02 f203 	mul.w	r2, r2, r3
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0f6:	61fb      	str	r3, [r7, #28]
 800d0f8:	e000      	b.n	800d0fc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d0fa:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800d0fc:	69fb      	ldr	r3, [r7, #28]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3724      	adds	r7, #36	; 0x24
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop
 800d10c:	40021000 	.word	0x40021000
 800d110:	001fff68 	.word	0x001fff68

0800d114 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d101      	bne.n	800d126 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d122:	2301      	movs	r3, #1
 800d124:	e095      	b.n	800d252 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d108      	bne.n	800d140 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d136:	d009      	beq.n	800d14c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	61da      	str	r2, [r3, #28]
 800d13e:	e005      	b.n	800d14c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2200      	movs	r2, #0
 800d144:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2200      	movs	r2, #0
 800d14a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d106      	bne.n	800d16c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2200      	movs	r2, #0
 800d162:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7f3 fe14 	bl	8000d94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2202      	movs	r2, #2
 800d170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d182:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d18c:	d902      	bls.n	800d194 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d18e:	2300      	movs	r3, #0
 800d190:	60fb      	str	r3, [r7, #12]
 800d192:	e002      	b.n	800d19a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d198:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d1a2:	d007      	beq.n	800d1b4 <HAL_SPI_Init+0xa0>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d1ac:	d002      	beq.n	800d1b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d1c4:	431a      	orrs	r2, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	691b      	ldr	r3, [r3, #16]
 800d1ca:	f003 0302 	and.w	r3, r3, #2
 800d1ce:	431a      	orrs	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	695b      	ldr	r3, [r3, #20]
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	431a      	orrs	r2, r3
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d1e2:	431a      	orrs	r2, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	69db      	ldr	r3, [r3, #28]
 800d1e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d1ec:	431a      	orrs	r2, r3
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6a1b      	ldr	r3, [r3, #32]
 800d1f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1f6:	ea42 0103 	orr.w	r1, r2, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	430a      	orrs	r2, r1
 800d208:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	699b      	ldr	r3, [r3, #24]
 800d20e:	0c1b      	lsrs	r3, r3, #16
 800d210:	f003 0204 	and.w	r2, r3, #4
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d218:	f003 0310 	and.w	r3, r3, #16
 800d21c:	431a      	orrs	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d222:	f003 0308 	and.w	r3, r3, #8
 800d226:	431a      	orrs	r2, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d230:	ea42 0103 	orr.w	r1, r2, r3
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	430a      	orrs	r2, r1
 800d240:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2200      	movs	r2, #0
 800d246:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2201      	movs	r2, #1
 800d24c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d250:	2300      	movs	r3, #0
}
 800d252:	4618      	mov	r0, r3
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b082      	sub	sp, #8
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d101      	bne.n	800d26c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800d268:	2301      	movs	r3, #1
 800d26a:	e01a      	b.n	800d2a2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2202      	movs	r2, #2
 800d270:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d282:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f7f3 fde7 	bl	8000e58 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800d2a0:	2300      	movs	r3, #0
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800d2aa:	b480      	push	{r7}
 800d2ac:	b083      	sub	sp, #12
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800d2b2:	bf00      	nop
 800d2b4:	370c      	adds	r7, #12
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800d2be:	b480      	push	{r7}
 800d2c0:	b083      	sub	sp, #12
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800d2c6:	bf00      	nop
 800d2c8:	370c      	adds	r7, #12
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr

0800d2d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b088      	sub	sp, #32
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	60f8      	str	r0, [r7, #12]
 800d2da:	60b9      	str	r1, [r7, #8]
 800d2dc:	603b      	str	r3, [r7, #0]
 800d2de:	4613      	mov	r3, r2
 800d2e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d101      	bne.n	800d2f4 <HAL_SPI_Transmit+0x22>
 800d2f0:	2302      	movs	r3, #2
 800d2f2:	e158      	b.n	800d5a6 <HAL_SPI_Transmit+0x2d4>
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d2fc:	f7f4 f9a8 	bl	8001650 <HAL_GetTick>
 800d300:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d302:	88fb      	ldrh	r3, [r7, #6]
 800d304:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d30c:	b2db      	uxtb	r3, r3
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d002      	beq.n	800d318 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d312:	2302      	movs	r3, #2
 800d314:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d316:	e13d      	b.n	800d594 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d002      	beq.n	800d324 <HAL_SPI_Transmit+0x52>
 800d31e:	88fb      	ldrh	r3, [r7, #6]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d102      	bne.n	800d32a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d324:	2301      	movs	r3, #1
 800d326:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d328:	e134      	b.n	800d594 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2203      	movs	r2, #3
 800d32e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2200      	movs	r2, #0
 800d336:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	68ba      	ldr	r2, [r7, #8]
 800d33c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	88fa      	ldrh	r2, [r7, #6]
 800d342:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	88fa      	ldrh	r2, [r7, #6]
 800d348:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2200      	movs	r2, #0
 800d34e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2200      	movs	r2, #0
 800d354:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2200      	movs	r2, #0
 800d35c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2200      	movs	r2, #0
 800d364:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2200      	movs	r2, #0
 800d36a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d374:	d10f      	bne.n	800d396 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d384:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d394:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3a0:	2b40      	cmp	r3, #64	; 0x40
 800d3a2:	d007      	beq.n	800d3b4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d3bc:	d94b      	bls.n	800d456 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d002      	beq.n	800d3cc <HAL_SPI_Transmit+0xfa>
 800d3c6:	8afb      	ldrh	r3, [r7, #22]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d13e      	bne.n	800d44a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d0:	881a      	ldrh	r2, [r3, #0]
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3dc:	1c9a      	adds	r2, r3, #2
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	3b01      	subs	r3, #1
 800d3ea:	b29a      	uxth	r2, r3
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d3f0:	e02b      	b.n	800d44a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	689b      	ldr	r3, [r3, #8]
 800d3f8:	f003 0302 	and.w	r3, r3, #2
 800d3fc:	2b02      	cmp	r3, #2
 800d3fe:	d112      	bne.n	800d426 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d404:	881a      	ldrh	r2, [r3, #0]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d410:	1c9a      	adds	r2, r3, #2
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	3b01      	subs	r3, #1
 800d41e:	b29a      	uxth	r2, r3
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d424:	e011      	b.n	800d44a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d426:	f7f4 f913 	bl	8001650 <HAL_GetTick>
 800d42a:	4602      	mov	r2, r0
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	1ad3      	subs	r3, r2, r3
 800d430:	683a      	ldr	r2, [r7, #0]
 800d432:	429a      	cmp	r2, r3
 800d434:	d803      	bhi.n	800d43e <HAL_SPI_Transmit+0x16c>
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d43c:	d102      	bne.n	800d444 <HAL_SPI_Transmit+0x172>
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d102      	bne.n	800d44a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800d444:	2303      	movs	r3, #3
 800d446:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d448:	e0a4      	b.n	800d594 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d44e:	b29b      	uxth	r3, r3
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1ce      	bne.n	800d3f2 <HAL_SPI_Transmit+0x120>
 800d454:	e07c      	b.n	800d550 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d002      	beq.n	800d464 <HAL_SPI_Transmit+0x192>
 800d45e:	8afb      	ldrh	r3, [r7, #22]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d170      	bne.n	800d546 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d468:	b29b      	uxth	r3, r3
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d912      	bls.n	800d494 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d472:	881a      	ldrh	r2, [r3, #0]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d47e:	1c9a      	adds	r2, r3, #2
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d488:	b29b      	uxth	r3, r3
 800d48a:	3b02      	subs	r3, #2
 800d48c:	b29a      	uxth	r2, r3
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d492:	e058      	b.n	800d546 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	330c      	adds	r3, #12
 800d49e:	7812      	ldrb	r2, [r2, #0]
 800d4a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a6:	1c5a      	adds	r2, r3, #1
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4b0:	b29b      	uxth	r3, r3
 800d4b2:	3b01      	subs	r3, #1
 800d4b4:	b29a      	uxth	r2, r3
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d4ba:	e044      	b.n	800d546 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	f003 0302 	and.w	r3, r3, #2
 800d4c6:	2b02      	cmp	r3, #2
 800d4c8:	d12b      	bne.n	800d522 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d912      	bls.n	800d4fa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d8:	881a      	ldrh	r2, [r3, #0]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e4:	1c9a      	adds	r2, r3, #2
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	3b02      	subs	r3, #2
 800d4f2:	b29a      	uxth	r2, r3
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d4f8:	e025      	b.n	800d546 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	330c      	adds	r3, #12
 800d504:	7812      	ldrb	r2, [r2, #0]
 800d506:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d50c:	1c5a      	adds	r2, r3, #1
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d516:	b29b      	uxth	r3, r3
 800d518:	3b01      	subs	r3, #1
 800d51a:	b29a      	uxth	r2, r3
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d520:	e011      	b.n	800d546 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d522:	f7f4 f895 	bl	8001650 <HAL_GetTick>
 800d526:	4602      	mov	r2, r0
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	1ad3      	subs	r3, r2, r3
 800d52c:	683a      	ldr	r2, [r7, #0]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d803      	bhi.n	800d53a <HAL_SPI_Transmit+0x268>
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d538:	d102      	bne.n	800d540 <HAL_SPI_Transmit+0x26e>
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d102      	bne.n	800d546 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800d540:	2303      	movs	r3, #3
 800d542:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d544:	e026      	b.n	800d594 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d1b5      	bne.n	800d4bc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d550:	69ba      	ldr	r2, [r7, #24]
 800d552:	6839      	ldr	r1, [r7, #0]
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	f002 fa45 	bl	800f9e4 <SPI_EndRxTxTransaction>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d002      	beq.n	800d566 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2220      	movs	r2, #32
 800d564:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	689b      	ldr	r3, [r3, #8]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d10a      	bne.n	800d584 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d56e:	2300      	movs	r3, #0
 800d570:	613b      	str	r3, [r7, #16]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	613b      	str	r3, [r7, #16]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	613b      	str	r3, [r7, #16]
 800d582:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d002      	beq.n	800d592 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800d58c:	2301      	movs	r3, #1
 800d58e:	77fb      	strb	r3, [r7, #31]
 800d590:	e000      	b.n	800d594 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800d592:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2201      	movs	r2, #1
 800d598:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d5a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3720      	adds	r7, #32
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b088      	sub	sp, #32
 800d5b2:	af02      	add	r7, sp, #8
 800d5b4:	60f8      	str	r0, [r7, #12]
 800d5b6:	60b9      	str	r1, [r7, #8]
 800d5b8:	603b      	str	r3, [r7, #0]
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d5ca:	d112      	bne.n	800d5f2 <HAL_SPI_Receive+0x44>
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	689b      	ldr	r3, [r3, #8]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d10e      	bne.n	800d5f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2204      	movs	r2, #4
 800d5d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d5dc:	88fa      	ldrh	r2, [r7, #6]
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	9300      	str	r3, [sp, #0]
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	68b9      	ldr	r1, [r7, #8]
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f000 f910 	bl	800d80e <HAL_SPI_TransmitReceive>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	e109      	b.n	800d806 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d101      	bne.n	800d600 <HAL_SPI_Receive+0x52>
 800d5fc:	2302      	movs	r3, #2
 800d5fe:	e102      	b.n	800d806 <HAL_SPI_Receive+0x258>
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2201      	movs	r2, #1
 800d604:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d608:	f7f4 f822 	bl	8001650 <HAL_GetTick>
 800d60c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d614:	b2db      	uxtb	r3, r3
 800d616:	2b01      	cmp	r3, #1
 800d618:	d002      	beq.n	800d620 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d61a:	2302      	movs	r3, #2
 800d61c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d61e:	e0e9      	b.n	800d7f4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d002      	beq.n	800d62c <HAL_SPI_Receive+0x7e>
 800d626:	88fb      	ldrh	r3, [r7, #6]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d102      	bne.n	800d632 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d630:	e0e0      	b.n	800d7f4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2204      	movs	r2, #4
 800d636:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2200      	movs	r2, #0
 800d63e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	88fa      	ldrh	r2, [r7, #6]
 800d64a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	88fa      	ldrh	r2, [r7, #6]
 800d652:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2200      	movs	r2, #0
 800d65a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2200      	movs	r2, #0
 800d660:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	2200      	movs	r2, #0
 800d666:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2200      	movs	r2, #0
 800d66c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2200      	movs	r2, #0
 800d672:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d67c:	d908      	bls.n	800d690 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	685a      	ldr	r2, [r3, #4]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d68c:	605a      	str	r2, [r3, #4]
 800d68e:	e007      	b.n	800d6a0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	685a      	ldr	r2, [r3, #4]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d69e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6a8:	d10f      	bne.n	800d6ca <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d6c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6d4:	2b40      	cmp	r3, #64	; 0x40
 800d6d6:	d007      	beq.n	800d6e8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d6f0:	d867      	bhi.n	800d7c2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d6f2:	e030      	b.n	800d756 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	689b      	ldr	r3, [r3, #8]
 800d6fa:	f003 0301 	and.w	r3, r3, #1
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d117      	bne.n	800d732 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f103 020c 	add.w	r2, r3, #12
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d70e:	7812      	ldrb	r2, [r2, #0]
 800d710:	b2d2      	uxtb	r2, r2
 800d712:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d718:	1c5a      	adds	r2, r3, #1
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d724:	b29b      	uxth	r3, r3
 800d726:	3b01      	subs	r3, #1
 800d728:	b29a      	uxth	r2, r3
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d730:	e011      	b.n	800d756 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d732:	f7f3 ff8d 	bl	8001650 <HAL_GetTick>
 800d736:	4602      	mov	r2, r0
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	1ad3      	subs	r3, r2, r3
 800d73c:	683a      	ldr	r2, [r7, #0]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d803      	bhi.n	800d74a <HAL_SPI_Receive+0x19c>
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d748:	d102      	bne.n	800d750 <HAL_SPI_Receive+0x1a2>
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d102      	bne.n	800d756 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800d750:	2303      	movs	r3, #3
 800d752:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d754:	e04e      	b.n	800d7f4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d1c8      	bne.n	800d6f4 <HAL_SPI_Receive+0x146>
 800d762:	e034      	b.n	800d7ce <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	f003 0301 	and.w	r3, r3, #1
 800d76e:	2b01      	cmp	r3, #1
 800d770:	d115      	bne.n	800d79e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	68da      	ldr	r2, [r3, #12]
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d77c:	b292      	uxth	r2, r2
 800d77e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d784:	1c9a      	adds	r2, r3, #2
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d790:	b29b      	uxth	r3, r3
 800d792:	3b01      	subs	r3, #1
 800d794:	b29a      	uxth	r2, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d79c:	e011      	b.n	800d7c2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d79e:	f7f3 ff57 	bl	8001650 <HAL_GetTick>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	1ad3      	subs	r3, r2, r3
 800d7a8:	683a      	ldr	r2, [r7, #0]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d803      	bhi.n	800d7b6 <HAL_SPI_Receive+0x208>
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b4:	d102      	bne.n	800d7bc <HAL_SPI_Receive+0x20e>
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d102      	bne.n	800d7c2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800d7bc:	2303      	movs	r3, #3
 800d7be:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d7c0:	e018      	b.n	800d7f4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d1ca      	bne.n	800d764 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d7ce:	693a      	ldr	r2, [r7, #16]
 800d7d0:	6839      	ldr	r1, [r7, #0]
 800d7d2:	68f8      	ldr	r0, [r7, #12]
 800d7d4:	f002 f8ae 	bl	800f934 <SPI_EndRxTransaction>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d002      	beq.n	800d7e4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2220      	movs	r2, #32
 800d7e2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d002      	beq.n	800d7f2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	75fb      	strb	r3, [r7, #23]
 800d7f0:	e000      	b.n	800d7f4 <HAL_SPI_Receive+0x246>
  }

error :
 800d7f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2200      	movs	r2, #0
 800d800:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d804:	7dfb      	ldrb	r3, [r7, #23]
}
 800d806:	4618      	mov	r0, r3
 800d808:	3718      	adds	r7, #24
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b08a      	sub	sp, #40	; 0x28
 800d812:	af00      	add	r7, sp, #0
 800d814:	60f8      	str	r0, [r7, #12]
 800d816:	60b9      	str	r1, [r7, #8]
 800d818:	607a      	str	r2, [r7, #4]
 800d81a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d81c:	2301      	movs	r3, #1
 800d81e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d820:	2300      	movs	r3, #0
 800d822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d101      	bne.n	800d834 <HAL_SPI_TransmitReceive+0x26>
 800d830:	2302      	movs	r3, #2
 800d832:	e1fb      	b.n	800dc2c <HAL_SPI_TransmitReceive+0x41e>
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2201      	movs	r2, #1
 800d838:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d83c:	f7f3 ff08 	bl	8001650 <HAL_GetTick>
 800d840:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d848:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800d850:	887b      	ldrh	r3, [r7, #2]
 800d852:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800d854:	887b      	ldrh	r3, [r7, #2]
 800d856:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d858:	7efb      	ldrb	r3, [r7, #27]
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d00e      	beq.n	800d87c <HAL_SPI_TransmitReceive+0x6e>
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d864:	d106      	bne.n	800d874 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	689b      	ldr	r3, [r3, #8]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d102      	bne.n	800d874 <HAL_SPI_TransmitReceive+0x66>
 800d86e:	7efb      	ldrb	r3, [r7, #27]
 800d870:	2b04      	cmp	r3, #4
 800d872:	d003      	beq.n	800d87c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800d874:	2302      	movs	r3, #2
 800d876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800d87a:	e1cd      	b.n	800dc18 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d005      	beq.n	800d88e <HAL_SPI_TransmitReceive+0x80>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d002      	beq.n	800d88e <HAL_SPI_TransmitReceive+0x80>
 800d888:	887b      	ldrh	r3, [r7, #2]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d103      	bne.n	800d896 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800d88e:	2301      	movs	r3, #1
 800d890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800d894:	e1c0      	b.n	800dc18 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	2b04      	cmp	r3, #4
 800d8a0:	d003      	beq.n	800d8aa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2205      	movs	r2, #5
 800d8a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	887a      	ldrh	r2, [r7, #2]
 800d8ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	887a      	ldrh	r2, [r7, #2]
 800d8c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	887a      	ldrh	r2, [r7, #2]
 800d8d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	887a      	ldrh	r2, [r7, #2]
 800d8d6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	68db      	ldr	r3, [r3, #12]
 800d8e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d8ec:	d802      	bhi.n	800d8f4 <HAL_SPI_TransmitReceive+0xe6>
 800d8ee:	8a3b      	ldrh	r3, [r7, #16]
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d908      	bls.n	800d906 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	685a      	ldr	r2, [r3, #4]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d902:	605a      	str	r2, [r3, #4]
 800d904:	e007      	b.n	800d916 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	685a      	ldr	r2, [r3, #4]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d914:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d920:	2b40      	cmp	r3, #64	; 0x40
 800d922:	d007      	beq.n	800d934 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d932:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d93c:	d97c      	bls.n	800da38 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d002      	beq.n	800d94c <HAL_SPI_TransmitReceive+0x13e>
 800d946:	8a7b      	ldrh	r3, [r7, #18]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d169      	bne.n	800da20 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d950:	881a      	ldrh	r2, [r3, #0]
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d95c:	1c9a      	adds	r2, r3, #2
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d966:	b29b      	uxth	r3, r3
 800d968:	3b01      	subs	r3, #1
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d970:	e056      	b.n	800da20 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	689b      	ldr	r3, [r3, #8]
 800d978:	f003 0302 	and.w	r3, r3, #2
 800d97c:	2b02      	cmp	r3, #2
 800d97e:	d11b      	bne.n	800d9b8 <HAL_SPI_TransmitReceive+0x1aa>
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d984:	b29b      	uxth	r3, r3
 800d986:	2b00      	cmp	r3, #0
 800d988:	d016      	beq.n	800d9b8 <HAL_SPI_TransmitReceive+0x1aa>
 800d98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d113      	bne.n	800d9b8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d994:	881a      	ldrh	r2, [r3, #0]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a0:	1c9a      	adds	r2, r3, #2
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	f003 0301 	and.w	r3, r3, #1
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d11c      	bne.n	800da00 <HAL_SPI_TransmitReceive+0x1f2>
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d016      	beq.n	800da00 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	68da      	ldr	r2, [r3, #12]
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9dc:	b292      	uxth	r2, r2
 800d9de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e4:	1c9a      	adds	r2, r3, #2
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	3b01      	subs	r3, #1
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800da00:	f7f3 fe26 	bl	8001650 <HAL_GetTick>
 800da04:	4602      	mov	r2, r0
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	1ad3      	subs	r3, r2, r3
 800da0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d807      	bhi.n	800da20 <HAL_SPI_TransmitReceive+0x212>
 800da10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da16:	d003      	beq.n	800da20 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800da18:	2303      	movs	r3, #3
 800da1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800da1e:	e0fb      	b.n	800dc18 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da24:	b29b      	uxth	r3, r3
 800da26:	2b00      	cmp	r3, #0
 800da28:	d1a3      	bne.n	800d972 <HAL_SPI_TransmitReceive+0x164>
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800da30:	b29b      	uxth	r3, r3
 800da32:	2b00      	cmp	r3, #0
 800da34:	d19d      	bne.n	800d972 <HAL_SPI_TransmitReceive+0x164>
 800da36:	e0df      	b.n	800dbf8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d003      	beq.n	800da48 <HAL_SPI_TransmitReceive+0x23a>
 800da40:	8a7b      	ldrh	r3, [r7, #18]
 800da42:	2b01      	cmp	r3, #1
 800da44:	f040 80cb 	bne.w	800dbde <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d912      	bls.n	800da78 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da56:	881a      	ldrh	r2, [r3, #0]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da62:	1c9a      	adds	r2, r3, #2
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	3b02      	subs	r3, #2
 800da70:	b29a      	uxth	r2, r3
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da76:	e0b2      	b.n	800dbde <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	330c      	adds	r3, #12
 800da82:	7812      	ldrb	r2, [r2, #0]
 800da84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da8a:	1c5a      	adds	r2, r3, #1
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da94:	b29b      	uxth	r3, r3
 800da96:	3b01      	subs	r3, #1
 800da98:	b29a      	uxth	r2, r3
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800da9e:	e09e      	b.n	800dbde <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	689b      	ldr	r3, [r3, #8]
 800daa6:	f003 0302 	and.w	r3, r3, #2
 800daaa:	2b02      	cmp	r3, #2
 800daac:	d134      	bne.n	800db18 <HAL_SPI_TransmitReceive+0x30a>
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d02f      	beq.n	800db18 <HAL_SPI_TransmitReceive+0x30a>
 800dab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daba:	2b01      	cmp	r3, #1
 800dabc:	d12c      	bne.n	800db18 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d912      	bls.n	800daee <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dacc:	881a      	ldrh	r2, [r3, #0]
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad8:	1c9a      	adds	r2, r3, #2
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	3b02      	subs	r3, #2
 800dae6:	b29a      	uxth	r2, r3
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800daec:	e012      	b.n	800db14 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	330c      	adds	r3, #12
 800daf8:	7812      	ldrb	r2, [r2, #0]
 800dafa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db00:	1c5a      	adds	r2, r3, #1
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	3b01      	subs	r3, #1
 800db0e:	b29a      	uxth	r2, r3
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800db14:	2300      	movs	r3, #0
 800db16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	f003 0301 	and.w	r3, r3, #1
 800db22:	2b01      	cmp	r3, #1
 800db24:	d148      	bne.n	800dbb8 <HAL_SPI_TransmitReceive+0x3aa>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d042      	beq.n	800dbb8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db38:	b29b      	uxth	r3, r3
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d923      	bls.n	800db86 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	68da      	ldr	r2, [r3, #12]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db48:	b292      	uxth	r2, r2
 800db4a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db50:	1c9a      	adds	r2, r3, #2
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	3b02      	subs	r3, #2
 800db60:	b29a      	uxth	r2, r3
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db6e:	b29b      	uxth	r3, r3
 800db70:	2b01      	cmp	r3, #1
 800db72:	d81f      	bhi.n	800dbb4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	685a      	ldr	r2, [r3, #4]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800db82:	605a      	str	r2, [r3, #4]
 800db84:	e016      	b.n	800dbb4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f103 020c 	add.w	r2, r3, #12
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db92:	7812      	ldrb	r2, [r2, #0]
 800db94:	b2d2      	uxtb	r2, r2
 800db96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db9c:	1c5a      	adds	r2, r3, #1
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800dbb8:	f7f3 fd4a 	bl	8001650 <HAL_GetTick>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d803      	bhi.n	800dbd0 <HAL_SPI_TransmitReceive+0x3c2>
 800dbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbce:	d102      	bne.n	800dbd6 <HAL_SPI_TransmitReceive+0x3c8>
 800dbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d103      	bne.n	800dbde <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800dbd6:	2303      	movs	r3, #3
 800dbd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800dbdc:	e01c      	b.n	800dc18 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	f47f af5b 	bne.w	800daa0 <HAL_SPI_TransmitReceive+0x292>
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dbf0:	b29b      	uxth	r3, r3
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	f47f af54 	bne.w	800daa0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dbf8:	69fa      	ldr	r2, [r7, #28]
 800dbfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dbfc:	68f8      	ldr	r0, [r7, #12]
 800dbfe:	f001 fef1 	bl	800f9e4 <SPI_EndRxTxTransaction>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d006      	beq.n	800dc16 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2220      	movs	r2, #32
 800dc12:	661a      	str	r2, [r3, #96]	; 0x60
 800dc14:	e000      	b.n	800dc18 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800dc16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2200      	movs	r2, #0
 800dc24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800dc28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3728      	adds	r7, #40	; 0x28
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b087      	sub	sp, #28
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	4613      	mov	r3, r2
 800dc40:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dc42:	2300      	movs	r3, #0
 800dc44:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d101      	bne.n	800dc54 <HAL_SPI_Transmit_IT+0x20>
 800dc50:	2302      	movs	r3, #2
 800dc52:	e072      	b.n	800dd3a <HAL_SPI_Transmit_IT+0x106>
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2201      	movs	r2, #1
 800dc58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d002      	beq.n	800dc68 <HAL_SPI_Transmit_IT+0x34>
 800dc62:	88fb      	ldrh	r3, [r7, #6]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d102      	bne.n	800dc6e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dc6c:	e060      	b.n	800dd30 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d002      	beq.n	800dc80 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800dc7a:	2302      	movs	r3, #2
 800dc7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dc7e:	e057      	b.n	800dd30 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2203      	movs	r2, #3
 800dc84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	68ba      	ldr	r2, [r7, #8]
 800dc92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	88fa      	ldrh	r2, [r7, #6]
 800dc98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	88fa      	ldrh	r2, [r7, #6]
 800dc9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2200      	movs	r2, #0
 800dca4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	68db      	ldr	r3, [r3, #12]
 800dcc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dcc4:	d903      	bls.n	800dcce <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	4a1f      	ldr	r2, [pc, #124]	; (800dd48 <HAL_SPI_Transmit_IT+0x114>)
 800dcca:	651a      	str	r2, [r3, #80]	; 0x50
 800dccc:	e002      	b.n	800dcd4 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	4a1e      	ldr	r2, [pc, #120]	; (800dd4c <HAL_SPI_Transmit_IT+0x118>)
 800dcd2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dcdc:	d10f      	bne.n	800dcfe <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dcec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dcfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	685a      	ldr	r2, [r3, #4]
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800dd0c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd18:	2b40      	cmp	r3, #64	; 0x40
 800dd1a:	d008      	beq.n	800dd2e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dd2a:	601a      	str	r2, [r3, #0]
 800dd2c:	e000      	b.n	800dd30 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800dd2e:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2200      	movs	r2, #0
 800dd34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800dd38:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	371c      	adds	r7, #28
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop
 800dd48:	0800f6bd 	.word	0x0800f6bd
 800dd4c:	0800f677 	.word	0x0800f677

0800dd50 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b086      	sub	sp, #24
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	4613      	mov	r3, r2
 800dd5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	689b      	ldr	r3, [r3, #8]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d110      	bne.n	800dd8c <HAL_SPI_Receive_IT+0x3c>
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dd72:	d10b      	bne.n	800dd8c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2204      	movs	r2, #4
 800dd78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800dd7c:	88fb      	ldrh	r3, [r7, #6]
 800dd7e:	68ba      	ldr	r2, [r7, #8]
 800dd80:	68b9      	ldr	r1, [r7, #8]
 800dd82:	68f8      	ldr	r0, [r7, #12]
 800dd84:	f000 f894 	bl	800deb0 <HAL_SPI_TransmitReceive_IT>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	e089      	b.n	800dea0 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d101      	bne.n	800dd9a <HAL_SPI_Receive_IT+0x4a>
 800dd96:	2302      	movs	r3, #2
 800dd98:	e082      	b.n	800dea0 <HAL_SPI_Receive_IT+0x150>
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d002      	beq.n	800ddb4 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800ddae:	2302      	movs	r3, #2
 800ddb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ddb2:	e070      	b.n	800de96 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d002      	beq.n	800ddc0 <HAL_SPI_Receive_IT+0x70>
 800ddba:	88fb      	ldrh	r3, [r7, #6]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d102      	bne.n	800ddc6 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ddc4:	e067      	b.n	800de96 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2204      	movs	r2, #4
 800ddca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	68ba      	ldr	r2, [r7, #8]
 800ddd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	88fa      	ldrh	r2, [r7, #6]
 800ddde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	88fa      	ldrh	r2, [r7, #6]
 800dde6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2200      	movs	r2, #0
 800ddee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2200      	movs	r2, #0
 800de00:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	68db      	ldr	r3, [r3, #12]
 800de06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800de0a:	d90b      	bls.n	800de24 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	685a      	ldr	r2, [r3, #4]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800de1a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	4a22      	ldr	r2, [pc, #136]	; (800dea8 <HAL_SPI_Receive_IT+0x158>)
 800de20:	64da      	str	r2, [r3, #76]	; 0x4c
 800de22:	e00a      	b.n	800de3a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	685a      	ldr	r2, [r3, #4]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800de32:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	4a1d      	ldr	r2, [pc, #116]	; (800deac <HAL_SPI_Receive_IT+0x15c>)
 800de38:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de42:	d10f      	bne.n	800de64 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	681a      	ldr	r2, [r3, #0]
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800de62:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	685a      	ldr	r2, [r3, #4]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800de72:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de7e:	2b40      	cmp	r3, #64	; 0x40
 800de80:	d008      	beq.n	800de94 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	681a      	ldr	r2, [r3, #0]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de90:	601a      	str	r2, [r3, #0]
 800de92:	e000      	b.n	800de96 <HAL_SPI_Receive_IT+0x146>
  }

error :
 800de94:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2200      	movs	r2, #0
 800de9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800de9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3718      	adds	r7, #24
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	0800f62b 	.word	0x0800f62b
 800deac:	0800f5db 	.word	0x0800f5db

0800deb0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b087      	sub	sp, #28
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	60f8      	str	r0, [r7, #12]
 800deb8:	60b9      	str	r1, [r7, #8]
 800deba:	607a      	str	r2, [r7, #4]
 800debc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800debe:	2300      	movs	r3, #0
 800dec0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d101      	bne.n	800ded0 <HAL_SPI_TransmitReceive_IT+0x20>
 800decc:	2302      	movs	r3, #2
 800dece:	e091      	b.n	800dff4 <HAL_SPI_TransmitReceive_IT+0x144>
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2201      	movs	r2, #1
 800ded4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dede:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dee6:	7dbb      	ldrb	r3, [r7, #22]
 800dee8:	2b01      	cmp	r3, #1
 800deea:	d00d      	beq.n	800df08 <HAL_SPI_TransmitReceive_IT+0x58>
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800def2:	d106      	bne.n	800df02 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d102      	bne.n	800df02 <HAL_SPI_TransmitReceive_IT+0x52>
 800defc:	7dbb      	ldrb	r3, [r7, #22]
 800defe:	2b04      	cmp	r3, #4
 800df00:	d002      	beq.n	800df08 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800df02:	2302      	movs	r3, #2
 800df04:	75fb      	strb	r3, [r7, #23]
    goto error;
 800df06:	e070      	b.n	800dfea <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d005      	beq.n	800df1a <HAL_SPI_TransmitReceive_IT+0x6a>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d002      	beq.n	800df1a <HAL_SPI_TransmitReceive_IT+0x6a>
 800df14:	887b      	ldrh	r3, [r7, #2]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d102      	bne.n	800df20 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800df1a:	2301      	movs	r3, #1
 800df1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800df1e:	e064      	b.n	800dfea <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800df26:	b2db      	uxtb	r3, r3
 800df28:	2b04      	cmp	r3, #4
 800df2a:	d003      	beq.n	800df34 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	2205      	movs	r2, #5
 800df30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2200      	movs	r2, #0
 800df38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	68ba      	ldr	r2, [r7, #8]
 800df3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	887a      	ldrh	r2, [r7, #2]
 800df44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	887a      	ldrh	r2, [r7, #2]
 800df4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	887a      	ldrh	r2, [r7, #2]
 800df56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	887a      	ldrh	r2, [r7, #2]
 800df5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800df6a:	d906      	bls.n	800df7a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	4a24      	ldr	r2, [pc, #144]	; (800e000 <HAL_SPI_TransmitReceive_IT+0x150>)
 800df70:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	4a23      	ldr	r2, [pc, #140]	; (800e004 <HAL_SPI_TransmitReceive_IT+0x154>)
 800df76:	651a      	str	r2, [r3, #80]	; 0x50
 800df78:	e005      	b.n	800df86 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	4a22      	ldr	r2, [pc, #136]	; (800e008 <HAL_SPI_TransmitReceive_IT+0x158>)
 800df7e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	4a22      	ldr	r2, [pc, #136]	; (800e00c <HAL_SPI_TransmitReceive_IT+0x15c>)
 800df84:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800df8e:	d802      	bhi.n	800df96 <HAL_SPI_TransmitReceive_IT+0xe6>
 800df90:	887b      	ldrh	r3, [r7, #2]
 800df92:	2b01      	cmp	r3, #1
 800df94:	d908      	bls.n	800dfa8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	685a      	ldr	r2, [r3, #4]
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dfa4:	605a      	str	r2, [r3, #4]
 800dfa6:	e007      	b.n	800dfb8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	685a      	ldr	r2, [r3, #4]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dfb6:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	685a      	ldr	r2, [r3, #4]
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800dfc6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfd2:	2b40      	cmp	r3, #64	; 0x40
 800dfd4:	d008      	beq.n	800dfe8 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dfe4:	601a      	str	r2, [r3, #0]
 800dfe6:	e000      	b.n	800dfea <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800dfe8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2200      	movs	r2, #0
 800dfee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800dff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	371c      	adds	r7, #28
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr
 800e000:	0800f515 	.word	0x0800f515
 800e004:	0800f57b 	.word	0x0800f57b
 800e008:	0800f3c5 	.word	0x0800f3c5
 800e00c:	0800f483 	.word	0x0800f483

0800e010 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b086      	sub	sp, #24
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	4613      	mov	r3, r2
 800e01c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e01e:	2300      	movs	r3, #0
 800e020:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d101      	bne.n	800e030 <HAL_SPI_Transmit_DMA+0x20>
 800e02c:	2302      	movs	r3, #2
 800e02e:	e0d8      	b.n	800e1e2 <HAL_SPI_Transmit_DMA+0x1d2>
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2201      	movs	r2, #1
 800e034:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	2b01      	cmp	r3, #1
 800e042:	d002      	beq.n	800e04a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800e044:	2302      	movs	r3, #2
 800e046:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e048:	e0c6      	b.n	800e1d8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d002      	beq.n	800e056 <HAL_SPI_Transmit_DMA+0x46>
 800e050:	88fb      	ldrh	r3, [r7, #6]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d102      	bne.n	800e05c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e05a:	e0bd      	b.n	800e1d8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2203      	movs	r2, #3
 800e060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2200      	movs	r2, #0
 800e068:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	68ba      	ldr	r2, [r7, #8]
 800e06e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	88fa      	ldrh	r2, [r7, #6]
 800e074:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	88fa      	ldrh	r2, [r7, #6]
 800e07a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2200      	movs	r2, #0
 800e080:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2200      	movs	r2, #0
 800e086:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2200      	movs	r2, #0
 800e08c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2200      	movs	r2, #0
 800e092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2200      	movs	r2, #0
 800e09a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0a6:	d10f      	bne.n	800e0c8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e0b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e0c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0cc:	4a47      	ldr	r2, [pc, #284]	; (800e1ec <HAL_SPI_Transmit_DMA+0x1dc>)
 800e0ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0d4:	4a46      	ldr	r2, [pc, #280]	; (800e1f0 <HAL_SPI_Transmit_DMA+0x1e0>)
 800e0d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0dc:	4a45      	ldr	r2, [pc, #276]	; (800e1f4 <HAL_SPI_Transmit_DMA+0x1e4>)
 800e0de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	685a      	ldr	r2, [r3, #4]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e0f6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e100:	d82d      	bhi.n	800e15e <HAL_SPI_Transmit_DMA+0x14e>
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e106:	699b      	ldr	r3, [r3, #24]
 800e108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e10c:	d127      	bne.n	800e15e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e112:	b29b      	uxth	r3, r3
 800e114:	f003 0301 	and.w	r3, r3, #1
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d10f      	bne.n	800e13c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	685a      	ldr	r2, [r3, #4]
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e12a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e130:	b29b      	uxth	r3, r3
 800e132:	085b      	lsrs	r3, r3, #1
 800e134:	b29a      	uxth	r2, r3
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e13a:	e010      	b.n	800e15e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	685a      	ldr	r2, [r3, #4]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e14a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e150:	b29b      	uxth	r3, r3
 800e152:	085b      	lsrs	r3, r3, #1
 800e154:	b29b      	uxth	r3, r3
 800e156:	3301      	adds	r3, #1
 800e158:	b29a      	uxth	r2, r3
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e166:	4619      	mov	r1, r3
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	330c      	adds	r3, #12
 800e16e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e174:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e176:	f7f4 f916 	bl	80023a6 <HAL_DMA_Start_IT>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d00c      	beq.n	800e19a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e184:	f043 0210 	orr.w	r2, r3, #16
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e18c:	2301      	movs	r3, #1
 800e18e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2201      	movs	r2, #1
 800e194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e198:	e01e      	b.n	800e1d8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1a4:	2b40      	cmp	r3, #64	; 0x40
 800e1a6:	d007      	beq.n	800e1b8 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	681a      	ldr	r2, [r3, #0]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1b6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	685a      	ldr	r2, [r3, #4]
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f042 0220 	orr.w	r2, r2, #32
 800e1c6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	685a      	ldr	r2, [r3, #4]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f042 0202 	orr.w	r2, r2, #2
 800e1d6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3718      	adds	r7, #24
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	0800f147 	.word	0x0800f147
 800e1f0:	0800ef69 	.word	0x0800ef69
 800e1f4:	0800f19b 	.word	0x0800f19b

0800e1f8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b086      	sub	sp, #24
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	60b9      	str	r1, [r7, #8]
 800e202:	4613      	mov	r3, r2
 800e204:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e206:	2300      	movs	r3, #0
 800e208:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	689b      	ldr	r3, [r3, #8]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d110      	bne.n	800e234 <HAL_SPI_Receive_DMA+0x3c>
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e21a:	d10b      	bne.n	800e234 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2204      	movs	r2, #4
 800e220:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800e224:	88fb      	ldrh	r3, [r7, #6]
 800e226:	68ba      	ldr	r2, [r7, #8]
 800e228:	68b9      	ldr	r1, [r7, #8]
 800e22a:	68f8      	ldr	r0, [r7, #12]
 800e22c:	f000 f908 	bl	800e440 <HAL_SPI_TransmitReceive_DMA>
 800e230:	4603      	mov	r3, r0
 800e232:	e0fb      	b.n	800e42c <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d101      	bne.n	800e242 <HAL_SPI_Receive_DMA+0x4a>
 800e23e:	2302      	movs	r3, #2
 800e240:	e0f4      	b.n	800e42c <HAL_SPI_Receive_DMA+0x234>
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2201      	movs	r2, #1
 800e246:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e250:	b2db      	uxtb	r3, r3
 800e252:	2b01      	cmp	r3, #1
 800e254:	d002      	beq.n	800e25c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800e256:	2302      	movs	r3, #2
 800e258:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e25a:	e0e2      	b.n	800e422 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d002      	beq.n	800e268 <HAL_SPI_Receive_DMA+0x70>
 800e262:	88fb      	ldrh	r3, [r7, #6]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d102      	bne.n	800e26e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800e268:	2301      	movs	r3, #1
 800e26a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e26c:	e0d9      	b.n	800e422 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2204      	movs	r2, #4
 800e272:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2200      	movs	r2, #0
 800e27a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	68ba      	ldr	r2, [r7, #8]
 800e280:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	88fa      	ldrh	r2, [r7, #6]
 800e286:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	88fa      	ldrh	r2, [r7, #6]
 800e28e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2200      	movs	r2, #0
 800e296:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2200      	movs	r2, #0
 800e29c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2b2:	d10f      	bne.n	800e2d4 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e2c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e2d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	685a      	ldr	r2, [r3, #4]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e2e2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e2ec:	d908      	bls.n	800e300 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	685a      	ldr	r2, [r3, #4]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e2fc:	605a      	str	r2, [r3, #4]
 800e2fe:	e042      	b.n	800e386 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	685a      	ldr	r2, [r3, #4]
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e30e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e314:	699b      	ldr	r3, [r3, #24]
 800e316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e31a:	d134      	bne.n	800e386 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	685a      	ldr	r2, [r3, #4]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e32a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e332:	b29b      	uxth	r3, r3
 800e334:	f003 0301 	and.w	r3, r3, #1
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d111      	bne.n	800e360 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	685a      	ldr	r2, [r3, #4]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e34a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e352:	b29b      	uxth	r3, r3
 800e354:	085b      	lsrs	r3, r3, #1
 800e356:	b29a      	uxth	r2, r3
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e35e:	e012      	b.n	800e386 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	685a      	ldr	r2, [r3, #4]
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e36e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e376:	b29b      	uxth	r3, r3
 800e378:	085b      	lsrs	r3, r3, #1
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	3301      	adds	r3, #1
 800e37e:	b29a      	uxth	r2, r3
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e38a:	4a2a      	ldr	r2, [pc, #168]	; (800e434 <HAL_SPI_Receive_DMA+0x23c>)
 800e38c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e392:	4a29      	ldr	r2, [pc, #164]	; (800e438 <HAL_SPI_Receive_DMA+0x240>)
 800e394:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e39a:	4a28      	ldr	r2, [pc, #160]	; (800e43c <HAL_SPI_Receive_DMA+0x244>)
 800e39c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	330c      	adds	r3, #12
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3b6:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e3be:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e3c0:	f7f3 fff1 	bl	80023a6 <HAL_DMA_Start_IT>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d00c      	beq.n	800e3e4 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3ce:	f043 0210 	orr.w	r2, r3, #16
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2201      	movs	r2, #1
 800e3de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e3e2:	e01e      	b.n	800e422 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3ee:	2b40      	cmp	r3, #64	; 0x40
 800e3f0:	d007      	beq.n	800e402 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e400:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	685a      	ldr	r2, [r3, #4]
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f042 0220 	orr.w	r2, r2, #32
 800e410:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	685a      	ldr	r2, [r3, #4]
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f042 0201 	orr.w	r2, r2, #1
 800e420:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2200      	movs	r2, #0
 800e426:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3718      	adds	r7, #24
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	0800f163 	.word	0x0800f163
 800e438:	0800f00f 	.word	0x0800f00f
 800e43c:	0800f19b 	.word	0x0800f19b

0800e440 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b086      	sub	sp, #24
 800e444:	af00      	add	r7, sp, #0
 800e446:	60f8      	str	r0, [r7, #12]
 800e448:	60b9      	str	r1, [r7, #8]
 800e44a:	607a      	str	r2, [r7, #4]
 800e44c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e44e:	2300      	movs	r3, #0
 800e450:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e458:	2b01      	cmp	r3, #1
 800e45a:	d101      	bne.n	800e460 <HAL_SPI_TransmitReceive_DMA+0x20>
 800e45c:	2302      	movs	r3, #2
 800e45e:	e16c      	b.n	800e73a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2201      	movs	r2, #1
 800e464:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e46e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800e476:	7dbb      	ldrb	r3, [r7, #22]
 800e478:	2b01      	cmp	r3, #1
 800e47a:	d00d      	beq.n	800e498 <HAL_SPI_TransmitReceive_DMA+0x58>
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e482:	d106      	bne.n	800e492 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	689b      	ldr	r3, [r3, #8]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d102      	bne.n	800e492 <HAL_SPI_TransmitReceive_DMA+0x52>
 800e48c:	7dbb      	ldrb	r3, [r7, #22]
 800e48e:	2b04      	cmp	r3, #4
 800e490:	d002      	beq.n	800e498 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800e492:	2302      	movs	r3, #2
 800e494:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e496:	e14b      	b.n	800e730 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d005      	beq.n	800e4aa <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d002      	beq.n	800e4aa <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e4a4:	887b      	ldrh	r3, [r7, #2]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d102      	bne.n	800e4b0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e4ae:	e13f      	b.n	800e730 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e4b6:	b2db      	uxtb	r3, r3
 800e4b8:	2b04      	cmp	r3, #4
 800e4ba:	d003      	beq.n	800e4c4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2205      	movs	r2, #5
 800e4c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	68ba      	ldr	r2, [r7, #8]
 800e4ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	887a      	ldrh	r2, [r7, #2]
 800e4d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	887a      	ldrh	r2, [r7, #2]
 800e4da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	887a      	ldrh	r2, [r7, #2]
 800e4e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	887a      	ldrh	r2, [r7, #2]
 800e4ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	685a      	ldr	r2, [r3, #4]
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800e50c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e516:	d908      	bls.n	800e52a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	685a      	ldr	r2, [r3, #4]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e526:	605a      	str	r2, [r3, #4]
 800e528:	e06f      	b.n	800e60a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	685a      	ldr	r2, [r3, #4]
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e538:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e53e:	699b      	ldr	r3, [r3, #24]
 800e540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e544:	d126      	bne.n	800e594 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e54a:	f003 0301 	and.w	r3, r3, #1
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d10f      	bne.n	800e572 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	685a      	ldr	r2, [r3, #4]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e560:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e566:	b29b      	uxth	r3, r3
 800e568:	085b      	lsrs	r3, r3, #1
 800e56a:	b29a      	uxth	r2, r3
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e570:	e010      	b.n	800e594 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	685a      	ldr	r2, [r3, #4]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e580:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e586:	b29b      	uxth	r3, r3
 800e588:	085b      	lsrs	r3, r3, #1
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	3301      	adds	r3, #1
 800e58e:	b29a      	uxth	r2, r3
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e598:	699b      	ldr	r3, [r3, #24]
 800e59a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e59e:	d134      	bne.n	800e60a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	685a      	ldr	r2, [r3, #4]
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e5ae:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	f003 0301 	and.w	r3, r3, #1
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d111      	bne.n	800e5e4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e5ce:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	085b      	lsrs	r3, r3, #1
 800e5da:	b29a      	uxth	r2, r3
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e5e2:	e012      	b.n	800e60a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	685a      	ldr	r2, [r3, #4]
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e5f2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	085b      	lsrs	r3, r3, #1
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	3301      	adds	r3, #1
 800e602:	b29a      	uxth	r2, r3
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e610:	b2db      	uxtb	r3, r3
 800e612:	2b04      	cmp	r3, #4
 800e614:	d108      	bne.n	800e628 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e61a:	4a4a      	ldr	r2, [pc, #296]	; (800e744 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800e61c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e622:	4a49      	ldr	r2, [pc, #292]	; (800e748 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800e624:	62da      	str	r2, [r3, #44]	; 0x2c
 800e626:	e007      	b.n	800e638 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e62c:	4a47      	ldr	r2, [pc, #284]	; (800e74c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800e62e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e634:	4a46      	ldr	r2, [pc, #280]	; (800e750 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800e636:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e63c:	4a45      	ldr	r2, [pc, #276]	; (800e754 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800e63e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e644:	2200      	movs	r2, #0
 800e646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	330c      	adds	r3, #12
 800e652:	4619      	mov	r1, r3
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e658:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e660:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e662:	f7f3 fea0 	bl	80023a6 <HAL_DMA_Start_IT>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d00c      	beq.n	800e686 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e670:	f043 0210 	orr.w	r2, r3, #16
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e678:	2301      	movs	r3, #1
 800e67a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2201      	movs	r2, #1
 800e680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e684:	e054      	b.n	800e730 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	685a      	ldr	r2, [r3, #4]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	f042 0201 	orr.w	r2, r2, #1
 800e694:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e69a:	2200      	movs	r2, #0
 800e69c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6be:	4619      	mov	r1, r3
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	330c      	adds	r3, #12
 800e6c6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6cc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e6ce:	f7f3 fe6a 	bl	80023a6 <HAL_DMA_Start_IT>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00c      	beq.n	800e6f2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6dc:	f043 0210 	orr.w	r2, r3, #16
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e6f0:	e01e      	b.n	800e730 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6fc:	2b40      	cmp	r3, #64	; 0x40
 800e6fe:	d007      	beq.n	800e710 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e70e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	685a      	ldr	r2, [r3, #4]
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f042 0220 	orr.w	r2, r2, #32
 800e71e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	685a      	ldr	r2, [r3, #4]
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f042 0202 	orr.w	r2, r2, #2
 800e72e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2200      	movs	r2, #0
 800e734:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e738:	7dfb      	ldrb	r3, [r7, #23]
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3718      	adds	r7, #24
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	0800f163 	.word	0x0800f163
 800e748:	0800f00f 	.word	0x0800f00f
 800e74c:	0800f17f 	.word	0x0800f17f
 800e750:	0800f0b7 	.word	0x0800f0b7
 800e754:	0800f19b 	.word	0x0800f19b

0800e758 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b08a      	sub	sp, #40	; 0x28
 800e75c:	af02      	add	r7, sp, #8
 800e75e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800e760:	2300      	movs	r3, #0
 800e762:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800e764:	4b88      	ldr	r3, [pc, #544]	; (800e988 <HAL_SPI_Abort+0x230>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4a88      	ldr	r2, [pc, #544]	; (800e98c <HAL_SPI_Abort+0x234>)
 800e76a:	fba2 2303 	umull	r2, r3, r2, r3
 800e76e:	0a5b      	lsrs	r3, r3, #9
 800e770:	2264      	movs	r2, #100	; 0x64
 800e772:	fb02 f303 	mul.w	r3, r2, r3
 800e776:	617b      	str	r3, [r7, #20]
  count = resetcount;
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	685a      	ldr	r2, [r3, #4]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f022 0220 	bic.w	r2, r2, #32
 800e78a:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e796:	2b80      	cmp	r3, #128	; 0x80
 800e798:	d117      	bne.n	800e7ca <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	4a7c      	ldr	r2, [pc, #496]	; (800e990 <HAL_SPI_Abort+0x238>)
 800e79e:	651a      	str	r2, [r3, #80]	; 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800e7a0:	69bb      	ldr	r3, [r7, #24]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d106      	bne.n	800e7b4 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800e7b2:	e008      	b.n	800e7c6 <HAL_SPI_Abort+0x6e>
      }
      count--;
 800e7b4:	69bb      	ldr	r3, [r7, #24]
 800e7b6:	3b01      	subs	r3, #1
 800e7b8:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e7c0:	b2db      	uxtb	r3, r3
 800e7c2:	2b07      	cmp	r3, #7
 800e7c4:	d1ec      	bne.n	800e7a0 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7d4:	2b40      	cmp	r3, #64	; 0x40
 800e7d6:	d117      	bne.n	800e808 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	4a6e      	ldr	r2, [pc, #440]	; (800e994 <HAL_SPI_Abort+0x23c>)
 800e7dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d106      	bne.n	800e7f2 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800e7f0:	e008      	b.n	800e804 <HAL_SPI_Abort+0xac>
      }
      count--;
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	3b01      	subs	r3, #1
 800e7f6:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	2b07      	cmp	r3, #7
 800e802:	d1ec      	bne.n	800e7de <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	f003 0302 	and.w	r3, r3, #2
 800e812:	2b02      	cmp	r3, #2
 800e814:	d141      	bne.n	800e89a <HAL_SPI_Abort+0x142>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d03d      	beq.n	800e89a <HAL_SPI_Abort+0x142>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e822:	2200      	movs	r2, #0
 800e824:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7f3 fe1b 	bl	8002466 <HAL_DMA_Abort>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d002      	beq.n	800e83c <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2240      	movs	r2, #64	; 0x40
 800e83a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	685a      	ldr	r2, [r3, #4]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f022 0202 	bic.w	r2, r2, #2
 800e84a:	605a      	str	r2, [r3, #4]

      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800e84c:	f7f2 ff00 	bl	8001650 <HAL_GetTick>
 800e850:	4603      	mov	r3, r0
 800e852:	461a      	mov	r2, r3
 800e854:	2164      	movs	r1, #100	; 0x64
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f001 f8c4 	bl	800f9e4 <SPI_EndRxTxTransaction>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d002      	beq.n	800e868 <HAL_SPI_Abort+0x110>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2240      	movs	r2, #64	; 0x40
 800e866:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Disable SPI Peripheral */
      __HAL_SPI_DISABLE(hspi);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e876:	601a      	str	r2, [r3, #0]

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800e878:	f7f2 feea 	bl	8001650 <HAL_GetTick>
 800e87c:	4603      	mov	r3, r0
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	2364      	movs	r3, #100	; 0x64
 800e882:	2200      	movs	r2, #0
 800e884:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 ffc1 	bl	800f810 <SPI_WaitFifoStateUntilTimeout>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d002      	beq.n	800e89a <HAL_SPI_Abort+0x142>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2240      	movs	r2, #64	; 0x40
 800e898:	661a      	str	r2, [r3, #96]	; 0x60
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	f003 0301 	and.w	r3, r3, #1
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d143      	bne.n	800e930 <HAL_SPI_Abort+0x1d8>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d03f      	beq.n	800e930 <HAL_SPI_Abort+0x1d8>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7f3 fdd2 	bl	8002466 <HAL_DMA_Abort>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d002      	beq.n	800e8ce <HAL_SPI_Abort+0x176>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2240      	movs	r2, #64	; 0x40
 800e8cc:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e8dc:	601a      	str	r2, [r3, #0]

      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800e8de:	f7f2 feb7 	bl	8001650 <HAL_GetTick>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	9300      	str	r3, [sp, #0]
 800e8e6:	2364      	movs	r3, #100	; 0x64
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	2180      	movs	r1, #128	; 0x80
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f000 ff07 	bl	800f700 <SPI_WaitFlagStateUntilTimeout>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d002      	beq.n	800e8fe <HAL_SPI_Abort+0x1a6>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2240      	movs	r2, #64	; 0x40
 800e8fc:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800e8fe:	f7f2 fea7 	bl	8001650 <HAL_GetTick>
 800e902:	4603      	mov	r3, r0
 800e904:	9300      	str	r3, [sp, #0]
 800e906:	2364      	movs	r3, #100	; 0x64
 800e908:	2200      	movs	r2, #0
 800e90a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 ff7e 	bl	800f810 <SPI_WaitFifoStateUntilTimeout>
 800e914:	4603      	mov	r3, r0
 800e916:	2b00      	cmp	r3, #0
 800e918:	d002      	beq.n	800e920 <HAL_SPI_Abort+0x1c8>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2240      	movs	r2, #64	; 0x40
 800e91e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	685a      	ldr	r2, [r3, #4]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f022 0201 	bic.w	r2, r2, #1
 800e92e:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2200      	movs	r2, #0
 800e934:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2200      	movs	r2, #0
 800e93c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e942:	2b40      	cmp	r3, #64	; 0x40
 800e944:	d102      	bne.n	800e94c <HAL_SPI_Abort+0x1f4>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 800e946:	2301      	movs	r3, #1
 800e948:	77fb      	strb	r3, [r7, #31]
 800e94a:	e002      	b.n	800e952 <HAL_SPI_Abort+0x1fa>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e952:	2300      	movs	r3, #0
 800e954:	613b      	str	r3, [r7, #16]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	613b      	str	r3, [r7, #16]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	689b      	ldr	r3, [r3, #8]
 800e964:	613b      	str	r3, [r7, #16]
 800e966:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e968:	2300      	movs	r3, #0
 800e96a:	60fb      	str	r3, [r7, #12]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	689b      	ldr	r3, [r3, #8]
 800e972:	60fb      	str	r3, [r7, #12]
 800e974:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2201      	movs	r2, #1
 800e97a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return errorcode;
 800e97e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e980:	4618      	mov	r0, r3
 800e982:	3720      	adds	r7, #32
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	20000008 	.word	0x20000008
 800e98c:	057619f1 	.word	0x057619f1
 800e990:	0800fc95 	.word	0x0800fc95
 800e994:	0800fbd5 	.word	0x0800fbd5

0800e998 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b088      	sub	sp, #32
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800e9a8:	4b72      	ldr	r3, [pc, #456]	; (800eb74 <HAL_SPI_Abort_IT+0x1dc>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	4a72      	ldr	r2, [pc, #456]	; (800eb78 <HAL_SPI_Abort_IT+0x1e0>)
 800e9ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e9b2:	0a5b      	lsrs	r3, r3, #9
 800e9b4:	2264      	movs	r2, #100	; 0x64
 800e9b6:	fb02 f303 	mul.w	r3, r2, r3
 800e9ba:	613b      	str	r3, [r7, #16]
  count = resetcount;
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	685a      	ldr	r2, [r3, #4]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f022 0220 	bic.w	r2, r2, #32
 800e9ce:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9da:	2b80      	cmp	r3, #128	; 0x80
 800e9dc:	d117      	bne.n	800ea0e <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	4a66      	ldr	r2, [pc, #408]	; (800eb7c <HAL_SPI_Abort_IT+0x1e4>)
 800e9e2:	651a      	str	r2, [r3, #80]	; 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d106      	bne.n	800e9f8 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800e9f6:	e008      	b.n	800ea0a <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	3b01      	subs	r3, #1
 800e9fc:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ea04:	b2db      	uxtb	r3, r3
 800ea06:	2b07      	cmp	r3, #7
 800ea08:	d1ec      	bne.n	800e9e4 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea18:	2b40      	cmp	r3, #64	; 0x40
 800ea1a:	d117      	bne.n	800ea4c <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	4a58      	ldr	r2, [pc, #352]	; (800eb80 <HAL_SPI_Abort_IT+0x1e8>)
 800ea20:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d106      	bne.n	800ea36 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800ea34:	e008      	b.n	800ea48 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	2b07      	cmp	r3, #7
 800ea46:	d1ec      	bne.n	800ea22 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d00f      	beq.n	800ea74 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	f003 0302 	and.w	r3, r3, #2
 800ea5e:	2b02      	cmp	r3, #2
 800ea60:	d104      	bne.n	800ea6c <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea66:	4a47      	ldr	r2, [pc, #284]	; (800eb84 <HAL_SPI_Abort_IT+0x1ec>)
 800ea68:	639a      	str	r2, [r3, #56]	; 0x38
 800ea6a:	e003      	b.n	800ea74 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea70:	2200      	movs	r2, #0
 800ea72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d00f      	beq.n	800ea9c <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	f003 0301 	and.w	r3, r3, #1
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	d104      	bne.n	800ea94 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea8e:	4a3e      	ldr	r2, [pc, #248]	; (800eb88 <HAL_SPI_Abort_IT+0x1f0>)
 800ea90:	639a      	str	r2, [r3, #56]	; 0x38
 800ea92:	e003      	b.n	800ea9c <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea98:	2200      	movs	r2, #0
 800ea9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	f003 0302 	and.w	r3, r3, #2
 800eaa6:	2b02      	cmp	r3, #2
 800eaa8:	d115      	bne.n	800ead6 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d011      	beq.n	800ead6 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7f3 fd13 	bl	80024e2 <HAL_DMA_Abort_IT>
 800eabc:	4603      	mov	r3, r0
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d007      	beq.n	800ead2 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eac6:	2200      	movs	r2, #0
 800eac8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2240      	movs	r2, #64	; 0x40
 800eace:	661a      	str	r2, [r3, #96]	; 0x60
 800ead0:	e001      	b.n	800ead6 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 800ead2:	2300      	movs	r3, #0
 800ead4:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	f003 0301 	and.w	r3, r3, #1
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d115      	bne.n	800eb10 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d011      	beq.n	800eb10 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7f3 fcf6 	bl	80024e2 <HAL_DMA_Abort_IT>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d007      	beq.n	800eb0c <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb00:	2200      	movs	r2, #0
 800eb02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2240      	movs	r2, #64	; 0x40
 800eb08:	661a      	str	r2, [r3, #96]	; 0x60
 800eb0a:	e001      	b.n	800eb10 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 800eb10:	69bb      	ldr	r3, [r7, #24]
 800eb12:	2b01      	cmp	r3, #1
 800eb14:	d129      	bne.n	800eb6a <HAL_SPI_Abort_IT+0x1d2>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->TxXferCount = 0U;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2200      	movs	r2, #0
 800eb22:	87da      	strh	r2, [r3, #62]	; 0x3e

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb28:	2b40      	cmp	r3, #64	; 0x40
 800eb2a:	d102      	bne.n	800eb32 <HAL_SPI_Abort_IT+0x19a>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	77fb      	strb	r3, [r7, #31]
 800eb30:	e002      	b.n	800eb38 <HAL_SPI_Abort_IT+0x1a0>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2200      	movs	r2, #0
 800eb36:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eb38:	2300      	movs	r3, #0
 800eb3a:	60fb      	str	r3, [r7, #12]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	68db      	ldr	r3, [r3, #12]
 800eb42:	60fb      	str	r3, [r7, #12]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	689b      	ldr	r3, [r3, #8]
 800eb4a:	60fb      	str	r3, [r7, #12]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eb4e:	2300      	movs	r3, #0
 800eb50:	60bb      	str	r3, [r7, #8]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	689b      	ldr	r3, [r3, #8]
 800eb58:	60bb      	str	r3, [r7, #8]
 800eb5a:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2201      	movs	r2, #1
 800eb60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f000 f9db 	bl	800ef20 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 800eb6a:	7ffb      	ldrb	r3, [r7, #31]
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3720      	adds	r7, #32
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	20000008 	.word	0x20000008
 800eb78:	057619f1 	.word	0x057619f1
 800eb7c:	0800fc95 	.word	0x0800fc95
 800eb80:	0800fbd5 	.word	0x0800fbd5
 800eb84:	0800f205 	.word	0x0800f205
 800eb88:	0800f2e3 	.word	0x0800f2e3

0800eb8c <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b083      	sub	sp, #12
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d101      	bne.n	800eba2 <HAL_SPI_DMAPause+0x16>
 800eb9e:	2302      	movs	r3, #2
 800eba0:	e010      	b.n	800ebc4 <HAL_SPI_DMAPause+0x38>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2201      	movs	r2, #1
 800eba6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	685a      	ldr	r2, [r3, #4]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f022 0203 	bic.w	r2, r2, #3
 800ebb8:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800ebc2:	2300      	movs	r3, #0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	370c      	adds	r7, #12
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr

0800ebd0 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	d101      	bne.n	800ebe6 <HAL_SPI_DMAResume+0x16>
 800ebe2:	2302      	movs	r3, #2
 800ebe4:	e010      	b.n	800ec08 <HAL_SPI_DMAResume+0x38>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2201      	movs	r2, #1
 800ebea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	685a      	ldr	r2, [r3, #4]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f042 0203 	orr.w	r2, r2, #3
 800ebfc:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2200      	movs	r2, #0
 800ec02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800ec06:	2300      	movs	r3, #0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	370c      	adds	r7, #12
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr

0800ec14 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d00f      	beq.n	800ec48 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7f3 fc1a 	bl	8002466 <HAL_DMA_Abort>
 800ec32:	4603      	mov	r3, r0
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d007      	beq.n	800ec48 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec3c:	f043 0210 	orr.w	r2, r3, #16
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800ec44:	2301      	movs	r3, #1
 800ec46:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d00f      	beq.n	800ec70 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7f3 fc06 	bl	8002466 <HAL_DMA_Abort>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d007      	beq.n	800ec70 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec64:	f043 0210 	orr.w	r2, r3, #16
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	685a      	ldr	r2, [r3, #4]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f022 0203 	bic.w	r2, r2, #3
 800ec7e:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2201      	movs	r2, #1
 800ec84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 800ec88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3710      	adds	r7, #16
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
	...

0800ec94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b088      	sub	sp, #32
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	689b      	ldr	r3, [r3, #8]
 800ecaa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ecac:	69bb      	ldr	r3, [r7, #24]
 800ecae:	099b      	lsrs	r3, r3, #6
 800ecb0:	f003 0301 	and.w	r3, r3, #1
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d10f      	bne.n	800ecd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d00a      	beq.n	800ecd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	099b      	lsrs	r3, r3, #6
 800ecc6:	f003 0301 	and.w	r3, r3, #1
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d004      	beq.n	800ecd8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	4798      	blx	r3
    return;
 800ecd6:	e0d7      	b.n	800ee88 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ecd8:	69bb      	ldr	r3, [r7, #24]
 800ecda:	085b      	lsrs	r3, r3, #1
 800ecdc:	f003 0301 	and.w	r3, r3, #1
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d00a      	beq.n	800ecfa <HAL_SPI_IRQHandler+0x66>
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	09db      	lsrs	r3, r3, #7
 800ece8:	f003 0301 	and.w	r3, r3, #1
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d004      	beq.n	800ecfa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	4798      	blx	r3
    return;
 800ecf8:	e0c6      	b.n	800ee88 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	095b      	lsrs	r3, r3, #5
 800ecfe:	f003 0301 	and.w	r3, r3, #1
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d10c      	bne.n	800ed20 <HAL_SPI_IRQHandler+0x8c>
 800ed06:	69bb      	ldr	r3, [r7, #24]
 800ed08:	099b      	lsrs	r3, r3, #6
 800ed0a:	f003 0301 	and.w	r3, r3, #1
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d106      	bne.n	800ed20 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ed12:	69bb      	ldr	r3, [r7, #24]
 800ed14:	0a1b      	lsrs	r3, r3, #8
 800ed16:	f003 0301 	and.w	r3, r3, #1
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	f000 80b4 	beq.w	800ee88 <HAL_SPI_IRQHandler+0x1f4>
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	095b      	lsrs	r3, r3, #5
 800ed24:	f003 0301 	and.w	r3, r3, #1
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f000 80ad 	beq.w	800ee88 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ed2e:	69bb      	ldr	r3, [r7, #24]
 800ed30:	099b      	lsrs	r3, r3, #6
 800ed32:	f003 0301 	and.w	r3, r3, #1
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d023      	beq.n	800ed82 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	2b03      	cmp	r3, #3
 800ed44:	d011      	beq.n	800ed6a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed4a:	f043 0204 	orr.w	r2, r3, #4
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed52:	2300      	movs	r3, #0
 800ed54:	617b      	str	r3, [r7, #20]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	68db      	ldr	r3, [r3, #12]
 800ed5c:	617b      	str	r3, [r7, #20]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	689b      	ldr	r3, [r3, #8]
 800ed64:	617b      	str	r3, [r7, #20]
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	e00b      	b.n	800ed82 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	613b      	str	r3, [r7, #16]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	613b      	str	r3, [r7, #16]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	689b      	ldr	r3, [r3, #8]
 800ed7c:	613b      	str	r3, [r7, #16]
 800ed7e:	693b      	ldr	r3, [r7, #16]
        return;
 800ed80:	e082      	b.n	800ee88 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ed82:	69bb      	ldr	r3, [r7, #24]
 800ed84:	095b      	lsrs	r3, r3, #5
 800ed86:	f003 0301 	and.w	r3, r3, #1
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d014      	beq.n	800edb8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed92:	f043 0201 	orr.w	r2, r3, #1
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	60fb      	str	r3, [r7, #12]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	689b      	ldr	r3, [r3, #8]
 800eda4:	60fb      	str	r3, [r7, #12]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	681a      	ldr	r2, [r3, #0]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800edb4:	601a      	str	r2, [r3, #0]
 800edb6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	0a1b      	lsrs	r3, r3, #8
 800edbc:	f003 0301 	and.w	r3, r3, #1
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d00c      	beq.n	800edde <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edc8:	f043 0208 	orr.w	r2, r3, #8
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800edd0:	2300      	movs	r3, #0
 800edd2:	60bb      	str	r3, [r7, #8]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	689b      	ldr	r3, [r3, #8]
 800edda:	60bb      	str	r3, [r7, #8]
 800eddc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d04f      	beq.n	800ee86 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	685a      	ldr	r2, [r3, #4]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800edf4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2201      	movs	r2, #1
 800edfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800edfe:	69fb      	ldr	r3, [r7, #28]
 800ee00:	f003 0302 	and.w	r3, r3, #2
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d104      	bne.n	800ee12 <HAL_SPI_IRQHandler+0x17e>
 800ee08:	69fb      	ldr	r3, [r7, #28]
 800ee0a:	f003 0301 	and.w	r3, r3, #1
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d034      	beq.n	800ee7c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	685a      	ldr	r2, [r3, #4]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f022 0203 	bic.w	r2, r2, #3
 800ee20:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d011      	beq.n	800ee4e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee2e:	4a18      	ldr	r2, [pc, #96]	; (800ee90 <HAL_SPI_IRQHandler+0x1fc>)
 800ee30:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7f3 fb53 	bl	80024e2 <HAL_DMA_Abort_IT>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d005      	beq.n	800ee4e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d016      	beq.n	800ee84 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee5a:	4a0d      	ldr	r2, [pc, #52]	; (800ee90 <HAL_SPI_IRQHandler+0x1fc>)
 800ee5c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7f3 fb3d 	bl	80024e2 <HAL_DMA_Abort_IT>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00a      	beq.n	800ee84 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800ee7a:	e003      	b.n	800ee84 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f000 f845 	bl	800ef0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ee82:	e000      	b.n	800ee86 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ee84:	bf00      	nop
    return;
 800ee86:	bf00      	nop
  }
}
 800ee88:	3720      	adds	r7, #32
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	0800f1db 	.word	0x0800f1db

0800ee94 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ee9c:	bf00      	nop
 800ee9e:	370c      	adds	r7, #12
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr

0800eea8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800eeb0:	bf00      	nop
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b083      	sub	sp, #12
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800eec4:	bf00      	nop
 800eec6:	370c      	adds	r7, #12
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr

0800eed0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b083      	sub	sp, #12
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800eed8:	bf00      	nop
 800eeda:	370c      	adds	r7, #12
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b083      	sub	sp, #12
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800eeec:	bf00      	nop
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr

0800eef8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b083      	sub	sp, #12
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ef00:	bf00      	nop
 800ef02:	370c      	adds	r7, #12
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr

0800ef0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b083      	sub	sp, #12
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ef14:	bf00      	nop
 800ef16:	370c      	adds	r7, #12
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr

0800ef20 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b083      	sub	sp, #12
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800ef28:	bf00      	nop
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ef42:	b2db      	uxtb	r3, r3
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	370c      	adds	r7, #12
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b083      	sub	sp, #12
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr

0800ef68 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b086      	sub	sp, #24
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef74:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef76:	f7f2 fb6b 	bl	8001650 <HAL_GetTick>
 800ef7a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f003 0320 	and.w	r3, r3, #32
 800ef86:	2b20      	cmp	r3, #32
 800ef88:	d03b      	beq.n	800f002 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	685a      	ldr	r2, [r3, #4]
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f022 0220 	bic.w	r2, r2, #32
 800ef98:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	685a      	ldr	r2, [r3, #4]
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f022 0202 	bic.w	r2, r2, #2
 800efa8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800efaa:	693a      	ldr	r2, [r7, #16]
 800efac:	2164      	movs	r1, #100	; 0x64
 800efae:	6978      	ldr	r0, [r7, #20]
 800efb0:	f000 fd18 	bl	800f9e4 <SPI_EndRxTxTransaction>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d005      	beq.n	800efc6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efbe:	f043 0220 	orr.w	r2, r3, #32
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	689b      	ldr	r3, [r3, #8]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d10a      	bne.n	800efe4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800efce:	2300      	movs	r3, #0
 800efd0:	60fb      	str	r3, [r7, #12]
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	60fb      	str	r3, [r7, #12]
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	60fb      	str	r3, [r7, #12]
 800efe2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	2200      	movs	r2, #0
 800efe8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	2201      	movs	r2, #1
 800efee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d003      	beq.n	800f002 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800effa:	6978      	ldr	r0, [r7, #20]
 800effc:	f7ff ff86 	bl	800ef0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f000:	e002      	b.n	800f008 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800f002:	6978      	ldr	r0, [r7, #20]
 800f004:	f7ff ff46 	bl	800ee94 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f008:	3718      	adds	r7, #24
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}

0800f00e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f00e:	b580      	push	{r7, lr}
 800f010:	b084      	sub	sp, #16
 800f012:	af00      	add	r7, sp, #0
 800f014:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f01a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f01c:	f7f2 fb18 	bl	8001650 <HAL_GetTick>
 800f020:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f003 0320 	and.w	r3, r3, #32
 800f02c:	2b20      	cmp	r3, #32
 800f02e:	d03c      	beq.n	800f0aa <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	685a      	ldr	r2, [r3, #4]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	f022 0220 	bic.w	r2, r2, #32
 800f03e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	689b      	ldr	r3, [r3, #8]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d10d      	bne.n	800f064 <SPI_DMAReceiveCplt+0x56>
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	685b      	ldr	r3, [r3, #4]
 800f04c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f050:	d108      	bne.n	800f064 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	685a      	ldr	r2, [r3, #4]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f022 0203 	bic.w	r2, r2, #3
 800f060:	605a      	str	r2, [r3, #4]
 800f062:	e007      	b.n	800f074 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	685a      	ldr	r2, [r3, #4]
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	f022 0201 	bic.w	r2, r2, #1
 800f072:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f074:	68ba      	ldr	r2, [r7, #8]
 800f076:	2164      	movs	r1, #100	; 0x64
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f000 fc5b 	bl	800f934 <SPI_EndRxTransaction>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d002      	beq.n	800f08a <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2220      	movs	r2, #32
 800f088:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2200      	movs	r2, #0
 800f08e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2201      	movs	r2, #1
 800f096:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d003      	beq.n	800f0aa <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f7ff ff32 	bl	800ef0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f0a8:	e002      	b.n	800f0b0 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800f0aa:	68f8      	ldr	r0, [r7, #12]
 800f0ac:	f7ff fefc 	bl	800eea8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f0b0:	3710      	adds	r7, #16
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}

0800f0b6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b084      	sub	sp, #16
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0c2:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f0c4:	f7f2 fac4 	bl	8001650 <HAL_GetTick>
 800f0c8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f003 0320 	and.w	r3, r3, #32
 800f0d4:	2b20      	cmp	r3, #32
 800f0d6:	d030      	beq.n	800f13a <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	685a      	ldr	r2, [r3, #4]
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f022 0220 	bic.w	r2, r2, #32
 800f0e6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f0e8:	68ba      	ldr	r2, [r7, #8]
 800f0ea:	2164      	movs	r1, #100	; 0x64
 800f0ec:	68f8      	ldr	r0, [r7, #12]
 800f0ee:	f000 fc79 	bl	800f9e4 <SPI_EndRxTxTransaction>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d005      	beq.n	800f104 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f0fc:	f043 0220 	orr.w	r2, r3, #32
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	685a      	ldr	r2, [r3, #4]
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f022 0203 	bic.w	r2, r2, #3
 800f112:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2200      	movs	r2, #0
 800f118:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	2200      	movs	r2, #0
 800f11e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2201      	movs	r2, #1
 800f126:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d003      	beq.n	800f13a <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f132:	68f8      	ldr	r0, [r7, #12]
 800f134:	f7ff feea 	bl	800ef0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f138:	e002      	b.n	800f140 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800f13a:	68f8      	ldr	r0, [r7, #12]
 800f13c:	f7ff febe 	bl	800eebc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f140:	3710      	adds	r7, #16
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}

0800f146 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f146:	b580      	push	{r7, lr}
 800f148:	b084      	sub	sp, #16
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f152:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800f154:	68f8      	ldr	r0, [r7, #12]
 800f156:	f7ff febb 	bl	800eed0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f15a:	bf00      	nop
 800f15c:	3710      	adds	r7, #16
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}

0800f162 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f162:	b580      	push	{r7, lr}
 800f164:	b084      	sub	sp, #16
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f16e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800f170:	68f8      	ldr	r0, [r7, #12]
 800f172:	f7ff feb7 	bl	800eee4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f176:	bf00      	nop
 800f178:	3710      	adds	r7, #16
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}

0800f17e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f17e:	b580      	push	{r7, lr}
 800f180:	b084      	sub	sp, #16
 800f182:	af00      	add	r7, sp, #0
 800f184:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f18a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800f18c:	68f8      	ldr	r0, [r7, #12]
 800f18e:	f7ff feb3 	bl	800eef8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f192:	bf00      	nop
 800f194:	3710      	adds	r7, #16
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}

0800f19a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f19a:	b580      	push	{r7, lr}
 800f19c:	b084      	sub	sp, #16
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1a6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	685a      	ldr	r2, [r3, #4]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f022 0203 	bic.w	r2, r2, #3
 800f1b6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f1bc:	f043 0210 	orr.w	r2, r3, #16
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f7ff fe9d 	bl	800ef0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f1d2:	bf00      	nop
 800f1d4:	3710      	adds	r7, #16
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}

0800f1da <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f1da:	b580      	push	{r7, lr}
 800f1dc:	b084      	sub	sp, #16
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1e6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f1f6:	68f8      	ldr	r0, [r7, #12]
 800f1f8:	f7ff fe88 	bl	800ef0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f1fc:	bf00      	nop
 800f1fe:	3710      	adds	r7, #16
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b088      	sub	sp, #32
 800f208:	af02      	add	r7, sp, #8
 800f20a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f210:	617b      	str	r3, [r7, #20]

  hspi->hdmatx->XferAbortCallback = NULL;
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f216:	2200      	movs	r2, #0
 800f218:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	685a      	ldr	r2, [r3, #4]
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	f022 0202 	bic.w	r2, r2, #2
 800f228:	605a      	str	r2, [r3, #4]

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800f22a:	f7f2 fa11 	bl	8001650 <HAL_GetTick>
 800f22e:	4603      	mov	r3, r0
 800f230:	461a      	mov	r2, r3
 800f232:	2164      	movs	r1, #100	; 0x64
 800f234:	6978      	ldr	r0, [r7, #20]
 800f236:	f000 fbd5 	bl	800f9e4 <SPI_EndRxTxTransaction>
 800f23a:	4603      	mov	r3, r0
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d002      	beq.n	800f246 <SPI_DMATxAbortCallback+0x42>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	2240      	movs	r2, #64	; 0x40
 800f244:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f254:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800f256:	f7f2 f9fb 	bl	8001650 <HAL_GetTick>
 800f25a:	4603      	mov	r3, r0
 800f25c:	9300      	str	r3, [sp, #0]
 800f25e:	2364      	movs	r3, #100	; 0x64
 800f260:	2200      	movs	r2, #0
 800f262:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f266:	6978      	ldr	r0, [r7, #20]
 800f268:	f000 fad2 	bl	800f810 <SPI_WaitFifoStateUntilTimeout>
 800f26c:	4603      	mov	r3, r0
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d002      	beq.n	800f278 <SPI_DMATxAbortCallback+0x74>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	2240      	movs	r2, #64	; 0x40
 800f276:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d004      	beq.n	800f28a <SPI_DMATxAbortCallback+0x86>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f286:	2b00      	cmp	r3, #0
 800f288:	d127      	bne.n	800f2da <SPI_DMATxAbortCallback+0xd6>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	2200      	movs	r2, #0
 800f28e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	2200      	movs	r2, #0
 800f296:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f29c:	2b40      	cmp	r3, #64	; 0x40
 800f29e:	d002      	beq.n	800f2a6 <SPI_DMATxAbortCallback+0xa2>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	613b      	str	r3, [r7, #16]
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	68db      	ldr	r3, [r3, #12]
 800f2b0:	613b      	str	r3, [r7, #16]
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	613b      	str	r3, [r7, #16]
 800f2ba:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f2bc:	2300      	movs	r3, #0
 800f2be:	60fb      	str	r3, [r7, #12]
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	689b      	ldr	r3, [r3, #8]
 800f2c6:	60fb      	str	r3, [r7, #12]
 800f2c8:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	2201      	movs	r2, #1
 800f2ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 800f2d2:	6978      	ldr	r0, [r7, #20]
 800f2d4:	f7ff fe24 	bl	800ef20 <HAL_SPI_AbortCpltCallback>
 800f2d8:	e000      	b.n	800f2dc <SPI_DMATxAbortCallback+0xd8>
      return;
 800f2da:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f2dc:	3718      	adds	r7, #24
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}

0800f2e2 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800f2e2:	b580      	push	{r7, lr}
 800f2e4:	b088      	sub	sp, #32
 800f2e6:	af02      	add	r7, sp, #8
 800f2e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ee:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	681a      	ldr	r2, [r3, #0]
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f2fe:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f304:	2200      	movs	r2, #0
 800f306:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	685a      	ldr	r2, [r3, #4]
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f022 0201 	bic.w	r2, r2, #1
 800f316:	605a      	str	r2, [r3, #4]

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800f318:	f7f2 f99a 	bl	8001650 <HAL_GetTick>
 800f31c:	4603      	mov	r3, r0
 800f31e:	9300      	str	r3, [sp, #0]
 800f320:	2364      	movs	r3, #100	; 0x64
 800f322:	2200      	movs	r2, #0
 800f324:	2180      	movs	r1, #128	; 0x80
 800f326:	6978      	ldr	r0, [r7, #20]
 800f328:	f000 f9ea 	bl	800f700 <SPI_WaitFlagStateUntilTimeout>
 800f32c:	4603      	mov	r3, r0
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d002      	beq.n	800f338 <SPI_DMARxAbortCallback+0x56>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	2240      	movs	r2, #64	; 0x40
 800f336:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800f338:	f7f2 f98a 	bl	8001650 <HAL_GetTick>
 800f33c:	4603      	mov	r3, r0
 800f33e:	9300      	str	r3, [sp, #0]
 800f340:	2364      	movs	r3, #100	; 0x64
 800f342:	2200      	movs	r2, #0
 800f344:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f348:	6978      	ldr	r0, [r7, #20]
 800f34a:	f000 fa61 	bl	800f810 <SPI_WaitFifoStateUntilTimeout>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b00      	cmp	r3, #0
 800f352:	d002      	beq.n	800f35a <SPI_DMARxAbortCallback+0x78>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	2240      	movs	r2, #64	; 0x40
 800f358:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d004      	beq.n	800f36c <SPI_DMARxAbortCallback+0x8a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d127      	bne.n	800f3bc <SPI_DMARxAbortCallback+0xda>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	2200      	movs	r2, #0
 800f370:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	2200      	movs	r2, #0
 800f378:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f37e:	2b40      	cmp	r3, #64	; 0x40
 800f380:	d002      	beq.n	800f388 <SPI_DMARxAbortCallback+0xa6>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	2200      	movs	r2, #0
 800f386:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f388:	2300      	movs	r3, #0
 800f38a:	613b      	str	r3, [r7, #16]
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	68db      	ldr	r3, [r3, #12]
 800f392:	613b      	str	r3, [r7, #16]
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	689b      	ldr	r3, [r3, #8]
 800f39a:	613b      	str	r3, [r7, #16]
 800f39c:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f39e:	2300      	movs	r3, #0
 800f3a0:	60fb      	str	r3, [r7, #12]
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	689b      	ldr	r3, [r3, #8]
 800f3a8:	60fb      	str	r3, [r7, #12]
 800f3aa:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 800f3b4:	6978      	ldr	r0, [r7, #20]
 800f3b6:	f7ff fdb3 	bl	800ef20 <HAL_SPI_AbortCpltCallback>
 800f3ba:	e000      	b.n	800f3be <SPI_DMARxAbortCallback+0xdc>
      return;
 800f3bc:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f3be:	3718      	adds	r7, #24
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d923      	bls.n	800f420 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	68da      	ldr	r2, [r3, #12]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e2:	b292      	uxth	r2, r2
 800f3e4:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ea:	1c9a      	adds	r2, r3, #2
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	3b02      	subs	r3, #2
 800f3fa:	b29a      	uxth	r2, r3
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f408:	b29b      	uxth	r3, r3
 800f40a:	2b01      	cmp	r3, #1
 800f40c:	d11f      	bne.n	800f44e <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	685a      	ldr	r2, [r3, #4]
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f41c:	605a      	str	r2, [r3, #4]
 800f41e:	e016      	b.n	800f44e <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	f103 020c 	add.w	r2, r3, #12
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f42c:	7812      	ldrb	r2, [r2, #0]
 800f42e:	b2d2      	uxtb	r2, r2
 800f430:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f436:	1c5a      	adds	r2, r3, #1
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f442:	b29b      	uxth	r3, r3
 800f444:	3b01      	subs	r3, #1
 800f446:	b29a      	uxth	r2, r3
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f454:	b29b      	uxth	r3, r3
 800f456:	2b00      	cmp	r3, #0
 800f458:	d10f      	bne.n	800f47a <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	685a      	ldr	r2, [r3, #4]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800f468:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f46e:	b29b      	uxth	r3, r3
 800f470:	2b00      	cmp	r3, #0
 800f472:	d102      	bne.n	800f47a <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f000 fafb 	bl	800fa70 <SPI_CloseRxTx_ISR>
    }
  }
}
 800f47a:	bf00      	nop
 800f47c:	3708      	adds	r7, #8
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f482:	b580      	push	{r7, lr}
 800f484:	b082      	sub	sp, #8
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f48e:	b29b      	uxth	r3, r3
 800f490:	2b01      	cmp	r3, #1
 800f492:	d912      	bls.n	800f4ba <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f498:	881a      	ldrh	r2, [r3, #0]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4a4:	1c9a      	adds	r2, r3, #2
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	3b02      	subs	r3, #2
 800f4b2:	b29a      	uxth	r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f4b8:	e012      	b.n	800f4e0 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	330c      	adds	r3, #12
 800f4c4:	7812      	ldrb	r2, [r2, #0]
 800f4c6:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4cc:	1c5a      	adds	r2, r3, #1
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	3b01      	subs	r3, #1
 800f4da:	b29a      	uxth	r2, r3
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d110      	bne.n	800f50c <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	685a      	ldr	r2, [r3, #4]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f4f8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f500:	b29b      	uxth	r3, r3
 800f502:	2b00      	cmp	r3, #0
 800f504:	d102      	bne.n	800f50c <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 fab2 	bl	800fa70 <SPI_CloseRxTx_ISR>
    }
  }
}
 800f50c:	bf00      	nop
 800f50e:	3708      	adds	r7, #8
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	68da      	ldr	r2, [r3, #12]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f526:	b292      	uxth	r2, r2
 800f528:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f52e:	1c9a      	adds	r2, r3, #2
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	3b01      	subs	r3, #1
 800f53e:	b29a      	uxth	r2, r3
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d10f      	bne.n	800f572 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	685a      	ldr	r2, [r3, #4]
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f560:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f566:	b29b      	uxth	r3, r3
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d102      	bne.n	800f572 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 fa7f 	bl	800fa70 <SPI_CloseRxTx_ISR>
    }
  }
}
 800f572:	bf00      	nop
 800f574:	3708      	adds	r7, #8
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}

0800f57a <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f57a:	b580      	push	{r7, lr}
 800f57c:	b082      	sub	sp, #8
 800f57e:	af00      	add	r7, sp, #0
 800f580:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f586:	881a      	ldrh	r2, [r3, #0]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f592:	1c9a      	adds	r2, r3, #2
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f59c:	b29b      	uxth	r3, r3
 800f59e:	3b01      	subs	r3, #1
 800f5a0:	b29a      	uxth	r2, r3
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d110      	bne.n	800f5d2 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	685a      	ldr	r2, [r3, #4]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f5be:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f5c6:	b29b      	uxth	r3, r3
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d102      	bne.n	800f5d2 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f000 fa4f 	bl	800fa70 <SPI_CloseRxTx_ISR>
    }
  }
}
 800f5d2:	bf00      	nop
 800f5d4:	3708      	adds	r7, #8
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}

0800f5da <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f5da:	b580      	push	{r7, lr}
 800f5dc:	b082      	sub	sp, #8
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f103 020c 	add.w	r2, r3, #12
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5ee:	7812      	ldrb	r2, [r2, #0]
 800f5f0:	b2d2      	uxtb	r2, r2
 800f5f2:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5f8:	1c5a      	adds	r2, r3, #1
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f604:	b29b      	uxth	r3, r3
 800f606:	3b01      	subs	r3, #1
 800f608:	b29a      	uxth	r2, r3
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f616:	b29b      	uxth	r3, r3
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d102      	bne.n	800f622 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f000 fa69 	bl	800faf4 <SPI_CloseRx_ISR>
  }
}
 800f622:	bf00      	nop
 800f624:	3708      	adds	r7, #8
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b082      	sub	sp, #8
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	68da      	ldr	r2, [r3, #12]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f63c:	b292      	uxth	r2, r2
 800f63e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f644:	1c9a      	adds	r2, r3, #2
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f650:	b29b      	uxth	r3, r3
 800f652:	3b01      	subs	r3, #1
 800f654:	b29a      	uxth	r2, r3
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f662:	b29b      	uxth	r3, r3
 800f664:	2b00      	cmp	r3, #0
 800f666:	d102      	bne.n	800f66e <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f000 fa43 	bl	800faf4 <SPI_CloseRx_ISR>
  }
}
 800f66e:	bf00      	nop
 800f670:	3708      	adds	r7, #8
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}

0800f676 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f676:	b580      	push	{r7, lr}
 800f678:	b082      	sub	sp, #8
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	330c      	adds	r3, #12
 800f688:	7812      	ldrb	r2, [r2, #0]
 800f68a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f690:	1c5a      	adds	r2, r3, #1
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	3b01      	subs	r3, #1
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d102      	bne.n	800f6b4 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f000 fa50 	bl	800fb54 <SPI_CloseTx_ISR>
  }
}
 800f6b4:	bf00      	nop
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b082      	sub	sp, #8
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c8:	881a      	ldrh	r2, [r3, #0]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6d4:	1c9a      	adds	r2, r3, #2
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	3b01      	subs	r3, #1
 800f6e2:	b29a      	uxth	r2, r3
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d102      	bne.n	800f6f8 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f000 fa2e 	bl	800fb54 <SPI_CloseTx_ISR>
  }
}
 800f6f8:	bf00      	nop
 800f6fa:	3708      	adds	r7, #8
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b088      	sub	sp, #32
 800f704:	af00      	add	r7, sp, #0
 800f706:	60f8      	str	r0, [r7, #12]
 800f708:	60b9      	str	r1, [r7, #8]
 800f70a:	603b      	str	r3, [r7, #0]
 800f70c:	4613      	mov	r3, r2
 800f70e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f710:	f7f1 ff9e 	bl	8001650 <HAL_GetTick>
 800f714:	4602      	mov	r2, r0
 800f716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f718:	1a9b      	subs	r3, r3, r2
 800f71a:	683a      	ldr	r2, [r7, #0]
 800f71c:	4413      	add	r3, r2
 800f71e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f720:	f7f1 ff96 	bl	8001650 <HAL_GetTick>
 800f724:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f726:	4b39      	ldr	r3, [pc, #228]	; (800f80c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	015b      	lsls	r3, r3, #5
 800f72c:	0d1b      	lsrs	r3, r3, #20
 800f72e:	69fa      	ldr	r2, [r7, #28]
 800f730:	fb02 f303 	mul.w	r3, r2, r3
 800f734:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f736:	e054      	b.n	800f7e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f73e:	d050      	beq.n	800f7e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f740:	f7f1 ff86 	bl	8001650 <HAL_GetTick>
 800f744:	4602      	mov	r2, r0
 800f746:	69bb      	ldr	r3, [r7, #24]
 800f748:	1ad3      	subs	r3, r2, r3
 800f74a:	69fa      	ldr	r2, [r7, #28]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d902      	bls.n	800f756 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f750:	69fb      	ldr	r3, [r7, #28]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d13d      	bne.n	800f7d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	685a      	ldr	r2, [r3, #4]
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f764:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	685b      	ldr	r3, [r3, #4]
 800f76a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f76e:	d111      	bne.n	800f794 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	689b      	ldr	r3, [r3, #8]
 800f774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f778:	d004      	beq.n	800f784 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	689b      	ldr	r3, [r3, #8]
 800f77e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f782:	d107      	bne.n	800f794 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	681a      	ldr	r2, [r3, #0]
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f792:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f79c:	d10f      	bne.n	800f7be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	681a      	ldr	r2, [r3, #0]
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f7ac:	601a      	str	r2, [r3, #0]
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	681a      	ldr	r2, [r3, #0]
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f7bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f7ce:	2303      	movs	r3, #3
 800f7d0:	e017      	b.n	800f802 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d101      	bne.n	800f7dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f7d8:	2300      	movs	r3, #0
 800f7da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	3b01      	subs	r3, #1
 800f7e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	689a      	ldr	r2, [r3, #8]
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	4013      	ands	r3, r2
 800f7ec:	68ba      	ldr	r2, [r7, #8]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	bf0c      	ite	eq
 800f7f2:	2301      	moveq	r3, #1
 800f7f4:	2300      	movne	r3, #0
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	461a      	mov	r2, r3
 800f7fa:	79fb      	ldrb	r3, [r7, #7]
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d19b      	bne.n	800f738 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f800:	2300      	movs	r3, #0
}
 800f802:	4618      	mov	r0, r3
 800f804:	3720      	adds	r7, #32
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
 800f80a:	bf00      	nop
 800f80c:	20000008 	.word	0x20000008

0800f810 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b088      	sub	sp, #32
 800f814:	af00      	add	r7, sp, #0
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	607a      	str	r2, [r7, #4]
 800f81c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f81e:	f7f1 ff17 	bl	8001650 <HAL_GetTick>
 800f822:	4602      	mov	r2, r0
 800f824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f826:	1a9b      	subs	r3, r3, r2
 800f828:	683a      	ldr	r2, [r7, #0]
 800f82a:	4413      	add	r3, r2
 800f82c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f82e:	f7f1 ff0f 	bl	8001650 <HAL_GetTick>
 800f832:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f834:	4b3e      	ldr	r3, [pc, #248]	; (800f930 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800f836:	681a      	ldr	r2, [r3, #0]
 800f838:	4613      	mov	r3, r2
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	4413      	add	r3, r2
 800f83e:	00da      	lsls	r2, r3, #3
 800f840:	1ad3      	subs	r3, r2, r3
 800f842:	0d1b      	lsrs	r3, r3, #20
 800f844:	69fa      	ldr	r2, [r7, #28]
 800f846:	fb02 f303 	mul.w	r3, r2, r3
 800f84a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800f84c:	e062      	b.n	800f914 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f854:	d109      	bne.n	800f86a <SPI_WaitFifoStateUntilTimeout+0x5a>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d106      	bne.n	800f86a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	330c      	adds	r3, #12
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	b2db      	uxtb	r3, r3
 800f866:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800f868:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f870:	d050      	beq.n	800f914 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f872:	f7f1 feed 	bl	8001650 <HAL_GetTick>
 800f876:	4602      	mov	r2, r0
 800f878:	69bb      	ldr	r3, [r7, #24]
 800f87a:	1ad3      	subs	r3, r2, r3
 800f87c:	69fa      	ldr	r2, [r7, #28]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d902      	bls.n	800f888 <SPI_WaitFifoStateUntilTimeout+0x78>
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d13d      	bne.n	800f904 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	685a      	ldr	r2, [r3, #4]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f896:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f8a0:	d111      	bne.n	800f8c6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	689b      	ldr	r3, [r3, #8]
 800f8a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8aa:	d004      	beq.n	800f8b6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	689b      	ldr	r3, [r3, #8]
 800f8b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8b4:	d107      	bne.n	800f8c6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f8c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8ce:	d10f      	bne.n	800f8f0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f8de:	601a      	str	r2, [r3, #0]
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f8ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f900:	2303      	movs	r3, #3
 800f902:	e010      	b.n	800f926 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d101      	bne.n	800f90e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800f90a:	2300      	movs	r3, #0
 800f90c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	3b01      	subs	r3, #1
 800f912:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	689a      	ldr	r2, [r3, #8]
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	4013      	ands	r3, r2
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	429a      	cmp	r2, r3
 800f922:	d194      	bne.n	800f84e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800f924:	2300      	movs	r3, #0
}
 800f926:	4618      	mov	r0, r3
 800f928:	3720      	adds	r7, #32
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	20000008 	.word	0x20000008

0800f934 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b086      	sub	sp, #24
 800f938:	af02      	add	r7, sp, #8
 800f93a:	60f8      	str	r0, [r7, #12]
 800f93c:	60b9      	str	r1, [r7, #8]
 800f93e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f948:	d111      	bne.n	800f96e <SPI_EndRxTransaction+0x3a>
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	689b      	ldr	r3, [r3, #8]
 800f94e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f952:	d004      	beq.n	800f95e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	689b      	ldr	r3, [r3, #8]
 800f958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f95c:	d107      	bne.n	800f96e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f96c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	9300      	str	r3, [sp, #0]
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	2200      	movs	r2, #0
 800f976:	2180      	movs	r1, #128	; 0x80
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f7ff fec1 	bl	800f700 <SPI_WaitFlagStateUntilTimeout>
 800f97e:	4603      	mov	r3, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d007      	beq.n	800f994 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f988:	f043 0220 	orr.w	r2, r3, #32
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f990:	2303      	movs	r3, #3
 800f992:	e023      	b.n	800f9dc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f99c:	d11d      	bne.n	800f9da <SPI_EndRxTransaction+0xa6>
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	689b      	ldr	r3, [r3, #8]
 800f9a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9a6:	d004      	beq.n	800f9b2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	689b      	ldr	r3, [r3, #8]
 800f9ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9b0:	d113      	bne.n	800f9da <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	9300      	str	r3, [sp, #0]
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f9be:	68f8      	ldr	r0, [r7, #12]
 800f9c0:	f7ff ff26 	bl	800f810 <SPI_WaitFifoStateUntilTimeout>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d007      	beq.n	800f9da <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f9ce:	f043 0220 	orr.w	r2, r3, #32
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800f9d6:	2303      	movs	r3, #3
 800f9d8:	e000      	b.n	800f9dc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800f9da:	2300      	movs	r3, #0
}
 800f9dc:	4618      	mov	r0, r3
 800f9de:	3710      	adds	r7, #16
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}

0800f9e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b086      	sub	sp, #24
 800f9e8:	af02      	add	r7, sp, #8
 800f9ea:	60f8      	str	r0, [r7, #12]
 800f9ec:	60b9      	str	r1, [r7, #8]
 800f9ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	9300      	str	r3, [sp, #0]
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800f9fc:	68f8      	ldr	r0, [r7, #12]
 800f9fe:	f7ff ff07 	bl	800f810 <SPI_WaitFifoStateUntilTimeout>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d007      	beq.n	800fa18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fa0c:	f043 0220 	orr.w	r2, r3, #32
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fa14:	2303      	movs	r3, #3
 800fa16:	e027      	b.n	800fa68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	9300      	str	r3, [sp, #0]
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	2180      	movs	r1, #128	; 0x80
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f7ff fe6c 	bl	800f700 <SPI_WaitFlagStateUntilTimeout>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d007      	beq.n	800fa3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fa32:	f043 0220 	orr.w	r2, r3, #32
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fa3a:	2303      	movs	r3, #3
 800fa3c:	e014      	b.n	800fa68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	9300      	str	r3, [sp, #0]
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	2200      	movs	r2, #0
 800fa46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fa4a:	68f8      	ldr	r0, [r7, #12]
 800fa4c:	f7ff fee0 	bl	800f810 <SPI_WaitFifoStateUntilTimeout>
 800fa50:	4603      	mov	r3, r0
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d007      	beq.n	800fa66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fa5a:	f043 0220 	orr.w	r2, r3, #32
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fa62:	2303      	movs	r3, #3
 800fa64:	e000      	b.n	800fa68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800fa66:	2300      	movs	r3, #0
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3710      	adds	r7, #16
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b084      	sub	sp, #16
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fa78:	f7f1 fdea 	bl	8001650 <HAL_GetTick>
 800fa7c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	685a      	ldr	r2, [r3, #4]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f022 0220 	bic.w	r2, r2, #32
 800fa8c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800fa8e:	68fa      	ldr	r2, [r7, #12]
 800fa90:	2164      	movs	r1, #100	; 0x64
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f7ff ffa6 	bl	800f9e4 <SPI_EndRxTxTransaction>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d005      	beq.n	800faaa <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800faa2:	f043 0220 	orr.w	r2, r3, #32
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d115      	bne.n	800fade <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fab8:	b2db      	uxtb	r3, r3
 800faba:	2b04      	cmp	r3, #4
 800fabc:	d107      	bne.n	800face <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2201      	movs	r2, #1
 800fac2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f7ff f9ee 	bl	800eea8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800facc:	e00e      	b.n	800faec <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2201      	movs	r2, #1
 800fad2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f7ff f9f0 	bl	800eebc <HAL_SPI_TxRxCpltCallback>
}
 800fadc:	e006      	b.n	800faec <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2201      	movs	r2, #1
 800fae2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f7ff fa10 	bl	800ef0c <HAL_SPI_ErrorCallback>
}
 800faec:	bf00      	nop
 800faee:	3710      	adds	r7, #16
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	685a      	ldr	r2, [r3, #4]
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800fb0a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800fb0c:	f7f1 fda0 	bl	8001650 <HAL_GetTick>
 800fb10:	4603      	mov	r3, r0
 800fb12:	461a      	mov	r2, r3
 800fb14:	2164      	movs	r1, #100	; 0x64
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f7ff ff0c 	bl	800f934 <SPI_EndRxTransaction>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d005      	beq.n	800fb2e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb26:	f043 0220 	orr.w	r2, r3, #32
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2201      	movs	r2, #1
 800fb32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d103      	bne.n	800fb46 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f7ff f9b2 	bl	800eea8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800fb44:	e002      	b.n	800fb4c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f7ff f9e0 	bl	800ef0c <HAL_SPI_ErrorCallback>
}
 800fb4c:	bf00      	nop
 800fb4e:	3708      	adds	r7, #8
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}

0800fb54 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b084      	sub	sp, #16
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fb5c:	f7f1 fd78 	bl	8001650 <HAL_GetTick>
 800fb60:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	685a      	ldr	r2, [r3, #4]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800fb70:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800fb72:	68fa      	ldr	r2, [r7, #12]
 800fb74:	2164      	movs	r1, #100	; 0x64
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f7ff ff34 	bl	800f9e4 <SPI_EndRxTxTransaction>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d005      	beq.n	800fb8e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb86:	f043 0220 	orr.w	r2, r3, #32
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	689b      	ldr	r3, [r3, #8]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d10a      	bne.n	800fbac <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fb96:	2300      	movs	r3, #0
 800fb98:	60bb      	str	r3, [r7, #8]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	68db      	ldr	r3, [r3, #12]
 800fba0:	60bb      	str	r3, [r7, #8]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	689b      	ldr	r3, [r3, #8]
 800fba8:	60bb      	str	r3, [r7, #8]
 800fbaa:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2201      	movs	r2, #1
 800fbb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d003      	beq.n	800fbc4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f7ff f9a5 	bl	800ef0c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800fbc2:	e002      	b.n	800fbca <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f7ff f965 	bl	800ee94 <HAL_SPI_TxCpltCallback>
}
 800fbca:	bf00      	nop
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
	...

0800fbd4 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b086      	sub	sp, #24
 800fbd8:	af02      	add	r7, sp, #8
 800fbda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	681a      	ldr	r2, [r3, #0]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fbea:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800fbec:	4b27      	ldr	r3, [pc, #156]	; (800fc8c <SPI_AbortRx_ISR+0xb8>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	4a27      	ldr	r2, [pc, #156]	; (800fc90 <SPI_AbortRx_ISR+0xbc>)
 800fbf2:	fba2 2303 	umull	r2, r3, r2, r3
 800fbf6:	0a5b      	lsrs	r3, r3, #9
 800fbf8:	2264      	movs	r2, #100	; 0x64
 800fbfa:	fb02 f303 	mul.w	r3, r2, r3
 800fbfe:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	685a      	ldr	r2, [r3, #4]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fc0e:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d106      	bne.n	800fc24 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800fc22:	e009      	b.n	800fc38 <SPI_AbortRx_ISR+0x64>
    }
    count--;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	3b01      	subs	r3, #1
 800fc28:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc34:	2b40      	cmp	r3, #64	; 0x40
 800fc36:	d0eb      	beq.n	800fc10 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800fc38:	f7f1 fd0a 	bl	8001650 <HAL_GetTick>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	9300      	str	r3, [sp, #0]
 800fc40:	2364      	movs	r3, #100	; 0x64
 800fc42:	2200      	movs	r2, #0
 800fc44:	2180      	movs	r1, #128	; 0x80
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f7ff fd5a 	bl	800f700 <SPI_WaitFlagStateUntilTimeout>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d002      	beq.n	800fc58 <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2240      	movs	r2, #64	; 0x40
 800fc56:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800fc58:	f7f1 fcfa 	bl	8001650 <HAL_GetTick>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	9300      	str	r3, [sp, #0]
 800fc60:	2364      	movs	r3, #100	; 0x64
 800fc62:	2200      	movs	r2, #0
 800fc64:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7ff fdd1 	bl	800f810 <SPI_WaitFifoStateUntilTimeout>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d002      	beq.n	800fc7a <SPI_AbortRx_ISR+0xa6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2240      	movs	r2, #64	; 0x40
 800fc78:	661a      	str	r2, [r3, #96]	; 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2207      	movs	r2, #7
 800fc7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 800fc82:	bf00      	nop
 800fc84:	3710      	adds	r7, #16
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	20000008 	.word	0x20000008
 800fc90:	057619f1 	.word	0x057619f1

0800fc94 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b086      	sub	sp, #24
 800fc98:	af02      	add	r7, sp, #8
 800fc9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800fc9c:	4b4c      	ldr	r3, [pc, #304]	; (800fdd0 <SPI_AbortTx_ISR+0x13c>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4a4c      	ldr	r2, [pc, #304]	; (800fdd4 <SPI_AbortTx_ISR+0x140>)
 800fca2:	fba2 2303 	umull	r2, r3, r2, r3
 800fca6:	0a5b      	lsrs	r3, r3, #9
 800fca8:	2264      	movs	r2, #100	; 0x64
 800fcaa:	fb02 f303 	mul.w	r3, r2, r3
 800fcae:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	685a      	ldr	r2, [r3, #4]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fcbe:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d106      	bne.n	800fcd4 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fcca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800fcd2:	e009      	b.n	800fce8 <SPI_AbortTx_ISR+0x54>
    }
    count--;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	3b01      	subs	r3, #1
 800fcd8:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fce4:	2b80      	cmp	r3, #128	; 0x80
 800fce6:	d0eb      	beq.n	800fcc0 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800fce8:	f7f1 fcb2 	bl	8001650 <HAL_GetTick>
 800fcec:	4603      	mov	r3, r0
 800fcee:	461a      	mov	r2, r3
 800fcf0:	2164      	movs	r1, #100	; 0x64
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f7ff fe76 	bl	800f9e4 <SPI_EndRxTxTransaction>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d002      	beq.n	800fd04 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2240      	movs	r2, #64	; 0x40
 800fd02:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	681a      	ldr	r2, [r3, #0]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fd12:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800fd14:	f7f1 fc9c 	bl	8001650 <HAL_GetTick>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	9300      	str	r3, [sp, #0]
 800fd1c:	2364      	movs	r3, #100	; 0x64
 800fd1e:	2200      	movs	r2, #0
 800fd20:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f7ff fd73 	bl	800f810 <SPI_WaitFifoStateUntilTimeout>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d002      	beq.n	800fd36 <SPI_AbortTx_ISR+0xa2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2240      	movs	r2, #64	; 0x40
 800fd34:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd40:	2b40      	cmp	r3, #64	; 0x40
 800fd42:	d13c      	bne.n	800fdbe <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	685a      	ldr	r2, [r3, #4]
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fd52:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d106      	bne.n	800fd68 <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800fd66:	e009      	b.n	800fd7c <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	3b01      	subs	r3, #1
 800fd6c:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd78:	2b40      	cmp	r3, #64	; 0x40
 800fd7a:	d0eb      	beq.n	800fd54 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800fd7c:	f7f1 fc68 	bl	8001650 <HAL_GetTick>
 800fd80:	4603      	mov	r3, r0
 800fd82:	9300      	str	r3, [sp, #0]
 800fd84:	2364      	movs	r3, #100	; 0x64
 800fd86:	2200      	movs	r2, #0
 800fd88:	2180      	movs	r1, #128	; 0x80
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f7ff fcb8 	bl	800f700 <SPI_WaitFlagStateUntilTimeout>
 800fd90:	4603      	mov	r3, r0
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d002      	beq.n	800fd9c <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2240      	movs	r2, #64	; 0x40
 800fd9a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800fd9c:	f7f1 fc58 	bl	8001650 <HAL_GetTick>
 800fda0:	4603      	mov	r3, r0
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	2364      	movs	r3, #100	; 0x64
 800fda6:	2200      	movs	r2, #0
 800fda8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f7ff fd2f 	bl	800f810 <SPI_WaitFifoStateUntilTimeout>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d002      	beq.n	800fdbe <SPI_AbortTx_ISR+0x12a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2240      	movs	r2, #64	; 0x40
 800fdbc:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2207      	movs	r2, #7
 800fdc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 800fdc6:	bf00      	nop
 800fdc8:	3710      	adds	r7, #16
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	20000008 	.word	0x20000008
 800fdd4:	057619f1 	.word	0x057619f1

0800fdd8 <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b085      	sub	sp, #20
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 800fde0:	2300      	movs	r3, #0
 800fde2:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800fde4:	e00c      	b.n	800fe00 <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 800fde6:	7bfb      	ldrb	r3, [r7, #15]
 800fde8:	3301      	adds	r3, #1
 800fdea:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	68db      	ldr	r3, [r3, #12]
 800fdf2:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 800fdf4:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 800fdf6:	7bfb      	ldrb	r3, [r7, #15]
 800fdf8:	2b04      	cmp	r3, #4
 800fdfa:	d101      	bne.n	800fe00 <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 800fdfc:	2303      	movs	r3, #3
 800fdfe:	e007      	b.n	800fe10 <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	689b      	ldr	r3, [r3, #8]
 800fe06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1eb      	bne.n	800fde6 <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 800fe0e:	2300      	movs	r3, #0
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3714      	adds	r7, #20
 800fe14:	46bd      	mov	sp, r7
 800fe16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1a:	4770      	bx	lr

0800fe1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d101      	bne.n	800fe2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	e040      	b.n	800feb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d106      	bne.n	800fe44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f7f1 facc 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2224      	movs	r2, #36	; 0x24
 800fe48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	f022 0201 	bic.w	r2, r2, #1
 800fe58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f001 fc58 	bl	8011710 <UART_SetConfig>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d101      	bne.n	800fe6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800fe66:	2301      	movs	r3, #1
 800fe68:	e022      	b.n	800feb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d002      	beq.n	800fe78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f001 fed6 	bl	8011c24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	685a      	ldr	r2, [r3, #4]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fe86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	689a      	ldr	r2, [r3, #8]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fe96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	681a      	ldr	r2, [r3, #0]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f042 0201 	orr.w	r2, r2, #1
 800fea6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f001 ff5d 	bl	8011d68 <UART_CheckIdleState>
 800feae:	4603      	mov	r3, r0
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	3708      	adds	r7, #8
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}

0800feb8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d101      	bne.n	800feca <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800fec6:	2301      	movs	r3, #1
 800fec8:	e048      	b.n	800ff5c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d106      	bne.n	800fee0 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2200      	movs	r2, #0
 800fed6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f7f1 fa7e 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2224      	movs	r2, #36	; 0x24
 800fee4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	681a      	ldr	r2, [r3, #0]
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	f022 0201 	bic.w	r2, r2, #1
 800fef4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f001 fc0a 	bl	8011710 <UART_SetConfig>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d101      	bne.n	800ff06 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800ff02:	2301      	movs	r3, #1
 800ff04:	e02a      	b.n	800ff5c <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d002      	beq.n	800ff14 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f001 fe88 	bl	8011c24 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	685a      	ldr	r2, [r3, #4]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ff22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	689a      	ldr	r2, [r3, #8]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800ff32:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	689a      	ldr	r2, [r3, #8]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	f042 0208 	orr.w	r2, r2, #8
 800ff42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	681a      	ldr	r2, [r3, #0]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	f042 0201 	orr.w	r2, r2, #1
 800ff52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f001 ff07 	bl	8011d68 <UART_CheckIdleState>
 800ff5a:	4603      	mov	r3, r0
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3708      	adds	r7, #8
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d101      	bne.n	800ff78 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 800ff74:	2301      	movs	r3, #1
 800ff76:	e05f      	b.n	8010038 <HAL_LIN_Init+0xd4>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	69db      	ldr	r3, [r3, #28]
 800ff7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff80:	d101      	bne.n	800ff86 <HAL_LIN_Init+0x22>
  {
    return HAL_ERROR;
 800ff82:	2301      	movs	r3, #1
 800ff84:	e058      	b.n	8010038 <HAL_LIN_Init+0xd4>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	689b      	ldr	r3, [r3, #8]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d001      	beq.n	800ff92 <HAL_LIN_Init+0x2e>
  {
    return HAL_ERROR;
 800ff8e:	2301      	movs	r3, #1
 800ff90:	e052      	b.n	8010038 <HAL_LIN_Init+0xd4>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d106      	bne.n	800ffa8 <HAL_LIN_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f7f1 fa1a 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2224      	movs	r2, #36	; 0x24
 800ffac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	681a      	ldr	r2, [r3, #0]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	f022 0201 	bic.w	r2, r2, #1
 800ffbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f001 fba6 	bl	8011710 <UART_SetConfig>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	2b01      	cmp	r3, #1
 800ffc8:	d101      	bne.n	800ffce <HAL_LIN_Init+0x6a>
  {
    return HAL_ERROR;
 800ffca:	2301      	movs	r3, #1
 800ffcc:	e034      	b.n	8010038 <HAL_LIN_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d002      	beq.n	800ffdc <HAL_LIN_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f001 fe24 	bl	8011c24 <UART_AdvFeatureConfig>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	685a      	ldr	r2, [r3, #4]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ffea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	689a      	ldr	r2, [r3, #8]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fffa:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	685a      	ldr	r2, [r3, #4]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801000a:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	f023 0120 	bic.w	r1, r3, #32
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	683a      	ldr	r2, [r7, #0]
 801001c:	430a      	orrs	r2, r1
 801001e:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	681a      	ldr	r2, [r3, #0]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f042 0201 	orr.w	r2, r2, #1
 801002e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f001 fe99 	bl	8011d68 <UART_CheckIdleState>
 8010036:	4603      	mov	r3, r0
}
 8010038:	4618      	mov	r0, r3
 801003a:	3708      	adds	r7, #8
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b084      	sub	sp, #16
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	460b      	mov	r3, r1
 801004a:	607a      	str	r2, [r7, #4]
 801004c:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d101      	bne.n	8010058 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8010054:	2301      	movs	r3, #1
 8010056:	e059      	b.n	801010c <HAL_MultiProcessor_Init+0xcc>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801005c:	2b00      	cmp	r3, #0
 801005e:	d106      	bne.n	801006e <HAL_MultiProcessor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2200      	movs	r2, #0
 8010064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010068:	68f8      	ldr	r0, [r7, #12]
 801006a:	f7f1 f9b7 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	2224      	movs	r2, #36	; 0x24
 8010072:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	681a      	ldr	r2, [r3, #0]
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	f022 0201 	bic.w	r2, r2, #1
 8010082:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010084:	68f8      	ldr	r0, [r7, #12]
 8010086:	f001 fb43 	bl	8011710 <UART_SetConfig>
 801008a:	4603      	mov	r3, r0
 801008c:	2b01      	cmp	r3, #1
 801008e:	d101      	bne.n	8010094 <HAL_MultiProcessor_Init+0x54>
  {
    return HAL_ERROR;
 8010090:	2301      	movs	r3, #1
 8010092:	e03b      	b.n	801010c <HAL_MultiProcessor_Init+0xcc>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010098:	2b00      	cmp	r3, #0
 801009a:	d002      	beq.n	80100a2 <HAL_MultiProcessor_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 801009c:	68f8      	ldr	r0, [r7, #12]
 801009e:	f001 fdc1 	bl	8011c24 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	685a      	ldr	r2, [r3, #4]
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80100b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	689a      	ldr	r2, [r3, #8]
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80100c0:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80100c8:	d10a      	bne.n	80100e0 <HAL_MultiProcessor_Init+0xa0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 80100d4:	7afb      	ldrb	r3, [r7, #11]
 80100d6:	061a      	lsls	r2, r3, #24
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	430a      	orrs	r2, r1
 80100de:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	430a      	orrs	r2, r1
 80100f2:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	681a      	ldr	r2, [r3, #0]
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f042 0201 	orr.w	r2, r2, #1
 8010102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010104:	68f8      	ldr	r0, [r7, #12]
 8010106:	f001 fe2f 	bl	8011d68 <UART_CheckIdleState>
 801010a:	4603      	mov	r3, r0
}
 801010c:	4618      	mov	r0, r3
 801010e:	3710      	adds	r7, #16
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b082      	sub	sp, #8
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d101      	bne.n	8010126 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8010122:	2301      	movs	r3, #1
 8010124:	e02b      	b.n	801017e <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2224      	movs	r2, #36	; 0x24
 801012a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	f022 0201 	bic.w	r2, r2, #1
 801013a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	2200      	movs	r2, #0
 8010142:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2200      	movs	r2, #0
 801014a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	2200      	movs	r2, #0
 8010152:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f7f1 f983 	bl	8001460 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2200      	movs	r2, #0
 801015e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2200      	movs	r2, #0
 8010166:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	2200      	movs	r2, #0
 801016c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2200      	movs	r2, #0
 8010172:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2200      	movs	r2, #0
 8010178:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 801017c:	2300      	movs	r3, #0
}
 801017e:	4618      	mov	r0, r3
 8010180:	3708      	adds	r7, #8
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8010186:	b480      	push	{r7}
 8010188:	b083      	sub	sp, #12
 801018a:	af00      	add	r7, sp, #0
 801018c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 801018e:	bf00      	nop
 8010190:	370c      	adds	r7, #12
 8010192:	46bd      	mov	sp, r7
 8010194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010198:	4770      	bx	lr
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 801019a:	b480      	push	{r7}
 801019c:	b083      	sub	sp, #12
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80101a2:	bf00      	nop
 80101a4:	370c      	adds	r7, #12
 80101a6:	46bd      	mov	sp, r7
 80101a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ac:	4770      	bx	lr

080101ae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b08a      	sub	sp, #40	; 0x28
 80101b2:	af02      	add	r7, sp, #8
 80101b4:	60f8      	str	r0, [r7, #12]
 80101b6:	60b9      	str	r1, [r7, #8]
 80101b8:	603b      	str	r3, [r7, #0]
 80101ba:	4613      	mov	r3, r2
 80101bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80101c2:	2b20      	cmp	r3, #32
 80101c4:	f040 8082 	bne.w	80102cc <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d002      	beq.n	80101d4 <HAL_UART_Transmit+0x26>
 80101ce:	88fb      	ldrh	r3, [r7, #6]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d101      	bne.n	80101d8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80101d4:	2301      	movs	r3, #1
 80101d6:	e07a      	b.n	80102ce <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80101de:	2b01      	cmp	r3, #1
 80101e0:	d101      	bne.n	80101e6 <HAL_UART_Transmit+0x38>
 80101e2:	2302      	movs	r3, #2
 80101e4:	e073      	b.n	80102ce <HAL_UART_Transmit+0x120>
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	2201      	movs	r2, #1
 80101ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	2200      	movs	r2, #0
 80101f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2221      	movs	r2, #33	; 0x21
 80101fa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80101fc:	f7f1 fa28 	bl	8001650 <HAL_GetTick>
 8010200:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	88fa      	ldrh	r2, [r7, #6]
 8010206:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	88fa      	ldrh	r2, [r7, #6]
 801020e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	689b      	ldr	r3, [r3, #8]
 8010216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801021a:	d108      	bne.n	801022e <HAL_UART_Transmit+0x80>
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	691b      	ldr	r3, [r3, #16]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d104      	bne.n	801022e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8010224:	2300      	movs	r3, #0
 8010226:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	61bb      	str	r3, [r7, #24]
 801022c:	e003      	b.n	8010236 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010232:	2300      	movs	r3, #0
 8010234:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2200      	movs	r2, #0
 801023a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 801023e:	e02d      	b.n	801029c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	9300      	str	r3, [sp, #0]
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	2200      	movs	r2, #0
 8010248:	2180      	movs	r1, #128	; 0x80
 801024a:	68f8      	ldr	r0, [r7, #12]
 801024c:	f001 fdd5 	bl	8011dfa <UART_WaitOnFlagUntilTimeout>
 8010250:	4603      	mov	r3, r0
 8010252:	2b00      	cmp	r3, #0
 8010254:	d001      	beq.n	801025a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8010256:	2303      	movs	r3, #3
 8010258:	e039      	b.n	80102ce <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 801025a:	69fb      	ldr	r3, [r7, #28]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d10b      	bne.n	8010278 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	881a      	ldrh	r2, [r3, #0]
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801026c:	b292      	uxth	r2, r2
 801026e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010270:	69bb      	ldr	r3, [r7, #24]
 8010272:	3302      	adds	r3, #2
 8010274:	61bb      	str	r3, [r7, #24]
 8010276:	e008      	b.n	801028a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	781a      	ldrb	r2, [r3, #0]
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	b292      	uxth	r2, r2
 8010282:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010284:	69fb      	ldr	r3, [r7, #28]
 8010286:	3301      	adds	r3, #1
 8010288:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010290:	b29b      	uxth	r3, r3
 8010292:	3b01      	subs	r3, #1
 8010294:	b29a      	uxth	r2, r3
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d1cb      	bne.n	8010240 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	9300      	str	r3, [sp, #0]
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	2200      	movs	r2, #0
 80102b0:	2140      	movs	r1, #64	; 0x40
 80102b2:	68f8      	ldr	r0, [r7, #12]
 80102b4:	f001 fda1 	bl	8011dfa <UART_WaitOnFlagUntilTimeout>
 80102b8:	4603      	mov	r3, r0
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d001      	beq.n	80102c2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80102be:	2303      	movs	r3, #3
 80102c0:	e005      	b.n	80102ce <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	2220      	movs	r2, #32
 80102c6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80102c8:	2300      	movs	r3, #0
 80102ca:	e000      	b.n	80102ce <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80102cc:	2302      	movs	r3, #2
  }
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3720      	adds	r7, #32
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}

080102d6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80102d6:	b580      	push	{r7, lr}
 80102d8:	b08a      	sub	sp, #40	; 0x28
 80102da:	af02      	add	r7, sp, #8
 80102dc:	60f8      	str	r0, [r7, #12]
 80102de:	60b9      	str	r1, [r7, #8]
 80102e0:	603b      	str	r3, [r7, #0]
 80102e2:	4613      	mov	r3, r2
 80102e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80102ea:	2b20      	cmp	r3, #32
 80102ec:	f040 80bf 	bne.w	801046e <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d002      	beq.n	80102fc <HAL_UART_Receive+0x26>
 80102f6:	88fb      	ldrh	r3, [r7, #6]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d101      	bne.n	8010300 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80102fc:	2301      	movs	r3, #1
 80102fe:	e0b7      	b.n	8010470 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010306:	2b01      	cmp	r3, #1
 8010308:	d101      	bne.n	801030e <HAL_UART_Receive+0x38>
 801030a:	2302      	movs	r3, #2
 801030c:	e0b0      	b.n	8010470 <HAL_UART_Receive+0x19a>
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2201      	movs	r2, #1
 8010312:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2200      	movs	r2, #0
 801031a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	2222      	movs	r2, #34	; 0x22
 8010322:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2200      	movs	r2, #0
 8010328:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801032a:	f7f1 f991 	bl	8001650 <HAL_GetTick>
 801032e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	88fa      	ldrh	r2, [r7, #6]
 8010334:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	88fa      	ldrh	r2, [r7, #6]
 801033c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	689b      	ldr	r3, [r3, #8]
 8010344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010348:	d10e      	bne.n	8010368 <HAL_UART_Receive+0x92>
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	691b      	ldr	r3, [r3, #16]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d105      	bne.n	801035e <HAL_UART_Receive+0x88>
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010358:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801035c:	e02d      	b.n	80103ba <HAL_UART_Receive+0xe4>
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	22ff      	movs	r2, #255	; 0xff
 8010362:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010366:	e028      	b.n	80103ba <HAL_UART_Receive+0xe4>
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	689b      	ldr	r3, [r3, #8]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d10d      	bne.n	801038c <HAL_UART_Receive+0xb6>
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	691b      	ldr	r3, [r3, #16]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d104      	bne.n	8010382 <HAL_UART_Receive+0xac>
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	22ff      	movs	r2, #255	; 0xff
 801037c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010380:	e01b      	b.n	80103ba <HAL_UART_Receive+0xe4>
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	227f      	movs	r2, #127	; 0x7f
 8010386:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801038a:	e016      	b.n	80103ba <HAL_UART_Receive+0xe4>
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	689b      	ldr	r3, [r3, #8]
 8010390:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010394:	d10d      	bne.n	80103b2 <HAL_UART_Receive+0xdc>
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	691b      	ldr	r3, [r3, #16]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d104      	bne.n	80103a8 <HAL_UART_Receive+0xd2>
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	227f      	movs	r2, #127	; 0x7f
 80103a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80103a6:	e008      	b.n	80103ba <HAL_UART_Receive+0xe4>
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	223f      	movs	r2, #63	; 0x3f
 80103ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80103b0:	e003      	b.n	80103ba <HAL_UART_Receive+0xe4>
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2200      	movs	r2, #0
 80103b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80103c0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	689b      	ldr	r3, [r3, #8]
 80103c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103ca:	d108      	bne.n	80103de <HAL_UART_Receive+0x108>
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	691b      	ldr	r3, [r3, #16]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d104      	bne.n	80103de <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80103d4:	2300      	movs	r3, #0
 80103d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	61bb      	str	r3, [r7, #24]
 80103dc:	e003      	b.n	80103e6 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80103e2:	2300      	movs	r3, #0
 80103e4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2200      	movs	r2, #0
 80103ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80103ee:	e033      	b.n	8010458 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	9300      	str	r3, [sp, #0]
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	2200      	movs	r2, #0
 80103f8:	2120      	movs	r1, #32
 80103fa:	68f8      	ldr	r0, [r7, #12]
 80103fc:	f001 fcfd 	bl	8011dfa <UART_WaitOnFlagUntilTimeout>
 8010400:	4603      	mov	r3, r0
 8010402:	2b00      	cmp	r3, #0
 8010404:	d001      	beq.n	801040a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8010406:	2303      	movs	r3, #3
 8010408:	e032      	b.n	8010470 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 801040a:	69fb      	ldr	r3, [r7, #28]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d10c      	bne.n	801042a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010416:	b29a      	uxth	r2, r3
 8010418:	8a7b      	ldrh	r3, [r7, #18]
 801041a:	4013      	ands	r3, r2
 801041c:	b29a      	uxth	r2, r3
 801041e:	69bb      	ldr	r3, [r7, #24]
 8010420:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010422:	69bb      	ldr	r3, [r7, #24]
 8010424:	3302      	adds	r3, #2
 8010426:	61bb      	str	r3, [r7, #24]
 8010428:	e00d      	b.n	8010446 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010430:	b29b      	uxth	r3, r3
 8010432:	b2da      	uxtb	r2, r3
 8010434:	8a7b      	ldrh	r3, [r7, #18]
 8010436:	b2db      	uxtb	r3, r3
 8010438:	4013      	ands	r3, r2
 801043a:	b2da      	uxtb	r2, r3
 801043c:	69fb      	ldr	r3, [r7, #28]
 801043e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8010440:	69fb      	ldr	r3, [r7, #28]
 8010442:	3301      	adds	r3, #1
 8010444:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801044c:	b29b      	uxth	r3, r3
 801044e:	3b01      	subs	r3, #1
 8010450:	b29a      	uxth	r2, r3
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801045e:	b29b      	uxth	r3, r3
 8010460:	2b00      	cmp	r3, #0
 8010462:	d1c5      	bne.n	80103f0 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	2220      	movs	r2, #32
 8010468:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801046a:	2300      	movs	r3, #0
 801046c:	e000      	b.n	8010470 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 801046e:	2302      	movs	r3, #2
  }
}
 8010470:	4618      	mov	r0, r3
 8010472:	3720      	adds	r7, #32
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}

08010478 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010478:	b480      	push	{r7}
 801047a:	b085      	sub	sp, #20
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	4613      	mov	r3, r2
 8010484:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801048a:	2b20      	cmp	r3, #32
 801048c:	d145      	bne.n	801051a <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d002      	beq.n	801049a <HAL_UART_Transmit_IT+0x22>
 8010494:	88fb      	ldrh	r3, [r7, #6]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d101      	bne.n	801049e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 801049a:	2301      	movs	r3, #1
 801049c:	e03e      	b.n	801051c <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d101      	bne.n	80104ac <HAL_UART_Transmit_IT+0x34>
 80104a8:	2302      	movs	r3, #2
 80104aa:	e037      	b.n	801051c <HAL_UART_Transmit_IT+0xa4>
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	2201      	movs	r2, #1
 80104b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	68ba      	ldr	r2, [r7, #8]
 80104b8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	88fa      	ldrh	r2, [r7, #6]
 80104be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	88fa      	ldrh	r2, [r7, #6]
 80104c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	2200      	movs	r2, #0
 80104ce:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2200      	movs	r2, #0
 80104d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	2221      	movs	r2, #33	; 0x21
 80104dc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	689b      	ldr	r3, [r3, #8]
 80104e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104e6:	d107      	bne.n	80104f8 <HAL_UART_Transmit_IT+0x80>
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	691b      	ldr	r3, [r3, #16]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d103      	bne.n	80104f8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	4a0d      	ldr	r2, [pc, #52]	; (8010528 <HAL_UART_Transmit_IT+0xb0>)
 80104f4:	669a      	str	r2, [r3, #104]	; 0x68
 80104f6:	e002      	b.n	80104fe <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	4a0c      	ldr	r2, [pc, #48]	; (801052c <HAL_UART_Transmit_IT+0xb4>)
 80104fc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2200      	movs	r2, #0
 8010502:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010514:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8010516:	2300      	movs	r3, #0
 8010518:	e000      	b.n	801051c <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 801051a:	2302      	movs	r3, #2
  }
}
 801051c:	4618      	mov	r0, r3
 801051e:	3714      	adds	r7, #20
 8010520:	46bd      	mov	sp, r7
 8010522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010526:	4770      	bx	lr
 8010528:	0801251f 	.word	0x0801251f
 801052c:	080124ab 	.word	0x080124ab

08010530 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b084      	sub	sp, #16
 8010534:	af00      	add	r7, sp, #0
 8010536:	60f8      	str	r0, [r7, #12]
 8010538:	60b9      	str	r1, [r7, #8]
 801053a:	4613      	mov	r3, r2
 801053c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010542:	2b20      	cmp	r3, #32
 8010544:	d131      	bne.n	80105aa <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d002      	beq.n	8010552 <HAL_UART_Receive_IT+0x22>
 801054c:	88fb      	ldrh	r3, [r7, #6]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d101      	bne.n	8010556 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8010552:	2301      	movs	r3, #1
 8010554:	e02a      	b.n	80105ac <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801055c:	2b01      	cmp	r3, #1
 801055e:	d101      	bne.n	8010564 <HAL_UART_Receive_IT+0x34>
 8010560:	2302      	movs	r3, #2
 8010562:	e023      	b.n	80105ac <HAL_UART_Receive_IT+0x7c>
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	2201      	movs	r2, #1
 8010568:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2200      	movs	r2, #0
 8010570:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	4a0f      	ldr	r2, [pc, #60]	; (80105b4 <HAL_UART_Receive_IT+0x84>)
 8010578:	4293      	cmp	r3, r2
 801057a:	d00e      	beq.n	801059a <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	685b      	ldr	r3, [r3, #4]
 8010582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010586:	2b00      	cmp	r3, #0
 8010588:	d007      	beq.n	801059a <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	681a      	ldr	r2, [r3, #0]
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010598:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 801059a:	88fb      	ldrh	r3, [r7, #6]
 801059c:	461a      	mov	r2, r3
 801059e:	68b9      	ldr	r1, [r7, #8]
 80105a0:	68f8      	ldr	r0, [r7, #12]
 80105a2:	f001 fca7 	bl	8011ef4 <UART_Start_Receive_IT>
 80105a6:	4603      	mov	r3, r0
 80105a8:	e000      	b.n	80105ac <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80105aa:	2302      	movs	r3, #2
  }
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3710      	adds	r7, #16
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}
 80105b4:	40008000 	.word	0x40008000

080105b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b084      	sub	sp, #16
 80105bc:	af00      	add	r7, sp, #0
 80105be:	60f8      	str	r0, [r7, #12]
 80105c0:	60b9      	str	r1, [r7, #8]
 80105c2:	4613      	mov	r3, r2
 80105c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105ca:	2b20      	cmp	r3, #32
 80105cc:	d166      	bne.n	801069c <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d002      	beq.n	80105da <HAL_UART_Transmit_DMA+0x22>
 80105d4:	88fb      	ldrh	r3, [r7, #6]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d101      	bne.n	80105de <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80105da:	2301      	movs	r3, #1
 80105dc:	e05f      	b.n	801069e <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80105e4:	2b01      	cmp	r3, #1
 80105e6:	d101      	bne.n	80105ec <HAL_UART_Transmit_DMA+0x34>
 80105e8:	2302      	movs	r3, #2
 80105ea:	e058      	b.n	801069e <HAL_UART_Transmit_DMA+0xe6>
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2201      	movs	r2, #1
 80105f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	68ba      	ldr	r2, [r7, #8]
 80105f8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	88fa      	ldrh	r2, [r7, #6]
 80105fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	88fa      	ldrh	r2, [r7, #6]
 8010606:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2200      	movs	r2, #0
 801060e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2221      	movs	r2, #33	; 0x21
 8010616:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801061c:	2b00      	cmp	r3, #0
 801061e:	d02b      	beq.n	8010678 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010624:	4a20      	ldr	r2, [pc, #128]	; (80106a8 <HAL_UART_Transmit_DMA+0xf0>)
 8010626:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801062c:	4a1f      	ldr	r2, [pc, #124]	; (80106ac <HAL_UART_Transmit_DMA+0xf4>)
 801062e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010634:	4a1e      	ldr	r2, [pc, #120]	; (80106b0 <HAL_UART_Transmit_DMA+0xf8>)
 8010636:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801063c:	2200      	movs	r2, #0
 801063e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010648:	4619      	mov	r1, r3
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	3328      	adds	r3, #40	; 0x28
 8010650:	461a      	mov	r2, r3
 8010652:	88fb      	ldrh	r3, [r7, #6]
 8010654:	f7f1 fea7 	bl	80023a6 <HAL_DMA_Start_IT>
 8010658:	4603      	mov	r3, r0
 801065a:	2b00      	cmp	r3, #0
 801065c:	d00c      	beq.n	8010678 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2210      	movs	r2, #16
 8010662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2200      	movs	r2, #0
 801066a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	2220      	movs	r2, #32
 8010672:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8010674:	2301      	movs	r3, #1
 8010676:	e012      	b.n	801069e <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	2240      	movs	r2, #64	; 0x40
 801067e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2200      	movs	r2, #0
 8010684:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	689a      	ldr	r2, [r3, #8]
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010696:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8010698:	2300      	movs	r3, #0
 801069a:	e000      	b.n	801069e <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 801069c:	2302      	movs	r3, #2
  }
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3710      	adds	r7, #16
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	08012165 	.word	0x08012165
 80106ac:	080121b9 	.word	0x080121b9
 80106b0:	080122a5 	.word	0x080122a5

080106b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b084      	sub	sp, #16
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	4613      	mov	r3, r2
 80106c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106c6:	2b20      	cmp	r3, #32
 80106c8:	d131      	bne.n	801072e <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d002      	beq.n	80106d6 <HAL_UART_Receive_DMA+0x22>
 80106d0:	88fb      	ldrh	r3, [r7, #6]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d101      	bne.n	80106da <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80106d6:	2301      	movs	r3, #1
 80106d8:	e02a      	b.n	8010730 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80106e0:	2b01      	cmp	r3, #1
 80106e2:	d101      	bne.n	80106e8 <HAL_UART_Receive_DMA+0x34>
 80106e4:	2302      	movs	r3, #2
 80106e6:	e023      	b.n	8010730 <HAL_UART_Receive_DMA+0x7c>
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2201      	movs	r2, #1
 80106ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	2200      	movs	r2, #0
 80106f4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	4a0f      	ldr	r2, [pc, #60]	; (8010738 <HAL_UART_Receive_DMA+0x84>)
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d00e      	beq.n	801071e <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801070a:	2b00      	cmp	r3, #0
 801070c:	d007      	beq.n	801071e <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	681a      	ldr	r2, [r3, #0]
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801071c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 801071e:	88fb      	ldrh	r3, [r7, #6]
 8010720:	461a      	mov	r2, r3
 8010722:	68b9      	ldr	r1, [r7, #8]
 8010724:	68f8      	ldr	r0, [r7, #12]
 8010726:	f001 fc6d 	bl	8012004 <UART_Start_Receive_DMA>
 801072a:	4603      	mov	r3, r0
 801072c:	e000      	b.n	8010730 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 801072e:	2302      	movs	r3, #2
  }
}
 8010730:	4618      	mov	r0, r3
 8010732:	3710      	adds	r7, #16
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	40008000 	.word	0x40008000

0801073c <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 801073c:	b480      	push	{r7}
 801073e:	b085      	sub	sp, #20
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010748:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801074e:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010756:	2b01      	cmp	r3, #1
 8010758:	d101      	bne.n	801075e <HAL_UART_DMAPause+0x22>
 801075a:	2302      	movs	r3, #2
 801075c:	e03c      	b.n	80107d8 <HAL_UART_DMAPause+0x9c>
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2201      	movs	r2, #1
 8010762:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	689b      	ldr	r3, [r3, #8]
 801076c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010770:	2b80      	cmp	r3, #128	; 0x80
 8010772:	d10a      	bne.n	801078a <HAL_UART_DMAPause+0x4e>
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	2b21      	cmp	r3, #33	; 0x21
 8010778:	d107      	bne.n	801078a <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	689a      	ldr	r2, [r3, #8]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010788:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	689b      	ldr	r3, [r3, #8]
 8010790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010794:	2b40      	cmp	r3, #64	; 0x40
 8010796:	d11a      	bne.n	80107ce <HAL_UART_DMAPause+0x92>
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	2b22      	cmp	r3, #34	; 0x22
 801079c:	d117      	bne.n	80107ce <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	681a      	ldr	r2, [r3, #0]
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80107ac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	689a      	ldr	r2, [r3, #8]
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f022 0201 	bic.w	r2, r2, #1
 80107bc:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	689a      	ldr	r2, [r3, #8]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80107cc:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2200      	movs	r2, #0
 80107d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80107d6:	2300      	movs	r3, #0
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3714      	adds	r7, #20
 80107dc:	46bd      	mov	sp, r7
 80107de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e2:	4770      	bx	lr

080107e4 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b083      	sub	sp, #12
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	d101      	bne.n	80107fa <HAL_UART_DMAResume+0x16>
 80107f6:	2302      	movs	r3, #2
 80107f8:	e034      	b.n	8010864 <HAL_UART_DMAResume+0x80>
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2201      	movs	r2, #1
 80107fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010806:	2b21      	cmp	r3, #33	; 0x21
 8010808:	d107      	bne.n	801081a <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	689a      	ldr	r2, [r3, #8]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010818:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801081e:	2b22      	cmp	r3, #34	; 0x22
 8010820:	d11b      	bne.n	801085a <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	2208      	movs	r2, #8
 8010828:	621a      	str	r2, [r3, #32]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	681a      	ldr	r2, [r3, #0]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010838:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	689a      	ldr	r2, [r3, #8]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	f042 0201 	orr.w	r2, r2, #1
 8010848:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	689a      	ldr	r2, [r3, #8]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010858:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2200      	movs	r2, #0
 801085e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8010862:	2300      	movs	r3, #0
}
 8010864:	4618      	mov	r0, r3
 8010866:	370c      	adds	r7, #12
 8010868:	46bd      	mov	sp, r7
 801086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086e:	4770      	bx	lr

08010870 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b084      	sub	sp, #16
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801087c:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010882:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	689b      	ldr	r3, [r3, #8]
 801088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801088e:	2b80      	cmp	r3, #128	; 0x80
 8010890:	d127      	bne.n	80108e2 <HAL_UART_DMAStop+0x72>
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2b21      	cmp	r3, #33	; 0x21
 8010896:	d124      	bne.n	80108e2 <HAL_UART_DMAStop+0x72>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	689a      	ldr	r2, [r3, #8]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80108a6:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d015      	beq.n	80108dc <HAL_UART_DMAStop+0x6c>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7f1 fdd6 	bl	8002466 <HAL_DMA_Abort>
 80108ba:	4603      	mov	r3, r0
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d00d      	beq.n	80108dc <HAL_UART_DMAStop+0x6c>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7f2 f851 	bl	800296c <HAL_DMA_GetError>
 80108ca:	4603      	mov	r3, r0
 80108cc:	2b20      	cmp	r3, #32
 80108ce:	d105      	bne.n	80108dc <HAL_UART_DMAStop+0x6c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2210      	movs	r2, #16
 80108d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80108d8:	2303      	movs	r3, #3
 80108da:	e032      	b.n	8010942 <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f001 fbfd 	bl	80120dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	689b      	ldr	r3, [r3, #8]
 80108e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108ec:	2b40      	cmp	r3, #64	; 0x40
 80108ee:	d127      	bne.n	8010940 <HAL_UART_DMAStop+0xd0>
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	2b22      	cmp	r3, #34	; 0x22
 80108f4:	d124      	bne.n	8010940 <HAL_UART_DMAStop+0xd0>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	689a      	ldr	r2, [r3, #8]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010904:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801090a:	2b00      	cmp	r3, #0
 801090c:	d015      	beq.n	801093a <HAL_UART_DMAStop+0xca>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010912:	4618      	mov	r0, r3
 8010914:	f7f1 fda7 	bl	8002466 <HAL_DMA_Abort>
 8010918:	4603      	mov	r3, r0
 801091a:	2b00      	cmp	r3, #0
 801091c:	d00d      	beq.n	801093a <HAL_UART_DMAStop+0xca>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010922:	4618      	mov	r0, r3
 8010924:	f7f2 f822 	bl	800296c <HAL_DMA_GetError>
 8010928:	4603      	mov	r3, r0
 801092a:	2b20      	cmp	r3, #32
 801092c:	d105      	bne.n	801093a <HAL_UART_DMAStop+0xca>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2210      	movs	r2, #16
 8010932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010936:	2303      	movs	r3, #3
 8010938:	e003      	b.n	8010942 <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndRxTransfer(huart);
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f001 fbe3 	bl	8012106 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8010940:	2300      	movs	r3, #0
}
 8010942:	4618      	mov	r0, r3
 8010944:	3710      	adds	r7, #16
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}

0801094a <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 801094a:	b580      	push	{r7, lr}
 801094c:	b082      	sub	sp, #8
 801094e:	af00      	add	r7, sp, #0
 8010950:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
                                   USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8010960:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	689a      	ldr	r2, [r3, #8]
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	f022 0201 	bic.w	r2, r2, #1
 8010970:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010976:	2b01      	cmp	r3, #1
 8010978:	d107      	bne.n	801098a <HAL_UART_Abort+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	681a      	ldr	r2, [r3, #0]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	f022 0210 	bic.w	r2, r2, #16
 8010988:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	689b      	ldr	r3, [r3, #8]
 8010990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010994:	2b80      	cmp	r3, #128	; 0x80
 8010996:	d125      	bne.n	80109e4 <HAL_UART_Abort+0x9a>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	689a      	ldr	r2, [r3, #8]
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80109a6:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d019      	beq.n	80109e4 <HAL_UART_Abort+0x9a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109b4:	2200      	movs	r2, #0
 80109b6:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109bc:	4618      	mov	r0, r3
 80109be:	f7f1 fd52 	bl	8002466 <HAL_DMA_Abort>
 80109c2:	4603      	mov	r3, r0
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d00d      	beq.n	80109e4 <HAL_UART_Abort+0x9a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7f1 ffcd 	bl	800296c <HAL_DMA_GetError>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b20      	cmp	r3, #32
 80109d6:	d105      	bne.n	80109e4 <HAL_UART_Abort+0x9a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2210      	movs	r2, #16
 80109dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80109e0:	2303      	movs	r3, #3
 80109e2:	e050      	b.n	8010a86 <HAL_UART_Abort+0x13c>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	689b      	ldr	r3, [r3, #8]
 80109ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109ee:	2b40      	cmp	r3, #64	; 0x40
 80109f0:	d125      	bne.n	8010a3e <HAL_UART_Abort+0xf4>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	689a      	ldr	r2, [r3, #8]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a00:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d019      	beq.n	8010a3e <HAL_UART_Abort+0xf4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a0e:	2200      	movs	r2, #0
 8010a10:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7f1 fd25 	bl	8002466 <HAL_DMA_Abort>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d00d      	beq.n	8010a3e <HAL_UART_Abort+0xf4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7f1 ffa0 	bl	800296c <HAL_DMA_GetError>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2b20      	cmp	r3, #32
 8010a30:	d105      	bne.n	8010a3e <HAL_UART_Abort+0xf4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2210      	movs	r2, #16
 8010a36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010a3a:	2303      	movs	r3, #3
 8010a3c:	e023      	b.n	8010a86 <HAL_UART_Abort+0x13c>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2200      	movs	r2, #0
 8010a42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	220f      	movs	r2, #15
 8010a54:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	8b1b      	ldrh	r3, [r3, #24]
 8010a5c:	b29a      	uxth	r2, r3
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	f042 0208 	orr.w	r2, r2, #8
 8010a66:	b292      	uxth	r2, r2
 8010a68:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2220      	movs	r2, #32
 8010a6e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2220      	movs	r2, #32
 8010a74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2200      	movs	r2, #0
 8010a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010a84:	2300      	movs	r3, #0
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3708      	adds	r7, #8
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}

08010a8e <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8010a8e:	b580      	push	{r7, lr}
 8010a90:	b082      	sub	sp, #8
 8010a92:	af00      	add	r7, sp, #0
 8010a94:	6078      	str	r0, [r7, #4]
  /* Disable TCIE, TXEIE and TXFTIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	681a      	ldr	r2, [r3, #0]
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010aa4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	689b      	ldr	r3, [r3, #8]
 8010aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ab0:	2b80      	cmp	r3, #128	; 0x80
 8010ab2:	d125      	bne.n	8010b00 <HAL_UART_AbortTransmit+0x72>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	689a      	ldr	r2, [r3, #8]
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010ac2:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d019      	beq.n	8010b00 <HAL_UART_AbortTransmit+0x72>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7f1 fcc4 	bl	8002466 <HAL_DMA_Abort>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d00d      	beq.n	8010b00 <HAL_UART_AbortTransmit+0x72>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7f1 ff3f 	bl	800296c <HAL_DMA_GetError>
 8010aee:	4603      	mov	r3, r0
 8010af0:	2b20      	cmp	r3, #32
 8010af2:	d105      	bne.n	8010b00 <HAL_UART_AbortTransmit+0x72>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2210      	movs	r2, #16
 8010af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010afc:	2303      	movs	r3, #3
 8010afe:	e007      	b.n	8010b10 <HAL_UART_AbortTransmit+0x82>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2200      	movs	r2, #0
 8010b04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2220      	movs	r2, #32
 8010b0c:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8010b0e:	2300      	movs	r3, #0
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	681a      	ldr	r2, [r3, #0]
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010b2e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	689a      	ldr	r2, [r3, #8]
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f022 0201 	bic.w	r2, r2, #1
 8010b3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b44:	2b01      	cmp	r3, #1
 8010b46:	d107      	bne.n	8010b58 <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	681a      	ldr	r2, [r3, #0]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	f022 0210 	bic.w	r2, r2, #16
 8010b56:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	689b      	ldr	r3, [r3, #8]
 8010b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b62:	2b40      	cmp	r3, #64	; 0x40
 8010b64:	d125      	bne.n	8010bb2 <HAL_UART_AbortReceive+0x9a>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	689a      	ldr	r2, [r3, #8]
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010b74:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d019      	beq.n	8010bb2 <HAL_UART_AbortReceive+0x9a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b82:	2200      	movs	r2, #0
 8010b84:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7f1 fc6b 	bl	8002466 <HAL_DMA_Abort>
 8010b90:	4603      	mov	r3, r0
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d00d      	beq.n	8010bb2 <HAL_UART_AbortReceive+0x9a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7f1 fee6 	bl	800296c <HAL_DMA_GetError>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	2b20      	cmp	r3, #32
 8010ba4:	d105      	bne.n	8010bb2 <HAL_UART_AbortReceive+0x9a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2210      	movs	r2, #16
 8010baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010bae:	2303      	movs	r3, #3
 8010bb0:	e018      	b.n	8010be4 <HAL_UART_AbortReceive+0xcc>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	220f      	movs	r2, #15
 8010bc0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	8b1b      	ldrh	r3, [r3, #24]
 8010bc8:	b29a      	uxth	r2, r3
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	f042 0208 	orr.w	r2, r2, #8
 8010bd2:	b292      	uxth	r2, r2
 8010bd4:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2220      	movs	r2, #32
 8010bda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2200      	movs	r2, #0
 8010be0:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8010be2:	2300      	movs	r3, #0
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3708      	adds	r7, #8
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b084      	sub	sp, #16
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	60fb      	str	r3, [r7, #12]
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
                                   USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	681a      	ldr	r2, [r3, #0]
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8010c06:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	689a      	ldr	r2, [r3, #8]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	f022 0201 	bic.w	r2, r2, #1
 8010c16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d107      	bne.n	8010c30 <HAL_UART_Abort_IT+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	681a      	ldr	r2, [r3, #0]
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	f022 0210 	bic.w	r2, r2, #16
 8010c2e:	601a      	str	r2, [r3, #0]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d00f      	beq.n	8010c58 <HAL_UART_Abort_IT+0x6c>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	689b      	ldr	r3, [r3, #8]
 8010c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c42:	2b80      	cmp	r3, #128	; 0x80
 8010c44:	d104      	bne.n	8010c50 <HAL_UART_Abort_IT+0x64>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c4a:	4a4a      	ldr	r2, [pc, #296]	; (8010d74 <HAL_UART_Abort_IT+0x188>)
 8010c4c:	639a      	str	r2, [r3, #56]	; 0x38
 8010c4e:	e003      	b.n	8010c58 <HAL_UART_Abort_IT+0x6c>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c54:	2200      	movs	r2, #0
 8010c56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d00f      	beq.n	8010c80 <HAL_UART_Abort_IT+0x94>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	689b      	ldr	r3, [r3, #8]
 8010c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c6a:	2b40      	cmp	r3, #64	; 0x40
 8010c6c:	d104      	bne.n	8010c78 <HAL_UART_Abort_IT+0x8c>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c72:	4a41      	ldr	r2, [pc, #260]	; (8010d78 <HAL_UART_Abort_IT+0x18c>)
 8010c74:	639a      	str	r2, [r3, #56]	; 0x38
 8010c76:	e003      	b.n	8010c80 <HAL_UART_Abort_IT+0x94>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	689b      	ldr	r3, [r3, #8]
 8010c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c8a:	2b80      	cmp	r3, #128	; 0x80
 8010c8c:	d11a      	bne.n	8010cc4 <HAL_UART_Abort_IT+0xd8>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	689a      	ldr	r2, [r3, #8]
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010c9c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d00e      	beq.n	8010cc4 <HAL_UART_Abort_IT+0xd8>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7f1 fc19 	bl	80024e2 <HAL_DMA_Abort_IT>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d004      	beq.n	8010cc0 <HAL_UART_Abort_IT+0xd4>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cba:	2200      	movs	r2, #0
 8010cbc:	639a      	str	r2, [r3, #56]	; 0x38
 8010cbe:	e001      	b.n	8010cc4 <HAL_UART_Abort_IT+0xd8>
      }
      else
      {
        abortcplt = 0U;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	689b      	ldr	r3, [r3, #8]
 8010cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cce:	2b40      	cmp	r3, #64	; 0x40
 8010cd0:	d11c      	bne.n	8010d0c <HAL_UART_Abort_IT+0x120>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	689a      	ldr	r2, [r3, #8]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010ce0:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d010      	beq.n	8010d0c <HAL_UART_Abort_IT+0x120>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f7f1 fbf7 	bl	80024e2 <HAL_DMA_Abort_IT>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d006      	beq.n	8010d08 <HAL_UART_Abort_IT+0x11c>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cfe:	2200      	movs	r2, #0
 8010d00:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8010d02:	2301      	movs	r3, #1
 8010d04:	60fb      	str	r3, [r7, #12]
 8010d06:	e001      	b.n	8010d0c <HAL_UART_Abort_IT+0x120>
      }
      else
      {
        abortcplt = 0U;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d12b      	bne.n	8010d6a <HAL_UART_Abort_IT+0x17e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2200      	movs	r2, #0
 8010d16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2200      	movs	r2, #0
 8010d26:	665a      	str	r2, [r3, #100]	; 0x64
    huart->TxISR = NULL;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	669a      	str	r2, [r3, #104]	; 0x68

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2200      	movs	r2, #0
 8010d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	220f      	movs	r2, #15
 8010d3c:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	8b1b      	ldrh	r3, [r3, #24]
 8010d44:	b29a      	uxth	r2, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	f042 0208 	orr.w	r2, r2, #8
 8010d4e:	b292      	uxth	r2, r2
 8010d50:	831a      	strh	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2220      	movs	r2, #32
 8010d56:	679a      	str	r2, [r3, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2220      	movs	r2, #32
 8010d5c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2200      	movs	r2, #0
 8010d62:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f000 fb15 	bl	8011394 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8010d6a:	2300      	movs	r3, #0
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3710      	adds	r7, #16
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	0801234d 	.word	0x0801234d
 8010d78:	080123b7 	.word	0x080123b7

08010d7c <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	681a      	ldr	r2, [r3, #0]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010d92:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	689b      	ldr	r3, [r3, #8]
 8010d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d9e:	2b80      	cmp	r3, #128	; 0x80
 8010da0:	d12d      	bne.n	8010dfe <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	689a      	ldr	r2, [r3, #8]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010db0:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d013      	beq.n	8010de2 <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dbe:	4a19      	ldr	r2, [pc, #100]	; (8010e24 <HAL_UART_AbortTransmit_IT+0xa8>)
 8010dc0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7f1 fb8b 	bl	80024e2 <HAL_DMA_Abort_IT>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d022      	beq.n	8010e18 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8010ddc:	4610      	mov	r0, r2
 8010dde:	4798      	blx	r3
 8010de0:	e01a      	b.n	8010e18 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2200      	movs	r2, #0
 8010de6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2200      	movs	r2, #0
 8010dee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2220      	movs	r2, #32
 8010df4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f000 fad6 	bl	80113a8 <HAL_UART_AbortTransmitCpltCallback>
 8010dfc:	e00c      	b.n	8010e18 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2200      	movs	r2, #0
 8010e02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2220      	movs	r2, #32
 8010e10:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f000 fac8 	bl	80113a8 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8010e18:	2300      	movs	r3, #0
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3708      	adds	r7, #8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	08012435 	.word	0x08012435

08010e28 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	681a      	ldr	r2, [r3, #0]
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010e3e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	689a      	ldr	r2, [r3, #8]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	f022 0201 	bic.w	r2, r2, #1
 8010e4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d107      	bne.n	8010e68 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	681a      	ldr	r2, [r3, #0]
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	f022 0210 	bic.w	r2, r2, #16
 8010e66:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	689b      	ldr	r3, [r3, #8]
 8010e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e72:	2b40      	cmp	r3, #64	; 0x40
 8010e74:	d13e      	bne.n	8010ef4 <HAL_UART_AbortReceive_IT+0xcc>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	689a      	ldr	r2, [r3, #8]
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e84:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d013      	beq.n	8010eb6 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e92:	4a25      	ldr	r2, [pc, #148]	; (8010f28 <HAL_UART_AbortReceive_IT+0x100>)
 8010e94:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7f1 fb21 	bl	80024e2 <HAL_DMA_Abort_IT>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d03a      	beq.n	8010f1c <HAL_UART_AbortReceive_IT+0xf4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eac:	687a      	ldr	r2, [r7, #4]
 8010eae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8010eb0:	4610      	mov	r0, r2
 8010eb2:	4798      	blx	r3
 8010eb4:	e032      	b.n	8010f1c <HAL_UART_AbortReceive_IT+0xf4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2200      	movs	r2, #0
 8010eba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	220f      	movs	r2, #15
 8010eca:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	8b1b      	ldrh	r3, [r3, #24]
 8010ed2:	b29a      	uxth	r2, r3
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	f042 0208 	orr.w	r2, r2, #8
 8010edc:	b292      	uxth	r2, r2
 8010ede:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2220      	movs	r2, #32
 8010ee4:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f000 fa65 	bl	80113bc <HAL_UART_AbortReceiveCpltCallback>
 8010ef2:	e013      	b.n	8010f1c <HAL_UART_AbortReceive_IT+0xf4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2200      	movs	r2, #0
 8010f00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	220f      	movs	r2, #15
 8010f08:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2220      	movs	r2, #32
 8010f0e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2200      	movs	r2, #0
 8010f14:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f000 fa50 	bl	80113bc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8010f1c:	2300      	movs	r3, #0
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	3708      	adds	r7, #8
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}
 8010f26:	bf00      	nop
 8010f28:	0801245f 	.word	0x0801245f

08010f2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b088      	sub	sp, #32
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	69db      	ldr	r3, [r3, #28]
 8010f3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	689b      	ldr	r3, [r3, #8]
 8010f4a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010f4c:	69fa      	ldr	r2, [r7, #28]
 8010f4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8010f52:	4013      	ands	r3, r2
 8010f54:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d113      	bne.n	8010f84 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8010f5c:	69fb      	ldr	r3, [r7, #28]
 8010f5e:	f003 0320 	and.w	r3, r3, #32
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d00e      	beq.n	8010f84 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010f66:	69bb      	ldr	r3, [r7, #24]
 8010f68:	f003 0320 	and.w	r3, r3, #32
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d009      	beq.n	8010f84 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	f000 81ce 	beq.w	8011316 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	4798      	blx	r3
      }
      return;
 8010f82:	e1c8      	b.n	8011316 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	f000 80e3 	beq.w	8011152 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	f003 0301 	and.w	r3, r3, #1
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d105      	bne.n	8010fa2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8010f96:	69ba      	ldr	r2, [r7, #24]
 8010f98:	4ba6      	ldr	r3, [pc, #664]	; (8011234 <HAL_UART_IRQHandler+0x308>)
 8010f9a:	4013      	ands	r3, r2
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	f000 80d8 	beq.w	8011152 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010fa2:	69fb      	ldr	r3, [r7, #28]
 8010fa4:	f003 0301 	and.w	r3, r3, #1
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d010      	beq.n	8010fce <HAL_UART_IRQHandler+0xa2>
 8010fac:	69bb      	ldr	r3, [r7, #24]
 8010fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d00b      	beq.n	8010fce <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	2201      	movs	r2, #1
 8010fbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fc4:	f043 0201 	orr.w	r2, r3, #1
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010fce:	69fb      	ldr	r3, [r7, #28]
 8010fd0:	f003 0302 	and.w	r3, r3, #2
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d010      	beq.n	8010ffa <HAL_UART_IRQHandler+0xce>
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	f003 0301 	and.w	r3, r3, #1
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d00b      	beq.n	8010ffa <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	2202      	movs	r2, #2
 8010fe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ff0:	f043 0204 	orr.w	r2, r3, #4
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010ffa:	69fb      	ldr	r3, [r7, #28]
 8010ffc:	f003 0304 	and.w	r3, r3, #4
 8011000:	2b00      	cmp	r3, #0
 8011002:	d010      	beq.n	8011026 <HAL_UART_IRQHandler+0xfa>
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	f003 0301 	and.w	r3, r3, #1
 801100a:	2b00      	cmp	r3, #0
 801100c:	d00b      	beq.n	8011026 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	2204      	movs	r2, #4
 8011014:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801101c:	f043 0202 	orr.w	r2, r3, #2
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011026:	69fb      	ldr	r3, [r7, #28]
 8011028:	f003 0308 	and.w	r3, r3, #8
 801102c:	2b00      	cmp	r3, #0
 801102e:	d015      	beq.n	801105c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011030:	69bb      	ldr	r3, [r7, #24]
 8011032:	f003 0320 	and.w	r3, r3, #32
 8011036:	2b00      	cmp	r3, #0
 8011038:	d104      	bne.n	8011044 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011040:	2b00      	cmp	r3, #0
 8011042:	d00b      	beq.n	801105c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	2208      	movs	r2, #8
 801104a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011052:	f043 0208 	orr.w	r2, r3, #8
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801105c:	69fb      	ldr	r3, [r7, #28]
 801105e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011062:	2b00      	cmp	r3, #0
 8011064:	d011      	beq.n	801108a <HAL_UART_IRQHandler+0x15e>
 8011066:	69bb      	ldr	r3, [r7, #24]
 8011068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801106c:	2b00      	cmp	r3, #0
 801106e:	d00c      	beq.n	801108a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011078:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011080:	f043 0220 	orr.w	r2, r3, #32
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011090:	2b00      	cmp	r3, #0
 8011092:	f000 8142 	beq.w	801131a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8011096:	69fb      	ldr	r3, [r7, #28]
 8011098:	f003 0320 	and.w	r3, r3, #32
 801109c:	2b00      	cmp	r3, #0
 801109e:	d00c      	beq.n	80110ba <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80110a0:	69bb      	ldr	r3, [r7, #24]
 80110a2:	f003 0320 	and.w	r3, r3, #32
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d007      	beq.n	80110ba <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d003      	beq.n	80110ba <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110c0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	689b      	ldr	r3, [r3, #8]
 80110c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110cc:	2b40      	cmp	r3, #64	; 0x40
 80110ce:	d004      	beq.n	80110da <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d031      	beq.n	801113e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f001 f813 	bl	8012106 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	689b      	ldr	r3, [r3, #8]
 80110e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110ea:	2b40      	cmp	r3, #64	; 0x40
 80110ec:	d123      	bne.n	8011136 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	689a      	ldr	r2, [r3, #8]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80110fc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011102:	2b00      	cmp	r3, #0
 8011104:	d013      	beq.n	801112e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801110a:	4a4b      	ldr	r2, [pc, #300]	; (8011238 <HAL_UART_IRQHandler+0x30c>)
 801110c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011112:	4618      	mov	r0, r3
 8011114:	f7f1 f9e5 	bl	80024e2 <HAL_DMA_Abort_IT>
 8011118:	4603      	mov	r3, r0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d017      	beq.n	801114e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011124:	687a      	ldr	r2, [r7, #4]
 8011126:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8011128:	4610      	mov	r0, r2
 801112a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801112c:	e00f      	b.n	801114e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f000 f926 	bl	8011380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011134:	e00b      	b.n	801114e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f000 f922 	bl	8011380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801113c:	e007      	b.n	801114e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f000 f91e 	bl	8011380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2200      	movs	r2, #0
 8011148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 801114c:	e0e5      	b.n	801131a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801114e:	bf00      	nop
    return;
 8011150:	e0e3      	b.n	801131a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011156:	2b01      	cmp	r3, #1
 8011158:	f040 80a9 	bne.w	80112ae <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 801115c:	69fb      	ldr	r3, [r7, #28]
 801115e:	f003 0310 	and.w	r3, r3, #16
 8011162:	2b00      	cmp	r3, #0
 8011164:	f000 80a3 	beq.w	80112ae <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8011168:	69bb      	ldr	r3, [r7, #24]
 801116a:	f003 0310 	and.w	r3, r3, #16
 801116e:	2b00      	cmp	r3, #0
 8011170:	f000 809d 	beq.w	80112ae <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	2210      	movs	r2, #16
 801117a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	689b      	ldr	r3, [r3, #8]
 8011182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011186:	2b40      	cmp	r3, #64	; 0x40
 8011188:	d158      	bne.n	801123c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8011194:	893b      	ldrh	r3, [r7, #8]
 8011196:	2b00      	cmp	r3, #0
 8011198:	f000 80c1 	beq.w	801131e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80111a2:	893a      	ldrh	r2, [r7, #8]
 80111a4:	429a      	cmp	r2, r3
 80111a6:	f080 80ba 	bcs.w	801131e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	893a      	ldrh	r2, [r7, #8]
 80111ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	f003 0320 	and.w	r3, r3, #32
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d12a      	bne.n	8011218 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	681a      	ldr	r2, [r3, #0]
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80111d0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	689a      	ldr	r2, [r3, #8]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	f022 0201 	bic.w	r2, r2, #1
 80111e0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	689a      	ldr	r2, [r3, #8]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80111f0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2220      	movs	r2, #32
 80111f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2200      	movs	r2, #0
 80111fc:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	681a      	ldr	r2, [r3, #0]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	f022 0210 	bic.w	r2, r2, #16
 801120c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011212:	4618      	mov	r0, r3
 8011214:	f7f1 f927 	bl	8002466 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011224:	b29b      	uxth	r3, r3
 8011226:	1ad3      	subs	r3, r2, r3
 8011228:	b29b      	uxth	r3, r3
 801122a:	4619      	mov	r1, r3
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f000 f8cf 	bl	80113d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8011232:	e074      	b.n	801131e <HAL_UART_IRQHandler+0x3f2>
 8011234:	04000120 	.word	0x04000120
 8011238:	08012321 	.word	0x08012321
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011248:	b29b      	uxth	r3, r3
 801124a:	1ad3      	subs	r3, r2, r3
 801124c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011254:	b29b      	uxth	r3, r3
 8011256:	2b00      	cmp	r3, #0
 8011258:	d063      	beq.n	8011322 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 801125a:	897b      	ldrh	r3, [r7, #10]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d060      	beq.n	8011322 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	681a      	ldr	r2, [r3, #0]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801126e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	689a      	ldr	r2, [r3, #8]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f022 0201 	bic.w	r2, r2, #1
 801127e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2220      	movs	r2, #32
 8011284:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	2200      	movs	r2, #0
 801128a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2200      	movs	r2, #0
 8011290:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f022 0210 	bic.w	r2, r2, #16
 80112a0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80112a2:	897b      	ldrh	r3, [r7, #10]
 80112a4:	4619      	mov	r1, r3
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f000 f892 	bl	80113d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80112ac:	e039      	b.n	8011322 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80112ae:	69fb      	ldr	r3, [r7, #28]
 80112b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d00d      	beq.n	80112d4 <HAL_UART_IRQHandler+0x3a8>
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d008      	beq.n	80112d4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80112ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f001 fabc 	bl	801284a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80112d2:	e029      	b.n	8011328 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80112d4:	69fb      	ldr	r3, [r7, #28]
 80112d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d00d      	beq.n	80112fa <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80112de:	69bb      	ldr	r3, [r7, #24]
 80112e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d008      	beq.n	80112fa <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d01a      	beq.n	8011326 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	4798      	blx	r3
    }
    return;
 80112f8:	e015      	b.n	8011326 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80112fa:	69fb      	ldr	r3, [r7, #28]
 80112fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011300:	2b00      	cmp	r3, #0
 8011302:	d011      	beq.n	8011328 <HAL_UART_IRQHandler+0x3fc>
 8011304:	69bb      	ldr	r3, [r7, #24]
 8011306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801130a:	2b00      	cmp	r3, #0
 801130c:	d00c      	beq.n	8011328 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f001 f943 	bl	801259a <UART_EndTransmit_IT>
    return;
 8011314:	e008      	b.n	8011328 <HAL_UART_IRQHandler+0x3fc>
      return;
 8011316:	bf00      	nop
 8011318:	e006      	b.n	8011328 <HAL_UART_IRQHandler+0x3fc>
    return;
 801131a:	bf00      	nop
 801131c:	e004      	b.n	8011328 <HAL_UART_IRQHandler+0x3fc>
      return;
 801131e:	bf00      	nop
 8011320:	e002      	b.n	8011328 <HAL_UART_IRQHandler+0x3fc>
      return;
 8011322:	bf00      	nop
 8011324:	e000      	b.n	8011328 <HAL_UART_IRQHandler+0x3fc>
    return;
 8011326:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8011328:	3720      	adds	r7, #32
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}
 801132e:	bf00      	nop

08011330 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011330:	b480      	push	{r7}
 8011332:	b083      	sub	sp, #12
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011338:	bf00      	nop
 801133a:	370c      	adds	r7, #12
 801133c:	46bd      	mov	sp, r7
 801133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011342:	4770      	bx	lr

08011344 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011344:	b480      	push	{r7}
 8011346:	b083      	sub	sp, #12
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801134c:	bf00      	nop
 801134e:	370c      	adds	r7, #12
 8011350:	46bd      	mov	sp, r7
 8011352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011356:	4770      	bx	lr

08011358 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8011360:	bf00      	nop
 8011362:	370c      	adds	r7, #12
 8011364:	46bd      	mov	sp, r7
 8011366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136a:	4770      	bx	lr

0801136c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801136c:	b480      	push	{r7}
 801136e:	b083      	sub	sp, #12
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011374:	bf00      	nop
 8011376:	370c      	adds	r7, #12
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr

08011380 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011380:	b480      	push	{r7}
 8011382:	b083      	sub	sp, #12
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011388:	bf00      	nop
 801138a:	370c      	adds	r7, #12
 801138c:	46bd      	mov	sp, r7
 801138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011392:	4770      	bx	lr

08011394 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8011394:	b480      	push	{r7}
 8011396:	b083      	sub	sp, #12
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801139c:	bf00      	nop
 801139e:	370c      	adds	r7, #12
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr

080113a8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b083      	sub	sp, #12
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80113b0:	bf00      	nop
 80113b2:	370c      	adds	r7, #12
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr

080113bc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80113bc:	b480      	push	{r7}
 80113be:	b083      	sub	sp, #12
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80113c4:	bf00      	nop
 80113c6:	370c      	adds	r7, #12
 80113c8:	46bd      	mov	sp, r7
 80113ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ce:	4770      	bx	lr

080113d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80113d0:	b480      	push	{r7}
 80113d2:	b083      	sub	sp, #12
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
 80113d8:	460b      	mov	r3, r1
 80113da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80113dc:	bf00      	nop
 80113de:	370c      	adds	r7, #12
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr

080113e8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 80113e8:	b480      	push	{r7}
 80113ea:	b083      	sub	sp, #12
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	4a09      	ldr	r2, [pc, #36]	; (801141c <HAL_UART_ReceiverTimeout_Config+0x34>)
 80113f8:	4293      	cmp	r3, r2
 80113fa:	d009      	beq.n	8011410 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	695b      	ldr	r3, [r3, #20]
 8011402:	f003 417f 	and.w	r1, r3, #4278190080	; 0xff000000
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	683a      	ldr	r2, [r7, #0]
 801140c:	430a      	orrs	r2, r1
 801140e:	615a      	str	r2, [r3, #20]
  }
}
 8011410:	bf00      	nop
 8011412:	370c      	adds	r7, #12
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr
 801141c:	40008000 	.word	0x40008000

08011420 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8011420:	b480      	push	{r7}
 8011422:	b083      	sub	sp, #12
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	4a17      	ldr	r2, [pc, #92]	; (801148c <HAL_UART_EnableReceiverTimeout+0x6c>)
 801142e:	4293      	cmp	r3, r2
 8011430:	d024      	beq.n	801147c <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011436:	2b20      	cmp	r3, #32
 8011438:	d11e      	bne.n	8011478 <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011440:	2b01      	cmp	r3, #1
 8011442:	d101      	bne.n	8011448 <HAL_UART_EnableReceiverTimeout+0x28>
 8011444:	2302      	movs	r3, #2
 8011446:	e01a      	b.n	801147e <HAL_UART_EnableReceiverTimeout+0x5e>
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2201      	movs	r2, #1
 801144c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2224      	movs	r2, #36	; 0x24
 8011454:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	685a      	ldr	r2, [r3, #4]
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8011464:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	2220      	movs	r2, #32
 801146a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2200      	movs	r2, #0
 8011470:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 8011474:	2300      	movs	r3, #0
 8011476:	e002      	b.n	801147e <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 8011478:	2302      	movs	r3, #2
 801147a:	e000      	b.n	801147e <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 801147c:	2301      	movs	r3, #1
  }
}
 801147e:	4618      	mov	r0, r3
 8011480:	370c      	adds	r7, #12
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr
 801148a:	bf00      	nop
 801148c:	40008000 	.word	0x40008000

08011490 <HAL_UART_DisableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DisableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8011490:	b480      	push	{r7}
 8011492:	b083      	sub	sp, #12
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	4a17      	ldr	r2, [pc, #92]	; (80114fc <HAL_UART_DisableReceiverTimeout+0x6c>)
 801149e:	4293      	cmp	r3, r2
 80114a0:	d024      	beq.n	80114ec <HAL_UART_DisableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114a6:	2b20      	cmp	r3, #32
 80114a8:	d11e      	bne.n	80114e8 <HAL_UART_DisableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80114b0:	2b01      	cmp	r3, #1
 80114b2:	d101      	bne.n	80114b8 <HAL_UART_DisableReceiverTimeout+0x28>
 80114b4:	2302      	movs	r3, #2
 80114b6:	e01a      	b.n	80114ee <HAL_UART_DisableReceiverTimeout+0x5e>
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2201      	movs	r2, #1
 80114bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2224      	movs	r2, #36	; 0x24
 80114c4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear the USART RTOEN bit */
      CLEAR_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	685a      	ldr	r2, [r3, #4]
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80114d4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2220      	movs	r2, #32
 80114da:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2200      	movs	r2, #0
 80114e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 80114e4:	2300      	movs	r3, #0
 80114e6:	e002      	b.n	80114ee <HAL_UART_DisableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 80114e8:	2302      	movs	r3, #2
 80114ea:	e000      	b.n	80114ee <HAL_UART_DisableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 80114ec:	2301      	movs	r3, #1
  }
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	370c      	adds	r7, #12
 80114f2:	46bd      	mov	sp, r7
 80114f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f8:	4770      	bx	lr
 80114fa:	bf00      	nop
 80114fc:	40008000 	.word	0x40008000

08011500 <HAL_MultiProcessor_EnableMuteMode>:
  *         to enter mute mode, HAL_MultiProcessor_EnterMuteMode() API must be called).
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b082      	sub	sp, #8
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801150e:	2b01      	cmp	r3, #1
 8011510:	d101      	bne.n	8011516 <HAL_MultiProcessor_EnableMuteMode+0x16>
 8011512:	2302      	movs	r3, #2
 8011514:	e015      	b.n	8011542 <HAL_MultiProcessor_EnableMuteMode+0x42>
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2201      	movs	r2, #1
 801151a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  huart->gState = HAL_UART_STATE_BUSY;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	2224      	movs	r2, #36	; 0x24
 8011522:	679a      	str	r2, [r3, #120]	; 0x78

  /* Enable USART mute mode by setting the MME bit in the CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011532:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2220      	movs	r2, #32
 8011538:	679a      	str	r2, [r3, #120]	; 0x78

  return (UART_CheckIdleState(huart));
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f000 fc14 	bl	8011d68 <UART_CheckIdleState>
 8011540:	4603      	mov	r3, r0
}
 8011542:	4618      	mov	r0, r3
 8011544:	3708      	adds	r7, #8
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}

0801154a <HAL_MultiProcessor_DisableMuteMode>:
  *         as it may not have been in mute mode at this very moment).
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart)
{
 801154a:	b580      	push	{r7, lr}
 801154c:	b082      	sub	sp, #8
 801154e:	af00      	add	r7, sp, #0
 8011550:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011558:	2b01      	cmp	r3, #1
 801155a:	d101      	bne.n	8011560 <HAL_MultiProcessor_DisableMuteMode+0x16>
 801155c:	2302      	movs	r3, #2
 801155e:	e015      	b.n	801158c <HAL_MultiProcessor_DisableMuteMode+0x42>
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2201      	movs	r2, #1
 8011564:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  huart->gState = HAL_UART_STATE_BUSY;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2224      	movs	r2, #36	; 0x24
 801156c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable USART mute mode by clearing the MME bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_MME);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801157c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2220      	movs	r2, #32
 8011582:	679a      	str	r2, [r3, #120]	; 0x78

  return (UART_CheckIdleState(huart));
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f000 fbef 	bl	8011d68 <UART_CheckIdleState>
 801158a:	4603      	mov	r3, r0
}
 801158c:	4618      	mov	r0, r3
 801158e:	3708      	adds	r7, #8
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}

08011594 <HAL_MultiProcessor_EnterMuteMode>:
  * @note  To exit from mute mode, HAL_MultiProcessor_DisableMuteMode() API must be called.
  * @param huart UART handle.
  * @retval None
  */
void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 8011594:	b480      	push	{r7}
 8011596:	b083      	sub	sp, #12
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
  __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	8b1b      	ldrh	r3, [r3, #24]
 80115a2:	b29a      	uxth	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	f042 0204 	orr.w	r2, r2, #4
 80115ac:	b292      	uxth	r2, r2
 80115ae:	831a      	strh	r2, [r3, #24]
}
 80115b0:	bf00      	nop
 80115b2:	370c      	adds	r7, #12
 80115b4:	46bd      	mov	sp, r7
 80115b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ba:	4770      	bx	lr

080115bc <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80115bc:	b480      	push	{r7}
 80115be:	b083      	sub	sp, #12
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80115ca:	2b01      	cmp	r3, #1
 80115cc:	d101      	bne.n	80115d2 <HAL_HalfDuplex_EnableTransmitter+0x16>
 80115ce:	2302      	movs	r3, #2
 80115d0:	e01e      	b.n	8011610 <HAL_HalfDuplex_EnableTransmitter+0x54>
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2201      	movs	r2, #1
 80115d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	2224      	movs	r2, #36	; 0x24
 80115de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	f022 020c 	bic.w	r2, r2, #12
 80115ee:	601a      	str	r2, [r3, #0]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	681a      	ldr	r2, [r3, #0]
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f042 0208 	orr.w	r2, r2, #8
 80115fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2220      	movs	r2, #32
 8011604:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2200      	movs	r2, #0
 801160a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 801160e:	2300      	movs	r3, #0
}
 8011610:	4618      	mov	r0, r3
 8011612:	370c      	adds	r7, #12
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr

0801161c <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 801161c:	b480      	push	{r7}
 801161e:	b083      	sub	sp, #12
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801162a:	2b01      	cmp	r3, #1
 801162c:	d101      	bne.n	8011632 <HAL_HalfDuplex_EnableReceiver+0x16>
 801162e:	2302      	movs	r3, #2
 8011630:	e01e      	b.n	8011670 <HAL_HalfDuplex_EnableReceiver+0x54>
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2201      	movs	r2, #1
 8011636:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2224      	movs	r2, #36	; 0x24
 801163e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	f022 020c 	bic.w	r2, r2, #12
 801164e:	601a      	str	r2, [r3, #0]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	681a      	ldr	r2, [r3, #0]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	f042 0204 	orr.w	r2, r2, #4
 801165e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2220      	movs	r2, #32
 8011664:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2200      	movs	r2, #0
 801166a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 801166e:	2300      	movs	r3, #0
}
 8011670:	4618      	mov	r0, r3
 8011672:	370c      	adds	r7, #12
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr

0801167c <HAL_LIN_SendBreak>:
  * @brief  Transmit break characters.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 801167c:	b480      	push	{r7}
 801167e:	b083      	sub	sp, #12
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));

  __HAL_LOCK(huart);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801168a:	2b01      	cmp	r3, #1
 801168c:	d101      	bne.n	8011692 <HAL_LIN_SendBreak+0x16>
 801168e:	2302      	movs	r3, #2
 8011690:	e018      	b.n	80116c4 <HAL_LIN_SendBreak+0x48>
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2201      	movs	r2, #1
 8011696:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  huart->gState = HAL_UART_STATE_BUSY;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2224      	movs	r2, #36	; 0x24
 801169e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Send break characters */
  __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	8b1b      	ldrh	r3, [r3, #24]
 80116a6:	b29a      	uxth	r2, r3
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f042 0202 	orr.w	r2, r2, #2
 80116b0:	b292      	uxth	r2, r2
 80116b2:	831a      	strh	r2, [r3, #24]

  huart->gState = HAL_UART_STATE_READY;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	2220      	movs	r2, #32
 80116b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2200      	movs	r2, #0
 80116be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80116c2:	2300      	movs	r3, #0
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	370c      	adds	r7, #12
 80116c8:	46bd      	mov	sp, r7
 80116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ce:	4770      	bx	lr

080116d0 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80116d0:	b480      	push	{r7}
 80116d2:	b085      	sub	sp, #20
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80116dc:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116e2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80116e4:	68fa      	ldr	r2, [r7, #12]
 80116e6:	68bb      	ldr	r3, [r7, #8]
 80116e8:	4313      	orrs	r3, r2
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3714      	adds	r7, #20
 80116ee:	46bd      	mov	sp, r7
 80116f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f4:	4770      	bx	lr

080116f6 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 80116f6:	b480      	push	{r7}
 80116f8:	b083      	sub	sp, #12
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011704:	4618      	mov	r0, r3
 8011706:	370c      	adds	r7, #12
 8011708:	46bd      	mov	sp, r7
 801170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170e:	4770      	bx	lr

08011710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011710:	b5b0      	push	{r4, r5, r7, lr}
 8011712:	b088      	sub	sp, #32
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011718:	2300      	movs	r3, #0
 801171a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	689a      	ldr	r2, [r3, #8]
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	691b      	ldr	r3, [r3, #16]
 8011724:	431a      	orrs	r2, r3
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	695b      	ldr	r3, [r3, #20]
 801172a:	431a      	orrs	r2, r3
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	69db      	ldr	r3, [r3, #28]
 8011730:	4313      	orrs	r3, r2
 8011732:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	681a      	ldr	r2, [r3, #0]
 801173a:	4bad      	ldr	r3, [pc, #692]	; (80119f0 <UART_SetConfig+0x2e0>)
 801173c:	4013      	ands	r3, r2
 801173e:	687a      	ldr	r2, [r7, #4]
 8011740:	6812      	ldr	r2, [r2, #0]
 8011742:	69f9      	ldr	r1, [r7, #28]
 8011744:	430b      	orrs	r3, r1
 8011746:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	68da      	ldr	r2, [r3, #12]
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	430a      	orrs	r2, r1
 801175c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	699b      	ldr	r3, [r3, #24]
 8011762:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	4aa2      	ldr	r2, [pc, #648]	; (80119f4 <UART_SetConfig+0x2e4>)
 801176a:	4293      	cmp	r3, r2
 801176c:	d004      	beq.n	8011778 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6a1b      	ldr	r3, [r3, #32]
 8011772:	69fa      	ldr	r2, [r7, #28]
 8011774:	4313      	orrs	r3, r2
 8011776:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	689b      	ldr	r3, [r3, #8]
 801177e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	69fa      	ldr	r2, [r7, #28]
 8011788:	430a      	orrs	r2, r1
 801178a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	4a99      	ldr	r2, [pc, #612]	; (80119f8 <UART_SetConfig+0x2e8>)
 8011792:	4293      	cmp	r3, r2
 8011794:	d121      	bne.n	80117da <UART_SetConfig+0xca>
 8011796:	4b99      	ldr	r3, [pc, #612]	; (80119fc <UART_SetConfig+0x2ec>)
 8011798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801179c:	f003 0303 	and.w	r3, r3, #3
 80117a0:	2b03      	cmp	r3, #3
 80117a2:	d817      	bhi.n	80117d4 <UART_SetConfig+0xc4>
 80117a4:	a201      	add	r2, pc, #4	; (adr r2, 80117ac <UART_SetConfig+0x9c>)
 80117a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117aa:	bf00      	nop
 80117ac:	080117bd 	.word	0x080117bd
 80117b0:	080117c9 	.word	0x080117c9
 80117b4:	080117c3 	.word	0x080117c3
 80117b8:	080117cf 	.word	0x080117cf
 80117bc:	2301      	movs	r3, #1
 80117be:	76fb      	strb	r3, [r7, #27]
 80117c0:	e0e7      	b.n	8011992 <UART_SetConfig+0x282>
 80117c2:	2302      	movs	r3, #2
 80117c4:	76fb      	strb	r3, [r7, #27]
 80117c6:	e0e4      	b.n	8011992 <UART_SetConfig+0x282>
 80117c8:	2304      	movs	r3, #4
 80117ca:	76fb      	strb	r3, [r7, #27]
 80117cc:	e0e1      	b.n	8011992 <UART_SetConfig+0x282>
 80117ce:	2308      	movs	r3, #8
 80117d0:	76fb      	strb	r3, [r7, #27]
 80117d2:	e0de      	b.n	8011992 <UART_SetConfig+0x282>
 80117d4:	2310      	movs	r3, #16
 80117d6:	76fb      	strb	r3, [r7, #27]
 80117d8:	e0db      	b.n	8011992 <UART_SetConfig+0x282>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	4a88      	ldr	r2, [pc, #544]	; (8011a00 <UART_SetConfig+0x2f0>)
 80117e0:	4293      	cmp	r3, r2
 80117e2:	d132      	bne.n	801184a <UART_SetConfig+0x13a>
 80117e4:	4b85      	ldr	r3, [pc, #532]	; (80119fc <UART_SetConfig+0x2ec>)
 80117e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80117ea:	f003 030c 	and.w	r3, r3, #12
 80117ee:	2b0c      	cmp	r3, #12
 80117f0:	d828      	bhi.n	8011844 <UART_SetConfig+0x134>
 80117f2:	a201      	add	r2, pc, #4	; (adr r2, 80117f8 <UART_SetConfig+0xe8>)
 80117f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117f8:	0801182d 	.word	0x0801182d
 80117fc:	08011845 	.word	0x08011845
 8011800:	08011845 	.word	0x08011845
 8011804:	08011845 	.word	0x08011845
 8011808:	08011839 	.word	0x08011839
 801180c:	08011845 	.word	0x08011845
 8011810:	08011845 	.word	0x08011845
 8011814:	08011845 	.word	0x08011845
 8011818:	08011833 	.word	0x08011833
 801181c:	08011845 	.word	0x08011845
 8011820:	08011845 	.word	0x08011845
 8011824:	08011845 	.word	0x08011845
 8011828:	0801183f 	.word	0x0801183f
 801182c:	2300      	movs	r3, #0
 801182e:	76fb      	strb	r3, [r7, #27]
 8011830:	e0af      	b.n	8011992 <UART_SetConfig+0x282>
 8011832:	2302      	movs	r3, #2
 8011834:	76fb      	strb	r3, [r7, #27]
 8011836:	e0ac      	b.n	8011992 <UART_SetConfig+0x282>
 8011838:	2304      	movs	r3, #4
 801183a:	76fb      	strb	r3, [r7, #27]
 801183c:	e0a9      	b.n	8011992 <UART_SetConfig+0x282>
 801183e:	2308      	movs	r3, #8
 8011840:	76fb      	strb	r3, [r7, #27]
 8011842:	e0a6      	b.n	8011992 <UART_SetConfig+0x282>
 8011844:	2310      	movs	r3, #16
 8011846:	76fb      	strb	r3, [r7, #27]
 8011848:	e0a3      	b.n	8011992 <UART_SetConfig+0x282>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	4a6d      	ldr	r2, [pc, #436]	; (8011a04 <UART_SetConfig+0x2f4>)
 8011850:	4293      	cmp	r3, r2
 8011852:	d120      	bne.n	8011896 <UART_SetConfig+0x186>
 8011854:	4b69      	ldr	r3, [pc, #420]	; (80119fc <UART_SetConfig+0x2ec>)
 8011856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801185a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801185e:	2b30      	cmp	r3, #48	; 0x30
 8011860:	d013      	beq.n	801188a <UART_SetConfig+0x17a>
 8011862:	2b30      	cmp	r3, #48	; 0x30
 8011864:	d814      	bhi.n	8011890 <UART_SetConfig+0x180>
 8011866:	2b20      	cmp	r3, #32
 8011868:	d009      	beq.n	801187e <UART_SetConfig+0x16e>
 801186a:	2b20      	cmp	r3, #32
 801186c:	d810      	bhi.n	8011890 <UART_SetConfig+0x180>
 801186e:	2b00      	cmp	r3, #0
 8011870:	d002      	beq.n	8011878 <UART_SetConfig+0x168>
 8011872:	2b10      	cmp	r3, #16
 8011874:	d006      	beq.n	8011884 <UART_SetConfig+0x174>
 8011876:	e00b      	b.n	8011890 <UART_SetConfig+0x180>
 8011878:	2300      	movs	r3, #0
 801187a:	76fb      	strb	r3, [r7, #27]
 801187c:	e089      	b.n	8011992 <UART_SetConfig+0x282>
 801187e:	2302      	movs	r3, #2
 8011880:	76fb      	strb	r3, [r7, #27]
 8011882:	e086      	b.n	8011992 <UART_SetConfig+0x282>
 8011884:	2304      	movs	r3, #4
 8011886:	76fb      	strb	r3, [r7, #27]
 8011888:	e083      	b.n	8011992 <UART_SetConfig+0x282>
 801188a:	2308      	movs	r3, #8
 801188c:	76fb      	strb	r3, [r7, #27]
 801188e:	e080      	b.n	8011992 <UART_SetConfig+0x282>
 8011890:	2310      	movs	r3, #16
 8011892:	76fb      	strb	r3, [r7, #27]
 8011894:	e07d      	b.n	8011992 <UART_SetConfig+0x282>
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	4a5b      	ldr	r2, [pc, #364]	; (8011a08 <UART_SetConfig+0x2f8>)
 801189c:	4293      	cmp	r3, r2
 801189e:	d120      	bne.n	80118e2 <UART_SetConfig+0x1d2>
 80118a0:	4b56      	ldr	r3, [pc, #344]	; (80119fc <UART_SetConfig+0x2ec>)
 80118a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80118aa:	2bc0      	cmp	r3, #192	; 0xc0
 80118ac:	d013      	beq.n	80118d6 <UART_SetConfig+0x1c6>
 80118ae:	2bc0      	cmp	r3, #192	; 0xc0
 80118b0:	d814      	bhi.n	80118dc <UART_SetConfig+0x1cc>
 80118b2:	2b80      	cmp	r3, #128	; 0x80
 80118b4:	d009      	beq.n	80118ca <UART_SetConfig+0x1ba>
 80118b6:	2b80      	cmp	r3, #128	; 0x80
 80118b8:	d810      	bhi.n	80118dc <UART_SetConfig+0x1cc>
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d002      	beq.n	80118c4 <UART_SetConfig+0x1b4>
 80118be:	2b40      	cmp	r3, #64	; 0x40
 80118c0:	d006      	beq.n	80118d0 <UART_SetConfig+0x1c0>
 80118c2:	e00b      	b.n	80118dc <UART_SetConfig+0x1cc>
 80118c4:	2300      	movs	r3, #0
 80118c6:	76fb      	strb	r3, [r7, #27]
 80118c8:	e063      	b.n	8011992 <UART_SetConfig+0x282>
 80118ca:	2302      	movs	r3, #2
 80118cc:	76fb      	strb	r3, [r7, #27]
 80118ce:	e060      	b.n	8011992 <UART_SetConfig+0x282>
 80118d0:	2304      	movs	r3, #4
 80118d2:	76fb      	strb	r3, [r7, #27]
 80118d4:	e05d      	b.n	8011992 <UART_SetConfig+0x282>
 80118d6:	2308      	movs	r3, #8
 80118d8:	76fb      	strb	r3, [r7, #27]
 80118da:	e05a      	b.n	8011992 <UART_SetConfig+0x282>
 80118dc:	2310      	movs	r3, #16
 80118de:	76fb      	strb	r3, [r7, #27]
 80118e0:	e057      	b.n	8011992 <UART_SetConfig+0x282>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	4a49      	ldr	r2, [pc, #292]	; (8011a0c <UART_SetConfig+0x2fc>)
 80118e8:	4293      	cmp	r3, r2
 80118ea:	d125      	bne.n	8011938 <UART_SetConfig+0x228>
 80118ec:	4b43      	ldr	r3, [pc, #268]	; (80119fc <UART_SetConfig+0x2ec>)
 80118ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80118f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80118fa:	d017      	beq.n	801192c <UART_SetConfig+0x21c>
 80118fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011900:	d817      	bhi.n	8011932 <UART_SetConfig+0x222>
 8011902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011906:	d00b      	beq.n	8011920 <UART_SetConfig+0x210>
 8011908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801190c:	d811      	bhi.n	8011932 <UART_SetConfig+0x222>
 801190e:	2b00      	cmp	r3, #0
 8011910:	d003      	beq.n	801191a <UART_SetConfig+0x20a>
 8011912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011916:	d006      	beq.n	8011926 <UART_SetConfig+0x216>
 8011918:	e00b      	b.n	8011932 <UART_SetConfig+0x222>
 801191a:	2300      	movs	r3, #0
 801191c:	76fb      	strb	r3, [r7, #27]
 801191e:	e038      	b.n	8011992 <UART_SetConfig+0x282>
 8011920:	2302      	movs	r3, #2
 8011922:	76fb      	strb	r3, [r7, #27]
 8011924:	e035      	b.n	8011992 <UART_SetConfig+0x282>
 8011926:	2304      	movs	r3, #4
 8011928:	76fb      	strb	r3, [r7, #27]
 801192a:	e032      	b.n	8011992 <UART_SetConfig+0x282>
 801192c:	2308      	movs	r3, #8
 801192e:	76fb      	strb	r3, [r7, #27]
 8011930:	e02f      	b.n	8011992 <UART_SetConfig+0x282>
 8011932:	2310      	movs	r3, #16
 8011934:	76fb      	strb	r3, [r7, #27]
 8011936:	e02c      	b.n	8011992 <UART_SetConfig+0x282>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	4a2d      	ldr	r2, [pc, #180]	; (80119f4 <UART_SetConfig+0x2e4>)
 801193e:	4293      	cmp	r3, r2
 8011940:	d125      	bne.n	801198e <UART_SetConfig+0x27e>
 8011942:	4b2e      	ldr	r3, [pc, #184]	; (80119fc <UART_SetConfig+0x2ec>)
 8011944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011948:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801194c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011950:	d017      	beq.n	8011982 <UART_SetConfig+0x272>
 8011952:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011956:	d817      	bhi.n	8011988 <UART_SetConfig+0x278>
 8011958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801195c:	d00b      	beq.n	8011976 <UART_SetConfig+0x266>
 801195e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011962:	d811      	bhi.n	8011988 <UART_SetConfig+0x278>
 8011964:	2b00      	cmp	r3, #0
 8011966:	d003      	beq.n	8011970 <UART_SetConfig+0x260>
 8011968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801196c:	d006      	beq.n	801197c <UART_SetConfig+0x26c>
 801196e:	e00b      	b.n	8011988 <UART_SetConfig+0x278>
 8011970:	2300      	movs	r3, #0
 8011972:	76fb      	strb	r3, [r7, #27]
 8011974:	e00d      	b.n	8011992 <UART_SetConfig+0x282>
 8011976:	2302      	movs	r3, #2
 8011978:	76fb      	strb	r3, [r7, #27]
 801197a:	e00a      	b.n	8011992 <UART_SetConfig+0x282>
 801197c:	2304      	movs	r3, #4
 801197e:	76fb      	strb	r3, [r7, #27]
 8011980:	e007      	b.n	8011992 <UART_SetConfig+0x282>
 8011982:	2308      	movs	r3, #8
 8011984:	76fb      	strb	r3, [r7, #27]
 8011986:	e004      	b.n	8011992 <UART_SetConfig+0x282>
 8011988:	2310      	movs	r3, #16
 801198a:	76fb      	strb	r3, [r7, #27]
 801198c:	e001      	b.n	8011992 <UART_SetConfig+0x282>
 801198e:	2310      	movs	r3, #16
 8011990:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	4a17      	ldr	r2, [pc, #92]	; (80119f4 <UART_SetConfig+0x2e4>)
 8011998:	4293      	cmp	r3, r2
 801199a:	f040 8087 	bne.w	8011aac <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801199e:	7efb      	ldrb	r3, [r7, #27]
 80119a0:	2b08      	cmp	r3, #8
 80119a2:	d837      	bhi.n	8011a14 <UART_SetConfig+0x304>
 80119a4:	a201      	add	r2, pc, #4	; (adr r2, 80119ac <UART_SetConfig+0x29c>)
 80119a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119aa:	bf00      	nop
 80119ac:	080119d1 	.word	0x080119d1
 80119b0:	08011a15 	.word	0x08011a15
 80119b4:	080119d9 	.word	0x080119d9
 80119b8:	08011a15 	.word	0x08011a15
 80119bc:	080119df 	.word	0x080119df
 80119c0:	08011a15 	.word	0x08011a15
 80119c4:	08011a15 	.word	0x08011a15
 80119c8:	08011a15 	.word	0x08011a15
 80119cc:	080119e7 	.word	0x080119e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80119d0:	f7f9 fb46 	bl	800b060 <HAL_RCC_GetPCLK1Freq>
 80119d4:	6178      	str	r0, [r7, #20]
        break;
 80119d6:	e022      	b.n	8011a1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80119d8:	4b0d      	ldr	r3, [pc, #52]	; (8011a10 <UART_SetConfig+0x300>)
 80119da:	617b      	str	r3, [r7, #20]
        break;
 80119dc:	e01f      	b.n	8011a1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80119de:	f7f9 faa7 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 80119e2:	6178      	str	r0, [r7, #20]
        break;
 80119e4:	e01b      	b.n	8011a1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80119e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80119ea:	617b      	str	r3, [r7, #20]
        break;
 80119ec:	e017      	b.n	8011a1e <UART_SetConfig+0x30e>
 80119ee:	bf00      	nop
 80119f0:	efff69f3 	.word	0xefff69f3
 80119f4:	40008000 	.word	0x40008000
 80119f8:	40013800 	.word	0x40013800
 80119fc:	40021000 	.word	0x40021000
 8011a00:	40004400 	.word	0x40004400
 8011a04:	40004800 	.word	0x40004800
 8011a08:	40004c00 	.word	0x40004c00
 8011a0c:	40005000 	.word	0x40005000
 8011a10:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8011a14:	2300      	movs	r3, #0
 8011a16:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8011a18:	2301      	movs	r3, #1
 8011a1a:	76bb      	strb	r3, [r7, #26]
        break;
 8011a1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	f000 80f1 	beq.w	8011c08 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	685a      	ldr	r2, [r3, #4]
 8011a2a:	4613      	mov	r3, r2
 8011a2c:	005b      	lsls	r3, r3, #1
 8011a2e:	4413      	add	r3, r2
 8011a30:	697a      	ldr	r2, [r7, #20]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d305      	bcc.n	8011a42 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011a3c:	697a      	ldr	r2, [r7, #20]
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d902      	bls.n	8011a48 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8011a42:	2301      	movs	r3, #1
 8011a44:	76bb      	strb	r3, [r7, #26]
 8011a46:	e0df      	b.n	8011c08 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8011a48:	697b      	ldr	r3, [r7, #20]
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f04f 0100 	mov.w	r1, #0
 8011a50:	f04f 0200 	mov.w	r2, #0
 8011a54:	f04f 0300 	mov.w	r3, #0
 8011a58:	020b      	lsls	r3, r1, #8
 8011a5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011a5e:	0202      	lsls	r2, r0, #8
 8011a60:	6879      	ldr	r1, [r7, #4]
 8011a62:	6849      	ldr	r1, [r1, #4]
 8011a64:	0849      	lsrs	r1, r1, #1
 8011a66:	4608      	mov	r0, r1
 8011a68:	f04f 0100 	mov.w	r1, #0
 8011a6c:	1814      	adds	r4, r2, r0
 8011a6e:	eb43 0501 	adc.w	r5, r3, r1
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	461a      	mov	r2, r3
 8011a78:	f04f 0300 	mov.w	r3, #0
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	4629      	mov	r1, r5
 8011a80:	f7ee fbea 	bl	8000258 <__aeabi_uldivmod>
 8011a84:	4602      	mov	r2, r0
 8011a86:	460b      	mov	r3, r1
 8011a88:	4613      	mov	r3, r2
 8011a8a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011a92:	d308      	bcc.n	8011aa6 <UART_SetConfig+0x396>
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a9a:	d204      	bcs.n	8011aa6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	693a      	ldr	r2, [r7, #16]
 8011aa2:	60da      	str	r2, [r3, #12]
 8011aa4:	e0b0      	b.n	8011c08 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	76bb      	strb	r3, [r7, #26]
 8011aaa:	e0ad      	b.n	8011c08 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	69db      	ldr	r3, [r3, #28]
 8011ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011ab4:	d15c      	bne.n	8011b70 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8011ab6:	7efb      	ldrb	r3, [r7, #27]
 8011ab8:	2b08      	cmp	r3, #8
 8011aba:	d828      	bhi.n	8011b0e <UART_SetConfig+0x3fe>
 8011abc:	a201      	add	r2, pc, #4	; (adr r2, 8011ac4 <UART_SetConfig+0x3b4>)
 8011abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ac2:	bf00      	nop
 8011ac4:	08011ae9 	.word	0x08011ae9
 8011ac8:	08011af1 	.word	0x08011af1
 8011acc:	08011af9 	.word	0x08011af9
 8011ad0:	08011b0f 	.word	0x08011b0f
 8011ad4:	08011aff 	.word	0x08011aff
 8011ad8:	08011b0f 	.word	0x08011b0f
 8011adc:	08011b0f 	.word	0x08011b0f
 8011ae0:	08011b0f 	.word	0x08011b0f
 8011ae4:	08011b07 	.word	0x08011b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011ae8:	f7f9 faba 	bl	800b060 <HAL_RCC_GetPCLK1Freq>
 8011aec:	6178      	str	r0, [r7, #20]
        break;
 8011aee:	e013      	b.n	8011b18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011af0:	f7f9 facc 	bl	800b08c <HAL_RCC_GetPCLK2Freq>
 8011af4:	6178      	str	r0, [r7, #20]
        break;
 8011af6:	e00f      	b.n	8011b18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011af8:	4b49      	ldr	r3, [pc, #292]	; (8011c20 <UART_SetConfig+0x510>)
 8011afa:	617b      	str	r3, [r7, #20]
        break;
 8011afc:	e00c      	b.n	8011b18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011afe:	f7f9 fa17 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 8011b02:	6178      	str	r0, [r7, #20]
        break;
 8011b04:	e008      	b.n	8011b18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b0a:	617b      	str	r3, [r7, #20]
        break;
 8011b0c:	e004      	b.n	8011b18 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8011b12:	2301      	movs	r3, #1
 8011b14:	76bb      	strb	r3, [r7, #26]
        break;
 8011b16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d074      	beq.n	8011c08 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	005a      	lsls	r2, r3, #1
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	685b      	ldr	r3, [r3, #4]
 8011b26:	085b      	lsrs	r3, r3, #1
 8011b28:	441a      	add	r2, r3
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	685b      	ldr	r3, [r3, #4]
 8011b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b32:	b29b      	uxth	r3, r3
 8011b34:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	2b0f      	cmp	r3, #15
 8011b3a:	d916      	bls.n	8011b6a <UART_SetConfig+0x45a>
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b42:	d212      	bcs.n	8011b6a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011b44:	693b      	ldr	r3, [r7, #16]
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	f023 030f 	bic.w	r3, r3, #15
 8011b4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	085b      	lsrs	r3, r3, #1
 8011b52:	b29b      	uxth	r3, r3
 8011b54:	f003 0307 	and.w	r3, r3, #7
 8011b58:	b29a      	uxth	r2, r3
 8011b5a:	89fb      	ldrh	r3, [r7, #14]
 8011b5c:	4313      	orrs	r3, r2
 8011b5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	89fa      	ldrh	r2, [r7, #14]
 8011b66:	60da      	str	r2, [r3, #12]
 8011b68:	e04e      	b.n	8011c08 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	76bb      	strb	r3, [r7, #26]
 8011b6e:	e04b      	b.n	8011c08 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011b70:	7efb      	ldrb	r3, [r7, #27]
 8011b72:	2b08      	cmp	r3, #8
 8011b74:	d827      	bhi.n	8011bc6 <UART_SetConfig+0x4b6>
 8011b76:	a201      	add	r2, pc, #4	; (adr r2, 8011b7c <UART_SetConfig+0x46c>)
 8011b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b7c:	08011ba1 	.word	0x08011ba1
 8011b80:	08011ba9 	.word	0x08011ba9
 8011b84:	08011bb1 	.word	0x08011bb1
 8011b88:	08011bc7 	.word	0x08011bc7
 8011b8c:	08011bb7 	.word	0x08011bb7
 8011b90:	08011bc7 	.word	0x08011bc7
 8011b94:	08011bc7 	.word	0x08011bc7
 8011b98:	08011bc7 	.word	0x08011bc7
 8011b9c:	08011bbf 	.word	0x08011bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011ba0:	f7f9 fa5e 	bl	800b060 <HAL_RCC_GetPCLK1Freq>
 8011ba4:	6178      	str	r0, [r7, #20]
        break;
 8011ba6:	e013      	b.n	8011bd0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011ba8:	f7f9 fa70 	bl	800b08c <HAL_RCC_GetPCLK2Freq>
 8011bac:	6178      	str	r0, [r7, #20]
        break;
 8011bae:	e00f      	b.n	8011bd0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011bb0:	4b1b      	ldr	r3, [pc, #108]	; (8011c20 <UART_SetConfig+0x510>)
 8011bb2:	617b      	str	r3, [r7, #20]
        break;
 8011bb4:	e00c      	b.n	8011bd0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011bb6:	f7f9 f9bb 	bl	800af30 <HAL_RCC_GetSysClockFreq>
 8011bba:	6178      	str	r0, [r7, #20]
        break;
 8011bbc:	e008      	b.n	8011bd0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011bc2:	617b      	str	r3, [r7, #20]
        break;
 8011bc4:	e004      	b.n	8011bd0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8011bca:	2301      	movs	r3, #1
 8011bcc:	76bb      	strb	r3, [r7, #26]
        break;
 8011bce:	bf00      	nop
    }

    if (pclk != 0U)
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d018      	beq.n	8011c08 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	685b      	ldr	r3, [r3, #4]
 8011bda:	085a      	lsrs	r2, r3, #1
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	441a      	add	r2, r3
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	2b0f      	cmp	r3, #15
 8011bf0:	d908      	bls.n	8011c04 <UART_SetConfig+0x4f4>
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011bf8:	d204      	bcs.n	8011c04 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	693a      	ldr	r2, [r7, #16]
 8011c00:	60da      	str	r2, [r3, #12]
 8011c02:	e001      	b.n	8011c08 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8011c04:	2301      	movs	r3, #1
 8011c06:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2200      	movs	r2, #0
 8011c12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8011c14:	7ebb      	ldrb	r3, [r7, #26]
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3720      	adds	r7, #32
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8011c1e:	bf00      	nop
 8011c20:	00f42400 	.word	0x00f42400

08011c24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011c24:	b480      	push	{r7}
 8011c26:	b083      	sub	sp, #12
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c30:	f003 0301 	and.w	r3, r3, #1
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d00a      	beq.n	8011c4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	685b      	ldr	r3, [r3, #4]
 8011c3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	430a      	orrs	r2, r1
 8011c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c52:	f003 0302 	and.w	r3, r3, #2
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d00a      	beq.n	8011c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	430a      	orrs	r2, r1
 8011c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c74:	f003 0304 	and.w	r3, r3, #4
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d00a      	beq.n	8011c92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	685b      	ldr	r3, [r3, #4]
 8011c82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	430a      	orrs	r2, r1
 8011c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c96:	f003 0308 	and.w	r3, r3, #8
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d00a      	beq.n	8011cb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	685b      	ldr	r3, [r3, #4]
 8011ca4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	430a      	orrs	r2, r1
 8011cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cb8:	f003 0310 	and.w	r3, r3, #16
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d00a      	beq.n	8011cd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	689b      	ldr	r3, [r3, #8]
 8011cc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	430a      	orrs	r2, r1
 8011cd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cda:	f003 0320 	and.w	r3, r3, #32
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d00a      	beq.n	8011cf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	689b      	ldr	r3, [r3, #8]
 8011ce8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	430a      	orrs	r2, r1
 8011cf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d01a      	beq.n	8011d3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	430a      	orrs	r2, r1
 8011d18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011d22:	d10a      	bne.n	8011d3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	430a      	orrs	r2, r1
 8011d38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d00a      	beq.n	8011d5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	430a      	orrs	r2, r1
 8011d5a:	605a      	str	r2, [r3, #4]
  }
}
 8011d5c:	bf00      	nop
 8011d5e:	370c      	adds	r7, #12
 8011d60:	46bd      	mov	sp, r7
 8011d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d66:	4770      	bx	lr

08011d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b086      	sub	sp, #24
 8011d6c:	af02      	add	r7, sp, #8
 8011d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2200      	movs	r2, #0
 8011d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011d78:	f7ef fc6a 	bl	8001650 <HAL_GetTick>
 8011d7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f003 0308 	and.w	r3, r3, #8
 8011d88:	2b08      	cmp	r3, #8
 8011d8a:	d10e      	bne.n	8011daa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d90:	9300      	str	r3, [sp, #0]
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	2200      	movs	r2, #0
 8011d96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f000 f82d 	bl	8011dfa <UART_WaitOnFlagUntilTimeout>
 8011da0:	4603      	mov	r3, r0
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d001      	beq.n	8011daa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011da6:	2303      	movs	r3, #3
 8011da8:	e023      	b.n	8011df2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f003 0304 	and.w	r3, r3, #4
 8011db4:	2b04      	cmp	r3, #4
 8011db6:	d10e      	bne.n	8011dd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011dbc:	9300      	str	r3, [sp, #0]
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f000 f817 	bl	8011dfa <UART_WaitOnFlagUntilTimeout>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d001      	beq.n	8011dd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011dd2:	2303      	movs	r3, #3
 8011dd4:	e00d      	b.n	8011df2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2220      	movs	r2, #32
 8011dda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2220      	movs	r2, #32
 8011de0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2200      	movs	r2, #0
 8011de6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2200      	movs	r2, #0
 8011dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8011df0:	2300      	movs	r3, #0
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3710      	adds	r7, #16
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}

08011dfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011dfa:	b580      	push	{r7, lr}
 8011dfc:	b084      	sub	sp, #16
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	60f8      	str	r0, [r7, #12]
 8011e02:	60b9      	str	r1, [r7, #8]
 8011e04:	603b      	str	r3, [r7, #0]
 8011e06:	4613      	mov	r3, r2
 8011e08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011e0a:	e05e      	b.n	8011eca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011e0c:	69bb      	ldr	r3, [r7, #24]
 8011e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e12:	d05a      	beq.n	8011eca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e14:	f7ef fc1c 	bl	8001650 <HAL_GetTick>
 8011e18:	4602      	mov	r2, r0
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	1ad3      	subs	r3, r2, r3
 8011e1e:	69ba      	ldr	r2, [r7, #24]
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d302      	bcc.n	8011e2a <UART_WaitOnFlagUntilTimeout+0x30>
 8011e24:	69bb      	ldr	r3, [r7, #24]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d11b      	bne.n	8011e62 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	681a      	ldr	r2, [r3, #0]
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011e38:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	689a      	ldr	r2, [r3, #8]
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	f022 0201 	bic.w	r2, r2, #1
 8011e48:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	2220      	movs	r2, #32
 8011e4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2220      	movs	r2, #32
 8011e54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8011e5e:	2303      	movs	r3, #3
 8011e60:	e043      	b.n	8011eea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	f003 0304 	and.w	r3, r3, #4
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d02c      	beq.n	8011eca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	69db      	ldr	r3, [r3, #28]
 8011e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e7e:	d124      	bne.n	8011eca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e88:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	681a      	ldr	r2, [r3, #0]
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011e98:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	689a      	ldr	r2, [r3, #8]
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	f022 0201 	bic.w	r2, r2, #1
 8011ea8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	2220      	movs	r2, #32
 8011eae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	2220      	movs	r2, #32
 8011eb4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	2220      	movs	r2, #32
 8011eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8011ec6:	2303      	movs	r3, #3
 8011ec8:	e00f      	b.n	8011eea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	69da      	ldr	r2, [r3, #28]
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	4013      	ands	r3, r2
 8011ed4:	68ba      	ldr	r2, [r7, #8]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	bf0c      	ite	eq
 8011eda:	2301      	moveq	r3, #1
 8011edc:	2300      	movne	r3, #0
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	79fb      	ldrb	r3, [r7, #7]
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	d091      	beq.n	8011e0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011ee8:	2300      	movs	r3, #0
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	3710      	adds	r7, #16
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}
	...

08011ef4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011ef4:	b480      	push	{r7}
 8011ef6:	b085      	sub	sp, #20
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	60f8      	str	r0, [r7, #12]
 8011efc:	60b9      	str	r1, [r7, #8]
 8011efe:	4613      	mov	r3, r2
 8011f00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	68ba      	ldr	r2, [r7, #8]
 8011f06:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	88fa      	ldrh	r2, [r7, #6]
 8011f0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	88fa      	ldrh	r2, [r7, #6]
 8011f14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	689b      	ldr	r3, [r3, #8]
 8011f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f26:	d10e      	bne.n	8011f46 <UART_Start_Receive_IT+0x52>
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	691b      	ldr	r3, [r3, #16]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d105      	bne.n	8011f3c <UART_Start_Receive_IT+0x48>
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011f36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011f3a:	e02d      	b.n	8011f98 <UART_Start_Receive_IT+0xa4>
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	22ff      	movs	r2, #255	; 0xff
 8011f40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011f44:	e028      	b.n	8011f98 <UART_Start_Receive_IT+0xa4>
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	689b      	ldr	r3, [r3, #8]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d10d      	bne.n	8011f6a <UART_Start_Receive_IT+0x76>
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	691b      	ldr	r3, [r3, #16]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d104      	bne.n	8011f60 <UART_Start_Receive_IT+0x6c>
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	22ff      	movs	r2, #255	; 0xff
 8011f5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011f5e:	e01b      	b.n	8011f98 <UART_Start_Receive_IT+0xa4>
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	227f      	movs	r2, #127	; 0x7f
 8011f64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011f68:	e016      	b.n	8011f98 <UART_Start_Receive_IT+0xa4>
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	689b      	ldr	r3, [r3, #8]
 8011f6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011f72:	d10d      	bne.n	8011f90 <UART_Start_Receive_IT+0x9c>
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	691b      	ldr	r3, [r3, #16]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d104      	bne.n	8011f86 <UART_Start_Receive_IT+0x92>
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	227f      	movs	r2, #127	; 0x7f
 8011f80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011f84:	e008      	b.n	8011f98 <UART_Start_Receive_IT+0xa4>
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	223f      	movs	r2, #63	; 0x3f
 8011f8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011f8e:	e003      	b.n	8011f98 <UART_Start_Receive_IT+0xa4>
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2200      	movs	r2, #0
 8011f94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	2222      	movs	r2, #34	; 0x22
 8011fa4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	689a      	ldr	r2, [r3, #8]
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	f042 0201 	orr.w	r2, r2, #1
 8011fb4:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	689b      	ldr	r3, [r3, #8]
 8011fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011fbe:	d107      	bne.n	8011fd0 <UART_Start_Receive_IT+0xdc>
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	691b      	ldr	r3, [r3, #16]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d103      	bne.n	8011fd0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	4a0c      	ldr	r2, [pc, #48]	; (8011ffc <UART_Start_Receive_IT+0x108>)
 8011fcc:	665a      	str	r2, [r3, #100]	; 0x64
 8011fce:	e002      	b.n	8011fd6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	4a0b      	ldr	r2, [pc, #44]	; (8012000 <UART_Start_Receive_IT+0x10c>)
 8011fd4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	2200      	movs	r2, #0
 8011fda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	681a      	ldr	r2, [r3, #0]
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8011fec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8011fee:	2300      	movs	r3, #0
}
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	3714      	adds	r7, #20
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffa:	4770      	bx	lr
 8011ffc:	080126a5 	.word	0x080126a5
 8012000:	080125cd 	.word	0x080125cd

08012004 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b084      	sub	sp, #16
 8012008:	af00      	add	r7, sp, #0
 801200a:	60f8      	str	r0, [r7, #12]
 801200c:	60b9      	str	r1, [r7, #8]
 801200e:	4613      	mov	r3, r2
 8012010:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	68ba      	ldr	r2, [r7, #8]
 8012016:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	88fa      	ldrh	r2, [r7, #6]
 801201c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	2200      	movs	r2, #0
 8012024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	2222      	movs	r2, #34	; 0x22
 801202c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012032:	2b00      	cmp	r3, #0
 8012034:	d02b      	beq.n	801208e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801203a:	4a25      	ldr	r2, [pc, #148]	; (80120d0 <UART_Start_Receive_DMA+0xcc>)
 801203c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012042:	4a24      	ldr	r2, [pc, #144]	; (80120d4 <UART_Start_Receive_DMA+0xd0>)
 8012044:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801204a:	4a23      	ldr	r2, [pc, #140]	; (80120d8 <UART_Start_Receive_DMA+0xd4>)
 801204c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012052:	2200      	movs	r2, #0
 8012054:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	6f18      	ldr	r0, [r3, #112]	; 0x70
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	3324      	adds	r3, #36	; 0x24
 8012060:	4619      	mov	r1, r3
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012066:	461a      	mov	r2, r3
 8012068:	88fb      	ldrh	r3, [r7, #6]
 801206a:	f7f0 f99c 	bl	80023a6 <HAL_DMA_Start_IT>
 801206e:	4603      	mov	r3, r0
 8012070:	2b00      	cmp	r3, #0
 8012072:	d00c      	beq.n	801208e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	2210      	movs	r2, #16
 8012078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	2200      	movs	r2, #0
 8012080:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	2220      	movs	r2, #32
 8012088:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 801208a:	2301      	movs	r3, #1
 801208c:	e01c      	b.n	80120c8 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	2200      	movs	r2, #0
 8012092:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	681a      	ldr	r2, [r3, #0]
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80120a4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	689a      	ldr	r2, [r3, #8]
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	f042 0201 	orr.w	r2, r2, #1
 80120b4:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	689a      	ldr	r2, [r3, #8]
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80120c4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80120c6:	2300      	movs	r3, #0
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3710      	adds	r7, #16
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}
 80120d0:	080121d5 	.word	0x080121d5
 80120d4:	0801226d 	.word	0x0801226d
 80120d8:	080122a5 	.word	0x080122a5

080120dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80120dc:	b480      	push	{r7}
 80120de:	b083      	sub	sp, #12
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	681a      	ldr	r2, [r3, #0]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80120f2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2220      	movs	r2, #32
 80120f8:	679a      	str	r2, [r3, #120]	; 0x78
}
 80120fa:	bf00      	nop
 80120fc:	370c      	adds	r7, #12
 80120fe:	46bd      	mov	sp, r7
 8012100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012104:	4770      	bx	lr

08012106 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012106:	b480      	push	{r7}
 8012108:	b083      	sub	sp, #12
 801210a:	af00      	add	r7, sp, #0
 801210c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	681a      	ldr	r2, [r3, #0]
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801211c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	689a      	ldr	r2, [r3, #8]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	f022 0201 	bic.w	r2, r2, #1
 801212c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012132:	2b01      	cmp	r3, #1
 8012134:	d107      	bne.n	8012146 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	681a      	ldr	r2, [r3, #0]
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	f022 0210 	bic.w	r2, r2, #16
 8012144:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	2220      	movs	r2, #32
 801214a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2200      	movs	r2, #0
 8012150:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2200      	movs	r2, #0
 8012156:	665a      	str	r2, [r3, #100]	; 0x64
}
 8012158:	bf00      	nop
 801215a:	370c      	adds	r7, #12
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr

08012164 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b084      	sub	sp, #16
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012170:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	f003 0320 	and.w	r3, r3, #32
 801217c:	2b00      	cmp	r3, #0
 801217e:	d114      	bne.n	80121aa <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	2200      	movs	r2, #0
 8012184:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	689a      	ldr	r2, [r3, #8]
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012196:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	681a      	ldr	r2, [r3, #0]
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80121a6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80121a8:	e002      	b.n	80121b0 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80121aa:	68f8      	ldr	r0, [r7, #12]
 80121ac:	f7ff f8c0 	bl	8011330 <HAL_UART_TxCpltCallback>
}
 80121b0:	bf00      	nop
 80121b2:	3710      	adds	r7, #16
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b084      	sub	sp, #16
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80121c6:	68f8      	ldr	r0, [r7, #12]
 80121c8:	f7ff f8bc 	bl	8011344 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80121cc:	bf00      	nop
 80121ce:	3710      	adds	r7, #16
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121e0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	f003 0320 	and.w	r3, r3, #32
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d12a      	bne.n	8012246 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	2200      	movs	r2, #0
 80121f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	681a      	ldr	r2, [r3, #0]
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012206:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	689a      	ldr	r2, [r3, #8]
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	f022 0201 	bic.w	r2, r2, #1
 8012216:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	689a      	ldr	r2, [r3, #8]
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012226:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	2220      	movs	r2, #32
 801222c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012232:	2b01      	cmp	r3, #1
 8012234:	d107      	bne.n	8012246 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f022 0210 	bic.w	r2, r2, #16
 8012244:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801224a:	2b01      	cmp	r3, #1
 801224c:	d107      	bne.n	801225e <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012254:	4619      	mov	r1, r3
 8012256:	68f8      	ldr	r0, [r7, #12]
 8012258:	f7ff f8ba 	bl	80113d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801225c:	e002      	b.n	8012264 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 801225e:	68f8      	ldr	r0, [r7, #12]
 8012260:	f7ff f87a 	bl	8011358 <HAL_UART_RxCpltCallback>
}
 8012264:	bf00      	nop
 8012266:	3710      	adds	r7, #16
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}

0801226c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b084      	sub	sp, #16
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012278:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801227e:	2b01      	cmp	r3, #1
 8012280:	d109      	bne.n	8012296 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012288:	085b      	lsrs	r3, r3, #1
 801228a:	b29b      	uxth	r3, r3
 801228c:	4619      	mov	r1, r3
 801228e:	68f8      	ldr	r0, [r7, #12]
 8012290:	f7ff f89e 	bl	80113d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012294:	e002      	b.n	801229c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8012296:	68f8      	ldr	r0, [r7, #12]
 8012298:	f7ff f868 	bl	801136c <HAL_UART_RxHalfCpltCallback>
}
 801229c:	bf00      	nop
 801229e:	3710      	adds	r7, #16
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}

080122a4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b086      	sub	sp, #24
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122b0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122b6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122bc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	689b      	ldr	r3, [r3, #8]
 80122c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122c8:	2b80      	cmp	r3, #128	; 0x80
 80122ca:	d109      	bne.n	80122e0 <UART_DMAError+0x3c>
 80122cc:	693b      	ldr	r3, [r7, #16]
 80122ce:	2b21      	cmp	r3, #33	; 0x21
 80122d0:	d106      	bne.n	80122e0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	2200      	movs	r2, #0
 80122d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80122da:	6978      	ldr	r0, [r7, #20]
 80122dc:	f7ff fefe 	bl	80120dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	689b      	ldr	r3, [r3, #8]
 80122e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122ea:	2b40      	cmp	r3, #64	; 0x40
 80122ec:	d109      	bne.n	8012302 <UART_DMAError+0x5e>
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	2b22      	cmp	r3, #34	; 0x22
 80122f2:	d106      	bne.n	8012302 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	2200      	movs	r2, #0
 80122f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80122fc:	6978      	ldr	r0, [r7, #20]
 80122fe:	f7ff ff02 	bl	8012106 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012308:	f043 0210 	orr.w	r2, r3, #16
 801230c:	697b      	ldr	r3, [r7, #20]
 801230e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012312:	6978      	ldr	r0, [r7, #20]
 8012314:	f7ff f834 	bl	8011380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012318:	bf00      	nop
 801231a:	3718      	adds	r7, #24
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b084      	sub	sp, #16
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801232c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	2200      	movs	r2, #0
 8012332:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2200      	movs	r2, #0
 801233a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801233e:	68f8      	ldr	r0, [r7, #12]
 8012340:	f7ff f81e 	bl	8011380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012344:	bf00      	nop
 8012346:	3710      	adds	r7, #16
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}

0801234c <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b084      	sub	sp, #16
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012358:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801235e:	2200      	movs	r2, #0
 8012360:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012366:	2b00      	cmp	r3, #0
 8012368:	d004      	beq.n	8012374 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801236e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012370:	2b00      	cmp	r3, #0
 8012372:	d11c      	bne.n	80123ae <UART_DMATxAbortCallback+0x62>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	2200      	movs	r2, #0
 8012378:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	2200      	movs	r2, #0
 8012380:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	2200      	movs	r2, #0
 8012388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	220f      	movs	r2, #15
 8012392:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	2220      	movs	r2, #32
 8012398:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	2220      	movs	r2, #32
 801239e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	2200      	movs	r2, #0
 80123a4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80123a6:	68f8      	ldr	r0, [r7, #12]
 80123a8:	f7fe fff4 	bl	8011394 <HAL_UART_AbortCpltCallback>
 80123ac:	e000      	b.n	80123b0 <UART_DMATxAbortCallback+0x64>
      return;
 80123ae:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80123b0:	3710      	adds	r7, #16
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}

080123b6 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80123b6:	b580      	push	{r7, lr}
 80123b8:	b084      	sub	sp, #16
 80123ba:	af00      	add	r7, sp, #0
 80123bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123c2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123c8:	2200      	movs	r2, #0
 80123ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d004      	beq.n	80123de <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d126      	bne.n	801242c <UART_DMARxAbortCallback+0x76>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	2200      	movs	r2, #0
 80123e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	2200      	movs	r2, #0
 80123ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	2200      	movs	r2, #0
 80123f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	220f      	movs	r2, #15
 80123fc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	8b1b      	ldrh	r3, [r3, #24]
 8012404:	b29a      	uxth	r2, r3
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	f042 0208 	orr.w	r2, r2, #8
 801240e:	b292      	uxth	r2, r2
 8012410:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	2220      	movs	r2, #32
 8012416:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	2220      	movs	r2, #32
 801241c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	2200      	movs	r2, #0
 8012422:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8012424:	68f8      	ldr	r0, [r7, #12]
 8012426:	f7fe ffb5 	bl	8011394 <HAL_UART_AbortCpltCallback>
 801242a:	e000      	b.n	801242e <UART_DMARxAbortCallback+0x78>
      return;
 801242c:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801242e:	3710      	adds	r7, #16
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}

08012434 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b084      	sub	sp, #16
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012440:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	2200      	movs	r2, #0
 8012446:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	2220      	movs	r2, #32
 801244e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8012450:	68f8      	ldr	r0, [r7, #12]
 8012452:	f7fe ffa9 	bl	80113a8 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012456:	bf00      	nop
 8012458:	3710      	adds	r7, #16
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}

0801245e <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 801245e:	b580      	push	{r7, lr}
 8012460:	b084      	sub	sp, #16
 8012462:	af00      	add	r7, sp, #0
 8012464:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801246a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	2200      	movs	r2, #0
 8012470:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	220f      	movs	r2, #15
 801247a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	8b1b      	ldrh	r3, [r3, #24]
 8012482:	b29a      	uxth	r2, r3
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	f042 0208 	orr.w	r2, r2, #8
 801248c:	b292      	uxth	r2, r2
 801248e:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	2220      	movs	r2, #32
 8012494:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	2200      	movs	r2, #0
 801249a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 801249c:	68f8      	ldr	r0, [r7, #12]
 801249e:	f7fe ff8d 	bl	80113bc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80124a2:	bf00      	nop
 80124a4:	3710      	adds	r7, #16
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}

080124aa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80124aa:	b480      	push	{r7}
 80124ac:	b083      	sub	sp, #12
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80124b6:	2b21      	cmp	r3, #33	; 0x21
 80124b8:	d12b      	bne.n	8012512 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d110      	bne.n	80124e8 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	681a      	ldr	r2, [r3, #0]
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80124d4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	681a      	ldr	r2, [r3, #0]
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80124e4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80124e6:	e014      	b.n	8012512 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80124ec:	781a      	ldrb	r2, [r3, #0]
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	b292      	uxth	r2, r2
 80124f4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80124fa:	1c5a      	adds	r2, r3, #1
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012506:	b29b      	uxth	r3, r3
 8012508:	3b01      	subs	r3, #1
 801250a:	b29a      	uxth	r2, r3
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8012512:	bf00      	nop
 8012514:	370c      	adds	r7, #12
 8012516:	46bd      	mov	sp, r7
 8012518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251c:	4770      	bx	lr

0801251e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 801251e:	b480      	push	{r7}
 8012520:	b085      	sub	sp, #20
 8012522:	af00      	add	r7, sp, #0
 8012524:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801252a:	2b21      	cmp	r3, #33	; 0x21
 801252c:	d12f      	bne.n	801258e <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012534:	b29b      	uxth	r3, r3
 8012536:	2b00      	cmp	r3, #0
 8012538:	d110      	bne.n	801255c <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012548:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	681a      	ldr	r2, [r3, #0]
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012558:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801255a:	e018      	b.n	801258e <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012560:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	881a      	ldrh	r2, [r3, #0]
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801256e:	b292      	uxth	r2, r2
 8012570:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012576:	1c9a      	adds	r2, r3, #2
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012582:	b29b      	uxth	r3, r3
 8012584:	3b01      	subs	r3, #1
 8012586:	b29a      	uxth	r2, r3
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 801258e:	bf00      	nop
 8012590:	3714      	adds	r7, #20
 8012592:	46bd      	mov	sp, r7
 8012594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012598:	4770      	bx	lr

0801259a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801259a:	b580      	push	{r7, lr}
 801259c:	b082      	sub	sp, #8
 801259e:	af00      	add	r7, sp, #0
 80125a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	681a      	ldr	r2, [r3, #0]
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80125b0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	2220      	movs	r2, #32
 80125b6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2200      	movs	r2, #0
 80125bc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f7fe feb6 	bl	8011330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80125c4:	bf00      	nop
 80125c6:	3708      	adds	r7, #8
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}

080125cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b084      	sub	sp, #16
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80125da:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80125e0:	2b22      	cmp	r3, #34	; 0x22
 80125e2:	d151      	bne.n	8012688 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80125ea:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80125ec:	89bb      	ldrh	r3, [r7, #12]
 80125ee:	b2d9      	uxtb	r1, r3
 80125f0:	89fb      	ldrh	r3, [r7, #14]
 80125f2:	b2da      	uxtb	r2, r3
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125f8:	400a      	ands	r2, r1
 80125fa:	b2d2      	uxtb	r2, r2
 80125fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012602:	1c5a      	adds	r2, r3, #1
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801260e:	b29b      	uxth	r3, r3
 8012610:	3b01      	subs	r3, #1
 8012612:	b29a      	uxth	r2, r3
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012620:	b29b      	uxth	r3, r3
 8012622:	2b00      	cmp	r3, #0
 8012624:	d13a      	bne.n	801269c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	681a      	ldr	r2, [r3, #0]
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8012634:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	689a      	ldr	r2, [r3, #8]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	f022 0201 	bic.w	r2, r2, #1
 8012644:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	2220      	movs	r2, #32
 801264a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2200      	movs	r2, #0
 8012650:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012656:	2b01      	cmp	r3, #1
 8012658:	d10f      	bne.n	801267a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	681a      	ldr	r2, [r3, #0]
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f022 0210 	bic.w	r2, r2, #16
 8012668:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012670:	4619      	mov	r1, r3
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f7fe feac 	bl	80113d0 <HAL_UARTEx_RxEventCallback>
 8012678:	e002      	b.n	8012680 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f7fe fe6c 	bl	8011358 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2200      	movs	r2, #0
 8012684:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012686:	e009      	b.n	801269c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	8b1b      	ldrh	r3, [r3, #24]
 801268e:	b29a      	uxth	r2, r3
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	f042 0208 	orr.w	r2, r2, #8
 8012698:	b292      	uxth	r2, r2
 801269a:	831a      	strh	r2, [r3, #24]
}
 801269c:	bf00      	nop
 801269e:	3710      	adds	r7, #16
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}

080126a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b084      	sub	sp, #16
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80126b2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80126b8:	2b22      	cmp	r3, #34	; 0x22
 80126ba:	d151      	bne.n	8012760 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80126c2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126c8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80126ca:	89ba      	ldrh	r2, [r7, #12]
 80126cc:	89fb      	ldrh	r3, [r7, #14]
 80126ce:	4013      	ands	r3, r2
 80126d0:	b29a      	uxth	r2, r3
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126da:	1c9a      	adds	r2, r3, #2
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	3b01      	subs	r3, #1
 80126ea:	b29a      	uxth	r2, r3
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80126f8:	b29b      	uxth	r3, r3
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d13a      	bne.n	8012774 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	681a      	ldr	r2, [r3, #0]
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801270c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	689a      	ldr	r2, [r3, #8]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	f022 0201 	bic.w	r2, r2, #1
 801271c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2220      	movs	r2, #32
 8012722:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2200      	movs	r2, #0
 8012728:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801272e:	2b01      	cmp	r3, #1
 8012730:	d10f      	bne.n	8012752 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	681a      	ldr	r2, [r3, #0]
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	f022 0210 	bic.w	r2, r2, #16
 8012740:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012748:	4619      	mov	r1, r3
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f7fe fe40 	bl	80113d0 <HAL_UARTEx_RxEventCallback>
 8012750:	e002      	b.n	8012758 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f7fe fe00 	bl	8011358 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	2200      	movs	r2, #0
 801275c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801275e:	e009      	b.n	8012774 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	8b1b      	ldrh	r3, [r3, #24]
 8012766:	b29a      	uxth	r2, r3
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f042 0208 	orr.w	r2, r2, #8
 8012770:	b292      	uxth	r2, r2
 8012772:	831a      	strh	r2, [r3, #24]
}
 8012774:	bf00      	nop
 8012776:	3710      	adds	r7, #16
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}

0801277c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b086      	sub	sp, #24
 8012780:	af00      	add	r7, sp, #0
 8012782:	60f8      	str	r0, [r7, #12]
 8012784:	60b9      	str	r1, [r7, #8]
 8012786:	607a      	str	r2, [r7, #4]
 8012788:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d101      	bne.n	8012794 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8012790:	2301      	movs	r3, #1
 8012792:	e056      	b.n	8012842 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012798:	2b00      	cmp	r3, #0
 801279a:	d106      	bne.n	80127aa <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	2200      	movs	r2, #0
 80127a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80127a4:	68f8      	ldr	r0, [r7, #12]
 80127a6:	f7ee fe19 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	2224      	movs	r2, #36	; 0x24
 80127ae:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	681a      	ldr	r2, [r3, #0]
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	f022 0201 	bic.w	r2, r2, #1
 80127be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80127c0:	68f8      	ldr	r0, [r7, #12]
 80127c2:	f7fe ffa5 	bl	8011710 <UART_SetConfig>
 80127c6:	4603      	mov	r3, r0
 80127c8:	2b01      	cmp	r3, #1
 80127ca:	d101      	bne.n	80127d0 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 80127cc:	2301      	movs	r3, #1
 80127ce:	e038      	b.n	8012842 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d002      	beq.n	80127de <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80127d8:	68f8      	ldr	r0, [r7, #12]
 80127da:	f7ff fa23 	bl	8011c24 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	689a      	ldr	r2, [r3, #8]
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80127ec:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	689b      	ldr	r3, [r3, #8]
 80127f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	68ba      	ldr	r2, [r7, #8]
 80127fe:	430a      	orrs	r2, r1
 8012800:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	055b      	lsls	r3, r3, #21
 8012806:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	041b      	lsls	r3, r3, #16
 801280c:	697a      	ldr	r2, [r7, #20]
 801280e:	4313      	orrs	r3, r2
 8012810:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 801281c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8012820:	68fa      	ldr	r2, [r7, #12]
 8012822:	6812      	ldr	r2, [r2, #0]
 8012824:	6979      	ldr	r1, [r7, #20]
 8012826:	430b      	orrs	r3, r1
 8012828:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	681a      	ldr	r2, [r3, #0]
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	f042 0201 	orr.w	r2, r2, #1
 8012838:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801283a:	68f8      	ldr	r0, [r7, #12]
 801283c:	f7ff fa94 	bl	8011d68 <UART_CheckIdleState>
 8012840:	4603      	mov	r3, r0
}
 8012842:	4618      	mov	r0, r3
 8012844:	3718      	adds	r7, #24
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}

0801284a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801284a:	b480      	push	{r7}
 801284c:	b083      	sub	sp, #12
 801284e:	af00      	add	r7, sp, #0
 8012850:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012852:	bf00      	nop
 8012854:	370c      	adds	r7, #12
 8012856:	46bd      	mov	sp, r7
 8012858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285c:	4770      	bx	lr

0801285e <HAL_UARTEx_EnableClockStopMode>:
  *         and desired baud rate is 9600 baud, the bit UCESM bit in LPUART_CR3 control register must be set.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableClockStopMode(UART_HandleTypeDef *huart)
{
 801285e:	b480      	push	{r7}
 8012860:	b083      	sub	sp, #12
 8012862:	af00      	add	r7, sp, #0
 8012864:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801286c:	2b01      	cmp	r3, #1
 801286e:	d101      	bne.n	8012874 <HAL_UARTEx_EnableClockStopMode+0x16>
 8012870:	2302      	movs	r3, #2
 8012872:	e010      	b.n	8012896 <HAL_UARTEx_EnableClockStopMode+0x38>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2201      	movs	r2, #1
 8012878:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Set UCESM bit */
  SET_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	689a      	ldr	r2, [r3, #8]
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 801288a:	609a      	str	r2, [r3, #8]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2200      	movs	r2, #0
 8012890:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8012894:	2300      	movs	r3, #0
}
 8012896:	4618      	mov	r0, r3
 8012898:	370c      	adds	r7, #12
 801289a:	46bd      	mov	sp, r7
 801289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a0:	4770      	bx	lr

080128a2 <HAL_UARTEx_DisableClockStopMode>:
  * @brief  Disable UART Clock when in Stop Mode.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableClockStopMode(UART_HandleTypeDef *huart)
{
 80128a2:	b480      	push	{r7}
 80128a4:	b083      	sub	sp, #12
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80128b0:	2b01      	cmp	r3, #1
 80128b2:	d101      	bne.n	80128b8 <HAL_UARTEx_DisableClockStopMode+0x16>
 80128b4:	2302      	movs	r3, #2
 80128b6:	e010      	b.n	80128da <HAL_UARTEx_DisableClockStopMode+0x38>
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2201      	movs	r2, #1
 80128bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Clear UCESM bit */
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	689a      	ldr	r2, [r3, #8]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80128ce:	609a      	str	r2, [r3, #8]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2200      	movs	r2, #0
 80128d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80128d8:	2300      	movs	r3, #0
}
 80128da:	4618      	mov	r0, r3
 80128dc:	370c      	adds	r7, #12
 80128de:	46bd      	mov	sp, r7
 80128e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e4:	4770      	bx	lr

080128e6 <HAL_MultiProcessorEx_AddressLength_Set>:
  *          @arg @ref UART_ADDRESS_DETECT_4B 4-bit long address
  *          @arg @ref UART_ADDRESS_DETECT_7B 6-, 7- or 8-bit long address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength)
{
 80128e6:	b580      	push	{r7, lr}
 80128e8:	b082      	sub	sp, #8
 80128ea:	af00      	add	r7, sp, #0
 80128ec:	6078      	str	r0, [r7, #4]
 80128ee:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d101      	bne.n	80128fa <HAL_MultiProcessorEx_AddressLength_Set+0x14>
  {
    return HAL_ERROR;
 80128f6:	2301      	movs	r3, #1
 80128f8:	e020      	b.n	801293c <HAL_MultiProcessorEx_AddressLength_Set+0x56>
  }

  /* Check the address length parameter */
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));

  huart->gState = HAL_UART_STATE_BUSY;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2224      	movs	r2, #36	; 0x24
 80128fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	681a      	ldr	r2, [r3, #0]
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	f022 0201 	bic.w	r2, r2, #1
 801290e:	601a      	str	r2, [r3, #0]

  /* Set the address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	f023 0110 	bic.w	r1, r3, #16
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	683a      	ldr	r2, [r7, #0]
 8012920:	430a      	orrs	r2, r1
 8012922:	605a      	str	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	681a      	ldr	r2, [r3, #0]
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	f042 0201 	orr.w	r2, r2, #1
 8012932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState to Ready */
  return (UART_CheckIdleState(huart));
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f7ff fa17 	bl	8011d68 <UART_CheckIdleState>
 801293a:	4603      	mov	r3, r0
}
 801293c:	4618      	mov	r0, r3
 801293e:	3708      	adds	r7, #8
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}

08012944 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b088      	sub	sp, #32
 8012948:	af02      	add	r7, sp, #8
 801294a:	60f8      	str	r0, [r7, #12]
 801294c:	1d3b      	adds	r3, r7, #4
 801294e:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8012952:	2300      	movs	r3, #0
 8012954:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801295c:	2b01      	cmp	r3, #1
 801295e:	d101      	bne.n	8012964 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8012960:	2302      	movs	r3, #2
 8012962:	e044      	b.n	80129ee <HAL_UARTEx_StopModeWakeUpSourceConfig+0xaa>
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	2201      	movs	r2, #1
 8012968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  huart->gState = HAL_UART_STATE_BUSY;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	2224      	movs	r2, #36	; 0x24
 8012970:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	681a      	ldr	r2, [r3, #0]
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	f022 0201 	bic.w	r2, r2, #1
 8012980:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	689b      	ldr	r3, [r3, #8]
 8012988:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	430a      	orrs	r2, r1
 8012994:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d105      	bne.n	80129a8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x64>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 801299c:	1d3b      	adds	r3, r7, #4
 801299e:	e893 0006 	ldmia.w	r3, {r1, r2}
 80129a2:	68f8      	ldr	r0, [r7, #12]
 80129a4:	f000 f9fe 	bl	8012da4 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	f042 0201 	orr.w	r2, r2, #1
 80129b6:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80129b8:	f7ee fe4a 	bl	8001650 <HAL_GetTick>
 80129bc:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80129be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80129c2:	9300      	str	r3, [sp, #0]
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	2200      	movs	r2, #0
 80129c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80129cc:	68f8      	ldr	r0, [r7, #12]
 80129ce:	f7ff fa14 	bl	8011dfa <UART_WaitOnFlagUntilTimeout>
 80129d2:	4603      	mov	r3, r0
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d002      	beq.n	80129de <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9a>
  {
    status = HAL_TIMEOUT;
 80129d8:	2303      	movs	r3, #3
 80129da:	75fb      	strb	r3, [r7, #23]
 80129dc:	e002      	b.n	80129e4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa0>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	2220      	movs	r2, #32
 80129e2:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	2200      	movs	r2, #0
 80129e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return status;
 80129ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	3718      	adds	r7, #24
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}

080129f6 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80129f6:	b480      	push	{r7}
 80129f8:	b083      	sub	sp, #12
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012a04:	2b01      	cmp	r3, #1
 8012a06:	d101      	bne.n	8012a0c <HAL_UARTEx_EnableStopMode+0x16>
 8012a08:	2302      	movs	r3, #2
 8012a0a:	e010      	b.n	8012a2e <HAL_UARTEx_EnableStopMode+0x38>
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2201      	movs	r2, #1
 8012a10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	681a      	ldr	r2, [r3, #0]
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	f042 0202 	orr.w	r2, r2, #2
 8012a22:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2200      	movs	r2, #0
 8012a28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8012a2c:	2300      	movs	r3, #0
}
 8012a2e:	4618      	mov	r0, r3
 8012a30:	370c      	adds	r7, #12
 8012a32:	46bd      	mov	sp, r7
 8012a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a38:	4770      	bx	lr

08012a3a <HAL_UARTEx_DisableStopMode>:
  * @brief Disable UART Stop Mode.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart)
{
 8012a3a:	b480      	push	{r7}
 8012a3c:	b083      	sub	sp, #12
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012a48:	2b01      	cmp	r3, #1
 8012a4a:	d101      	bne.n	8012a50 <HAL_UARTEx_DisableStopMode+0x16>
 8012a4c:	2302      	movs	r3, #2
 8012a4e:	e010      	b.n	8012a72 <HAL_UARTEx_DisableStopMode+0x38>
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2201      	movs	r2, #1
 8012a54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Clear UESM bit */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	681a      	ldr	r2, [r3, #0]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	f022 0202 	bic.w	r2, r2, #2
 8012a66:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8012a70:	2300      	movs	r3, #0
}
 8012a72:	4618      	mov	r0, r3
 8012a74:	370c      	adds	r7, #12
 8012a76:	46bd      	mov	sp, r7
 8012a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7c:	4770      	bx	lr

08012a7e <HAL_UARTEx_ReceiveToIdle>:
  * @param RxLen   Number of data elements finally received (could be lower than Size, in case reception ends on IDLE event)
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen, uint32_t Timeout)
{
 8012a7e:	b580      	push	{r7, lr}
 8012a80:	b088      	sub	sp, #32
 8012a82:	af00      	add	r7, sp, #0
 8012a84:	60f8      	str	r0, [r7, #12]
 8012a86:	60b9      	str	r1, [r7, #8]
 8012a88:	603b      	str	r3, [r7, #0]
 8012a8a:	4613      	mov	r3, r2
 8012a8c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a92:	2b20      	cmp	r3, #32
 8012a94:	f040 80f5 	bne.w	8012c82 <HAL_UARTEx_ReceiveToIdle+0x204>
  {
    if ((pData == NULL) || (Size == 0U))
 8012a98:	68bb      	ldr	r3, [r7, #8]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d002      	beq.n	8012aa4 <HAL_UARTEx_ReceiveToIdle+0x26>
 8012a9e:	88fb      	ldrh	r3, [r7, #6]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d101      	bne.n	8012aa8 <HAL_UARTEx_ReceiveToIdle+0x2a>
    {
      return  HAL_ERROR;
 8012aa4:	2301      	movs	r3, #1
 8012aa6:	e0ed      	b.n	8012c84 <HAL_UARTEx_ReceiveToIdle+0x206>
    }

    __HAL_LOCK(huart);
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012aae:	2b01      	cmp	r3, #1
 8012ab0:	d101      	bne.n	8012ab6 <HAL_UARTEx_ReceiveToIdle+0x38>
 8012ab2:	2302      	movs	r3, #2
 8012ab4:	e0e6      	b.n	8012c84 <HAL_UARTEx_ReceiveToIdle+0x206>
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	2201      	movs	r2, #1
 8012aba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	2222      	movs	r2, #34	; 0x22
 8012aca:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	2201      	movs	r2, #1
 8012ad0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012ad2:	f7ee fdbd 	bl	8001650 <HAL_GetTick>
 8012ad6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	88fa      	ldrh	r2, [r7, #6]
 8012adc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	88fa      	ldrh	r2, [r7, #6]
 8012ae4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	689b      	ldr	r3, [r3, #8]
 8012aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012af0:	d10e      	bne.n	8012b10 <HAL_UARTEx_ReceiveToIdle+0x92>
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	691b      	ldr	r3, [r3, #16]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d105      	bne.n	8012b06 <HAL_UARTEx_ReceiveToIdle+0x88>
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012b00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012b04:	e02d      	b.n	8012b62 <HAL_UARTEx_ReceiveToIdle+0xe4>
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	22ff      	movs	r2, #255	; 0xff
 8012b0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012b0e:	e028      	b.n	8012b62 <HAL_UARTEx_ReceiveToIdle+0xe4>
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	689b      	ldr	r3, [r3, #8]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d10d      	bne.n	8012b34 <HAL_UARTEx_ReceiveToIdle+0xb6>
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	691b      	ldr	r3, [r3, #16]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d104      	bne.n	8012b2a <HAL_UARTEx_ReceiveToIdle+0xac>
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	22ff      	movs	r2, #255	; 0xff
 8012b24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012b28:	e01b      	b.n	8012b62 <HAL_UARTEx_ReceiveToIdle+0xe4>
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	227f      	movs	r2, #127	; 0x7f
 8012b2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012b32:	e016      	b.n	8012b62 <HAL_UARTEx_ReceiveToIdle+0xe4>
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	689b      	ldr	r3, [r3, #8]
 8012b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012b3c:	d10d      	bne.n	8012b5a <HAL_UARTEx_ReceiveToIdle+0xdc>
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	691b      	ldr	r3, [r3, #16]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d104      	bne.n	8012b50 <HAL_UARTEx_ReceiveToIdle+0xd2>
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	227f      	movs	r2, #127	; 0x7f
 8012b4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012b4e:	e008      	b.n	8012b62 <HAL_UARTEx_ReceiveToIdle+0xe4>
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	223f      	movs	r2, #63	; 0x3f
 8012b54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012b58:	e003      	b.n	8012b62 <HAL_UARTEx_ReceiveToIdle+0xe4>
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012b68:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	689b      	ldr	r3, [r3, #8]
 8012b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b72:	d108      	bne.n	8012b86 <HAL_UARTEx_ReceiveToIdle+0x108>
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	691b      	ldr	r3, [r3, #16]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d104      	bne.n	8012b86 <HAL_UARTEx_ReceiveToIdle+0x108>
    {
      pdata8bits  = NULL;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	61bb      	str	r3, [r7, #24]
 8012b84:	e003      	b.n	8012b8e <HAL_UARTEx_ReceiveToIdle+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	2200      	movs	r2, #0
 8012b92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	2200      	movs	r2, #0
 8012b9a:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8012b9c:	e05b      	b.n	8012c56 <HAL_UARTEx_ReceiveToIdle+0x1d8>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	69db      	ldr	r3, [r3, #28]
 8012ba4:	f003 0310 	and.w	r3, r3, #16
 8012ba8:	2b10      	cmp	r3, #16
 8012baa:	d10c      	bne.n	8012bc6 <HAL_UARTEx_ReceiveToIdle+0x148>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	2210      	movs	r2, #16
 8012bb2:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	881b      	ldrh	r3, [r3, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d004      	beq.n	8012bc6 <HAL_UARTEx_ReceiveToIdle+0x148>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	2220      	movs	r2, #32
 8012bc0:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_OK;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	e05e      	b.n	8012c84 <HAL_UARTEx_ReceiveToIdle+0x206>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	69db      	ldr	r3, [r3, #28]
 8012bcc:	f003 0320 	and.w	r3, r3, #32
 8012bd0:	2b20      	cmp	r3, #32
 8012bd2:	d12c      	bne.n	8012c2e <HAL_UARTEx_ReceiveToIdle+0x1b0>
      {
        if (pdata8bits == NULL)
 8012bd4:	69fb      	ldr	r3, [r7, #28]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d10c      	bne.n	8012bf4 <HAL_UARTEx_ReceiveToIdle+0x176>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012be0:	b29a      	uxth	r2, r3
 8012be2:	8a7b      	ldrh	r3, [r7, #18]
 8012be4:	4013      	ands	r3, r2
 8012be6:	b29a      	uxth	r2, r3
 8012be8:	69bb      	ldr	r3, [r7, #24]
 8012bea:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8012bec:	69bb      	ldr	r3, [r7, #24]
 8012bee:	3302      	adds	r3, #2
 8012bf0:	61bb      	str	r3, [r7, #24]
 8012bf2:	e00d      	b.n	8012c10 <HAL_UARTEx_ReceiveToIdle+0x192>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012bfa:	b29b      	uxth	r3, r3
 8012bfc:	b2da      	uxtb	r2, r3
 8012bfe:	8a7b      	ldrh	r3, [r7, #18]
 8012c00:	b2db      	uxtb	r3, r3
 8012c02:	4013      	ands	r3, r2
 8012c04:	b2da      	uxtb	r2, r3
 8012c06:	69fb      	ldr	r3, [r7, #28]
 8012c08:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8012c0a:	69fb      	ldr	r3, [r7, #28]
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	881b      	ldrh	r3, [r3, #0]
 8012c14:	3301      	adds	r3, #1
 8012c16:	b29a      	uxth	r2, r3
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	3b01      	subs	r3, #1
 8012c26:	b29a      	uxth	r2, r3
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c34:	d00f      	beq.n	8012c56 <HAL_UARTEx_ReceiveToIdle+0x1d8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8012c36:	f7ee fd0b 	bl	8001650 <HAL_GetTick>
 8012c3a:	4602      	mov	r2, r0
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	1ad3      	subs	r3, r2, r3
 8012c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d302      	bcc.n	8012c4c <HAL_UARTEx_ReceiveToIdle+0x1ce>
 8012c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d104      	bne.n	8012c56 <HAL_UARTEx_ReceiveToIdle+0x1d8>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	2220      	movs	r2, #32
 8012c50:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8012c52:	2303      	movs	r3, #3
 8012c54:	e016      	b.n	8012c84 <HAL_UARTEx_ReceiveToIdle+0x206>
    while (huart->RxXferCount > 0U)
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012c5c:	b29b      	uxth	r3, r3
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d19d      	bne.n	8012b9e <HAL_UARTEx_ReceiveToIdle+0x120>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012c6e:	b29b      	uxth	r3, r3
 8012c70:	1ad3      	subs	r3, r2, r3
 8012c72:	b29a      	uxth	r2, r3
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	2220      	movs	r2, #32
 8012c7c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8012c7e:	2300      	movs	r3, #0
 8012c80:	e000      	b.n	8012c84 <HAL_UARTEx_ReceiveToIdle+0x206>
  }
  else
  {
    return HAL_BUSY;
 8012c82:	2302      	movs	r3, #2
  }
}
 8012c84:	4618      	mov	r0, r3
 8012c86:	3720      	adds	r7, #32
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}

08012c8c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b086      	sub	sp, #24
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	60f8      	str	r0, [r7, #12]
 8012c94:	60b9      	str	r1, [r7, #8]
 8012c96:	4613      	mov	r3, r2
 8012c98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012c9e:	2b20      	cmp	r3, #32
 8012ca0:	d135      	bne.n	8012d0e <HAL_UARTEx_ReceiveToIdle_IT+0x82>
  {
    if ((pData == NULL) || (Size == 0U))
 8012ca2:	68bb      	ldr	r3, [r7, #8]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d002      	beq.n	8012cae <HAL_UARTEx_ReceiveToIdle_IT+0x22>
 8012ca8:	88fb      	ldrh	r3, [r7, #6]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d101      	bne.n	8012cb2 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
    {
      return HAL_ERROR;
 8012cae:	2301      	movs	r3, #1
 8012cb0:	e02e      	b.n	8012d10 <HAL_UARTEx_ReceiveToIdle_IT+0x84>
    }

    __HAL_LOCK(huart);
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012cb8:	2b01      	cmp	r3, #1
 8012cba:	d101      	bne.n	8012cc0 <HAL_UARTEx_ReceiveToIdle_IT+0x34>
 8012cbc:	2302      	movs	r3, #2
 8012cbe:	e027      	b.n	8012d10 <HAL_UARTEx_ReceiveToIdle_IT+0x84>
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	2201      	movs	r2, #1
 8012ccc:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8012cce:	88fb      	ldrh	r3, [r7, #6]
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	68b9      	ldr	r1, [r7, #8]
 8012cd4:	68f8      	ldr	r0, [r7, #12]
 8012cd6:	f7ff f90d 	bl	8011ef4 <UART_Start_Receive_IT>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8012cde:	7dfb      	ldrb	r3, [r7, #23]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d112      	bne.n	8012d0a <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012ce8:	2b01      	cmp	r3, #1
 8012cea:	d10c      	bne.n	8012d06 <HAL_UARTEx_ReceiveToIdle_IT+0x7a>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	2210      	movs	r2, #16
 8012cf2:	621a      	str	r2, [r3, #32]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	681a      	ldr	r2, [r3, #0]
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	f042 0210 	orr.w	r2, r2, #16
 8012d02:	601a      	str	r2, [r3, #0]
 8012d04:	e001      	b.n	8012d0a <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8012d06:	2301      	movs	r3, #1
 8012d08:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8012d0a:	7dfb      	ldrb	r3, [r7, #23]
 8012d0c:	e000      	b.n	8012d10 <HAL_UARTEx_ReceiveToIdle_IT+0x84>
  }
  else
  {
    return HAL_BUSY;
 8012d0e:	2302      	movs	r3, #2
  }
}
 8012d10:	4618      	mov	r0, r3
 8012d12:	3718      	adds	r7, #24
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}

08012d18 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b086      	sub	sp, #24
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	60f8      	str	r0, [r7, #12]
 8012d20:	60b9      	str	r1, [r7, #8]
 8012d22:	4613      	mov	r3, r2
 8012d24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d2a:	2b20      	cmp	r3, #32
 8012d2c:	d135      	bne.n	8012d9a <HAL_UARTEx_ReceiveToIdle_DMA+0x82>
  {
    if ((pData == NULL) || (Size == 0U))
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d002      	beq.n	8012d3a <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8012d34:	88fb      	ldrh	r3, [r7, #6]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d101      	bne.n	8012d3e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8012d3a:	2301      	movs	r3, #1
 8012d3c:	e02e      	b.n	8012d9c <HAL_UARTEx_ReceiveToIdle_DMA+0x84>
    }

    __HAL_LOCK(huart);
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012d44:	2b01      	cmp	r3, #1
 8012d46:	d101      	bne.n	8012d4c <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8012d48:	2302      	movs	r3, #2
 8012d4a:	e027      	b.n	8012d9c <HAL_UARTEx_ReceiveToIdle_DMA+0x84>
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	2201      	movs	r2, #1
 8012d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	2201      	movs	r2, #1
 8012d58:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8012d5a:	88fb      	ldrh	r3, [r7, #6]
 8012d5c:	461a      	mov	r2, r3
 8012d5e:	68b9      	ldr	r1, [r7, #8]
 8012d60:	68f8      	ldr	r0, [r7, #12]
 8012d62:	f7ff f94f 	bl	8012004 <UART_Start_Receive_DMA>
 8012d66:	4603      	mov	r3, r0
 8012d68:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8012d6a:	7dfb      	ldrb	r3, [r7, #23]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d112      	bne.n	8012d96 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012d74:	2b01      	cmp	r3, #1
 8012d76:	d10c      	bne.n	8012d92 <HAL_UARTEx_ReceiveToIdle_DMA+0x7a>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	2210      	movs	r2, #16
 8012d7e:	621a      	str	r2, [r3, #32]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	681a      	ldr	r2, [r3, #0]
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	f042 0210 	orr.w	r2, r2, #16
 8012d8e:	601a      	str	r2, [r3, #0]
 8012d90:	e001      	b.n	8012d96 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8012d92:	2301      	movs	r3, #1
 8012d94:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8012d96:	7dfb      	ldrb	r3, [r7, #23]
 8012d98:	e000      	b.n	8012d9c <HAL_UARTEx_ReceiveToIdle_DMA+0x84>
  }
  else
  {
    return HAL_BUSY;
 8012d9a:	2302      	movs	r3, #2
  }
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3718      	adds	r7, #24
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8012da4:	b480      	push	{r7}
 8012da6:	b085      	sub	sp, #20
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	60f8      	str	r0, [r7, #12]
 8012dac:	1d3b      	adds	r3, r7, #4
 8012dae:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	f023 0210 	bic.w	r2, r3, #16
 8012dbc:	893b      	ldrh	r3, [r7, #8]
 8012dbe:	4619      	mov	r1, r3
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	430a      	orrs	r2, r1
 8012dc6:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8012dd2:	7abb      	ldrb	r3, [r7, #10]
 8012dd4:	061a      	lsls	r2, r3, #24
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	430a      	orrs	r2, r1
 8012ddc:	605a      	str	r2, [r3, #4]
}
 8012dde:	bf00      	nop
 8012de0:	3714      	adds	r7, #20
 8012de2:	46bd      	mov	sp, r7
 8012de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de8:	4770      	bx	lr
	...

08012dec <__errno>:
 8012dec:	4b01      	ldr	r3, [pc, #4]	; (8012df4 <__errno+0x8>)
 8012dee:	6818      	ldr	r0, [r3, #0]
 8012df0:	4770      	bx	lr
 8012df2:	bf00      	nop
 8012df4:	20000034 	.word	0x20000034

08012df8 <exit>:
 8012df8:	b508      	push	{r3, lr}
 8012dfa:	4b07      	ldr	r3, [pc, #28]	; (8012e18 <exit+0x20>)
 8012dfc:	4604      	mov	r4, r0
 8012dfe:	b113      	cbz	r3, 8012e06 <exit+0xe>
 8012e00:	2100      	movs	r1, #0
 8012e02:	f3af 8000 	nop.w
 8012e06:	4b05      	ldr	r3, [pc, #20]	; (8012e1c <exit+0x24>)
 8012e08:	6818      	ldr	r0, [r3, #0]
 8012e0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012e0c:	b103      	cbz	r3, 8012e10 <exit+0x18>
 8012e0e:	4798      	blx	r3
 8012e10:	4620      	mov	r0, r4
 8012e12:	f7ee f8b2 	bl	8000f7a <_exit>
 8012e16:	bf00      	nop
 8012e18:	00000000 	.word	0x00000000
 8012e1c:	08012fa8 	.word	0x08012fa8

08012e20 <__libc_init_array>:
 8012e20:	b570      	push	{r4, r5, r6, lr}
 8012e22:	4d0d      	ldr	r5, [pc, #52]	; (8012e58 <__libc_init_array+0x38>)
 8012e24:	4c0d      	ldr	r4, [pc, #52]	; (8012e5c <__libc_init_array+0x3c>)
 8012e26:	1b64      	subs	r4, r4, r5
 8012e28:	10a4      	asrs	r4, r4, #2
 8012e2a:	2600      	movs	r6, #0
 8012e2c:	42a6      	cmp	r6, r4
 8012e2e:	d109      	bne.n	8012e44 <__libc_init_array+0x24>
 8012e30:	4d0b      	ldr	r5, [pc, #44]	; (8012e60 <__libc_init_array+0x40>)
 8012e32:	4c0c      	ldr	r4, [pc, #48]	; (8012e64 <__libc_init_array+0x44>)
 8012e34:	f000 f822 	bl	8012e7c <_init>
 8012e38:	1b64      	subs	r4, r4, r5
 8012e3a:	10a4      	asrs	r4, r4, #2
 8012e3c:	2600      	movs	r6, #0
 8012e3e:	42a6      	cmp	r6, r4
 8012e40:	d105      	bne.n	8012e4e <__libc_init_array+0x2e>
 8012e42:	bd70      	pop	{r4, r5, r6, pc}
 8012e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e48:	4798      	blx	r3
 8012e4a:	3601      	adds	r6, #1
 8012e4c:	e7ee      	b.n	8012e2c <__libc_init_array+0xc>
 8012e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e52:	4798      	blx	r3
 8012e54:	3601      	adds	r6, #1
 8012e56:	e7f2      	b.n	8012e3e <__libc_init_array+0x1e>
 8012e58:	08012fb4 	.word	0x08012fb4
 8012e5c:	08012fb4 	.word	0x08012fb4
 8012e60:	08012fb4 	.word	0x08012fb4
 8012e64:	08012fb8 	.word	0x08012fb8

08012e68 <memset>:
 8012e68:	4402      	add	r2, r0
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	4293      	cmp	r3, r2
 8012e6e:	d100      	bne.n	8012e72 <memset+0xa>
 8012e70:	4770      	bx	lr
 8012e72:	f803 1b01 	strb.w	r1, [r3], #1
 8012e76:	e7f9      	b.n	8012e6c <memset+0x4>

08012e78 <__EH_FRAME_BEGIN__>:
 8012e78:	0000 0000                                   ....

08012e7c <_init>:
 8012e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e7e:	bf00      	nop
 8012e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e82:	bc08      	pop	{r3}
 8012e84:	469e      	mov	lr, r3
 8012e86:	4770      	bx	lr

08012e88 <_fini>:
 8012e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e8a:	bf00      	nop
 8012e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e8e:	bc08      	pop	{r3}
 8012e90:	469e      	mov	lr, r3
 8012e92:	4770      	bx	lr

Disassembly of section .data:

20000000 <__dso_handle>:
20000000:	0000 0000                                   ....

20000004 <environ>:
20000004:	011c 2000                                   ... 

20000008 <SystemCoreClock>:
20000008:	0900 003d                                   ..=.

2000000c <uwTickPrio>:
2000000c:	0010 0000                                   ....

20000010 <uwTickFreq>:
20000010:	0001 0000                                   ....

20000014 <pFlash>:
	...
20000024:	0001 0000 0000 0000 0000 0000 0000 0000     ................

20000034 <_impure_ptr>:
20000034:	0038 2000                                   8.. 

20000038 <impure_data>:
	...

20000098 <HAL_FLASHEx_EnableRunPowerDown>:
  * @brief   Enable the Power down in Run Mode
  * @note    This function should be called and executed from SRAM memory
  * @retval  HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_EnableRunPowerDown(void)
{
20000098:	b480      	push	{r7}
2000009a:	af00      	add	r7, sp, #0
  /* Enable the Power Down in Run mode*/
  __HAL_FLASH_POWER_DOWN_ENABLE();
2000009c:	4b08      	ldr	r3, [pc, #32]	; (200000c0 <HAL_FLASHEx_EnableRunPowerDown+0x28>)
2000009e:	4a09      	ldr	r2, [pc, #36]	; (200000c4 <HAL_FLASHEx_EnableRunPowerDown+0x2c>)
200000a0:	605a      	str	r2, [r3, #4]
200000a2:	4b07      	ldr	r3, [pc, #28]	; (200000c0 <HAL_FLASHEx_EnableRunPowerDown+0x28>)
200000a4:	4a08      	ldr	r2, [pc, #32]	; (200000c8 <HAL_FLASHEx_EnableRunPowerDown+0x30>)
200000a6:	605a      	str	r2, [r3, #4]
200000a8:	4b05      	ldr	r3, [pc, #20]	; (200000c0 <HAL_FLASHEx_EnableRunPowerDown+0x28>)
200000aa:	681b      	ldr	r3, [r3, #0]
200000ac:	4a04      	ldr	r2, [pc, #16]	; (200000c0 <HAL_FLASHEx_EnableRunPowerDown+0x28>)
200000ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
200000b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
200000b4:	2300      	movs	r3, #0

}
200000b6:	4618      	mov	r0, r3
200000b8:	46bd      	mov	sp, r7
200000ba:	f85d 7b04 	ldr.w	r7, [sp], #4
200000be:	4770      	bx	lr
200000c0:	40022000 	.word	0x40022000
200000c4:	04152637 	.word	0x04152637
200000c8:	fafbfcfd 	.word	0xfafbfcfd

200000cc <HAL_FLASHEx_DisableRunPowerDown>:
  * @brief   Disable the Power down in Run Mode
  * @note    This function should be called and executed from SRAM memory
  * @retval  HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_DisableRunPowerDown(void)
{
200000cc:	b480      	push	{r7}
200000ce:	af00      	add	r7, sp, #0
  /* Disable the Power Down in Run mode*/
  __HAL_FLASH_POWER_DOWN_DISABLE();
200000d0:	4b08      	ldr	r3, [pc, #32]	; (200000f4 <HAL_FLASHEx_DisableRunPowerDown+0x28>)
200000d2:	4a09      	ldr	r2, [pc, #36]	; (200000f8 <HAL_FLASHEx_DisableRunPowerDown+0x2c>)
200000d4:	605a      	str	r2, [r3, #4]
200000d6:	4b07      	ldr	r3, [pc, #28]	; (200000f4 <HAL_FLASHEx_DisableRunPowerDown+0x28>)
200000d8:	4a08      	ldr	r2, [pc, #32]	; (200000fc <HAL_FLASHEx_DisableRunPowerDown+0x30>)
200000da:	605a      	str	r2, [r3, #4]
200000dc:	4b05      	ldr	r3, [pc, #20]	; (200000f4 <HAL_FLASHEx_DisableRunPowerDown+0x28>)
200000de:	681b      	ldr	r3, [r3, #0]
200000e0:	4a04      	ldr	r2, [pc, #16]	; (200000f4 <HAL_FLASHEx_DisableRunPowerDown+0x28>)
200000e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
200000e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
200000e8:	2300      	movs	r3, #0
}
200000ea:	4618      	mov	r0, r3
200000ec:	46bd      	mov	sp, r7
200000ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200000f2:	4770      	bx	lr
200000f4:	40022000 	.word	0x40022000
200000f8:	04152637 	.word	0x04152637
200000fc:	fafbfcfd 	.word	0xfafbfcfd
